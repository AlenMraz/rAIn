
vs_pr1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b11c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800b2bc  0800b2bc  0000c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f0  0800b2f0  0000d084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f0  0800b2f0  0000c2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2f8  0800b2f8  0000d084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f8  0800b2f8  0000c2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2fc  0800b2fc  0000c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800b300  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013850  20000084  0800b384  0000d084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138d4  0800b384  0000d8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f257  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e8e  00000000  00000000  0002c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  000311a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001576  00000000  00000000  00032d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afd0  00000000  00000000  000342de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c8b  00000000  00000000  0004f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff7b  00000000  00000000  00072f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078dc  00000000  00000000  00112ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b2a4 	.word	0x0800b2a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800b2a4 	.word	0x0800b2a4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcc0 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f814 	bl	8000504 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004dc:	f000 f87a 	bl	80005d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f95a 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f896 	bl	8000614 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004e8:	f000 f8c2 	bl	8000670 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004ec:	f000 f8ee 	bl	80006cc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f0:	f000 f91c 	bl	800072c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f4:	f00a fa6a 	bl	800a9cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  vTaskStartScheduler();
 80004f8:	f006 fd74 	bl	8006fe4 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fc:	f00a fa8c 	bl	800aa18 <MX_USB_HOST_Process>
 8000500:	e7fc      	b.n	80004fc <main+0x2c>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f00a fe22 	bl	800b15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b27      	ldr	r3, [pc, #156]	@ (80005cc <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a26      	ldr	r2, [pc, #152]	@ (80005cc <SystemClock_Config+0xc8>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b24      	ldr	r3, [pc, #144]	@ (80005cc <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a20      	ldr	r2, [pc, #128]	@ (80005d0 <SystemClock_Config+0xcc>)
 800054e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000564:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000578:	23c0      	movs	r3, #192	@ 0xc0
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057c:	2304      	movs	r3, #4
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fe63 	bl	8004254 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 f9ec 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2103      	movs	r1, #3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f8c5 	bl	8004744 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005c0:	f000 f9d6 	bl	8000970 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	@ 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ea:	2301      	movs	r3, #1
 80005ec:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005ee:	23c8      	movs	r3, #200	@ 0xc8
 80005f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005f2:	2305      	movs	r3, #5
 80005f4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fadf 	bl	8004bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000608:	f000 f9b2 	bl	8000970 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f003 f81b 	bl	800368c <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f988 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000a0 	.word	0x200000a0
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2S2_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2S2_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2S2_Init+0x50>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2S2_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_I2S2_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2S2_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2S2_Init+0x50>)
 8000696:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <MX_I2S2_Init+0x58>)
 8000698:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2S2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2S2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2S2_Init+0x50>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2S2_Init+0x50>)
 80006ae:	f003 f931 	bl	8003914 <HAL_I2S_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f95a 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000f4 	.word	0x200000f4
 80006c4:	40003800 	.word	0x40003800
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <MX_I2S3_Init+0x5c>)
 80006f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2S3_Init+0x54>)
 800070c:	f003 f902 	bl	8003914 <HAL_I2S_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000716:	f000 f92b 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000013c 	.word	0x2000013c
 8000724:	40003c00 	.word	0x40003c00
 8000728:	00017700 	.word	0x00017700

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f004 fb71 	bl	8004e64 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f8f2 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000184 	.word	0x20000184
 8000794:	40013000 	.word	0x40013000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b61      	ldr	r3, [pc, #388]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a60      	ldr	r2, [pc, #384]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b5e      	ldr	r3, [pc, #376]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a59      	ldr	r2, [pc, #356]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b57      	ldr	r3, [pc, #348]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a52      	ldr	r2, [pc, #328]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b50      	ldr	r3, [pc, #320]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b3e      	ldr	r3, [pc, #248]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <MX_GPIO_Init+0x1a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4838      	ldr	r0, [pc, #224]	@ (800093c <MX_GPIO_Init+0x1a4>)
 800085c:	f000 fdc8 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x1a8>)
 8000866:	f000 fdc3 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000870:	4834      	ldr	r0, [pc, #208]	@ (8000944 <MX_GPIO_Init+0x1ac>)
 8000872:	f000 fdbd 	bl	80013f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000876:	2304      	movs	r3, #4
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482c      	ldr	r0, [pc, #176]	@ (800093c <MX_GPIO_Init+0x1a4>)
 800088a:	f000 fc2d 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4825      	ldr	r0, [pc, #148]	@ (800093c <MX_GPIO_Init+0x1a4>)
 80008a6:	f000 fc1f 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008aa:	2332      	movs	r3, #50	@ 0x32
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481f      	ldr	r0, [pc, #124]	@ (800093c <MX_GPIO_Init+0x1a4>)
 80008c0:	f000 fc12 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4819      	ldr	r0, [pc, #100]	@ (8000940 <MX_GPIO_Init+0x1a8>)
 80008dc:	f000 fc04 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4814      	ldr	r0, [pc, #80]	@ (8000948 <MX_GPIO_Init+0x1b0>)
 80008f6:	f000 fbf7 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_GPIO_Init+0x1ac>)
 8000914:	f000 fbe8 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	@ (8000944 <MX_GPIO_Init+0x1ac>)
 800092c:	f000 fbdc 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	@ 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020800 	.word	0x40020800
 8000944:	40020c00 	.word	0x40020c00
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fa9d 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40000c00 	.word	0x40000c00

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_I2C_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12c      	bne.n	8000a48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	2312      	movs	r3, #18
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_I2C_MspInit+0x8c>)
 8000a28:	f000 fb5e 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	@ 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	@ 0x38
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a59      	ldr	r2, [pc, #356]	@ (8000be0 <HAL_I2S_MspInit+0x184>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d15b      	bne.n	8000b36 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	4b58      	ldr	r3, [pc, #352]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a57      	ldr	r2, [pc, #348]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b55      	ldr	r3, [pc, #340]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	4b51      	ldr	r3, [pc, #324]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a50      	ldr	r2, [pc, #320]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a49      	ldr	r2, [pc, #292]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b47      	ldr	r3, [pc, #284]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	483e      	ldr	r0, [pc, #248]	@ (8000be8 <HAL_I2S_MspInit+0x18c>)
 8000aee:	f000 fafb 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000af2:	2308      	movs	r3, #8
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b02:	2305      	movs	r3, #5
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4836      	ldr	r0, [pc, #216]	@ (8000be8 <HAL_I2S_MspInit+0x18c>)
 8000b0e:	f000 faeb 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b24:	2305      	movs	r3, #5
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482f      	ldr	r0, [pc, #188]	@ (8000bec <HAL_I2S_MspInit+0x190>)
 8000b30:	f000 fada 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b34:	e04f      	b.n	8000bd6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf0 <HAL_I2S_MspInit+0x194>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d14a      	bne.n	8000bd6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a26      	ldr	r2, [pc, #152]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b50:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a1f      	ldr	r2, [pc, #124]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <HAL_I2S_MspInit+0x188>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b94:	2310      	movs	r3, #16
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4811      	ldr	r0, [pc, #68]	@ (8000bf4 <HAL_I2S_MspInit+0x198>)
 8000bb0:	f000 fa9a 	bl	80010e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_I2S_MspInit+0x18c>)
 8000bd2:	f000 fa89 	bl	80010e8 <HAL_GPIO_Init>
}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	@ 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40003800 	.word	0x40003800
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40003c00 	.word	0x40003c00
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c52:	23e0      	movs	r3, #224	@ 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	f000 fa3b 	bl	80010e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b30      	ldr	r3, [pc, #192]	@ (8000d6c <HAL_InitTick+0xe4>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb4:	f107 0210 	add.w	r2, r7, #16
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 ff4c 	bl	8004b5c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cce:	f003 ff31 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8000cd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cd4:	e004      	b.n	8000ce0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cd6:	f003 ff2d 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce2:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <HAL_InitTick+0xe8>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	3b01      	subs	r3, #1
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cf0:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_InitTick+0xf0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cfa:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d74 <HAL_InitTick+0xec>)
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d14:	4817      	ldr	r0, [pc, #92]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d16:	f004 f92e 	bl	8004f76 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11b      	bne.n	8000d60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d28:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <HAL_InitTick+0xec>)
 8000d2a:	f004 f97d 	bl	8005028 <HAL_TIM_Base_Start_IT>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d111      	bne.n	8000d60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d3c:	2032      	movs	r0, #50	@ 0x32
 8000d3e:	f000 f9c5 	bl	80010cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d808      	bhi.n	8000d5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2032      	movs	r0, #50	@ 0x32
 8000d4e:	f000 f9a1 	bl	8001094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_InitTick+0xf4>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e002      	b.n	8000d60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3738      	adds	r7, #56	@ 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	200001dc 	.word	0x200001dc
 8000d78:	40000c00 	.word	0x40000c00
 8000d7c:	20000004 	.word	0x20000004

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM5_IRQHandler+0x10>)
 8000dbe:	f004 f995 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001dc 	.word	0x200001dc

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f000 fe07 	bl	80019e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200133a8 	.word	0x200133a8

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f00a f9ab 	bl	800b18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb4b 	bl	80004d0 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e48:	0800b300 	.word	0x0800b300
  ldr r2, =_sbss
 8000e4c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e50:	200138d4 	.word	0x200138d4

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8fc 	bl	800107e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fefe 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fd76 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000224 	.word	0x20000224

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000224 	.word	0x20000224

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff4c 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a6:	f7ff ff61 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	6978      	ldr	r0, [r7, #20]
 80010b2:	f7ff ffb1 	bl	8001018 <NVIC_EncodePriority>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff80 	bl	8000fc4 <__NVIC_SetPriority>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff54 	bl	8000f88 <__NVIC_EnableIRQ>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e159      	b.n	80013b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8148 	bne.w	80013b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80a2 	beq.w	80013b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	4a56      	ldr	r2, [pc, #344]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127c:	6453      	str	r3, [r2, #68]	@ 0x44
 800127e:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a52      	ldr	r2, [pc, #328]	@ (80013d4 <HAL_GPIO_Init+0x2ec>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a49      	ldr	r2, [pc, #292]	@ (80013d8 <HAL_GPIO_Init+0x2f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x202>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a48      	ldr	r2, [pc, #288]	@ (80013dc <HAL_GPIO_Init+0x2f4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x1fe>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a47      	ldr	r2, [pc, #284]	@ (80013e0 <HAL_GPIO_Init+0x2f8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a46      	ldr	r2, [pc, #280]	@ (80013e4 <HAL_GPIO_Init+0x2fc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1f6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a45      	ldr	r2, [pc, #276]	@ (80013e8 <HAL_GPIO_Init+0x300>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1f2>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012da:	2307      	movs	r3, #7
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	@ (80013d4 <HAL_GPIO_Init+0x2ec>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b38      	ldr	r3, [pc, #224]	@ (80013ec <HAL_GPIO_Init+0x304>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <HAL_GPIO_Init+0x304>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <HAL_GPIO_Init+0x304>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a24      	ldr	r2, [pc, #144]	@ (80013ec <HAL_GPIO_Init+0x304>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <HAL_GPIO_Init+0x304>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1a      	ldr	r2, [pc, #104]	@ (80013ec <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <HAL_GPIO_Init+0x304>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f aea2 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af02      	add	r7, sp, #8
 8001428:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e059      	b.n	80014e8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f009 fb1a 	bl	800aa88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001462:	d102      	bne.n	800146a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f004 f869 	bl	8005546 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7c1a      	ldrb	r2, [r3, #16]
 800147c:	f88d 2000 	strb.w	r2, [sp]
 8001480:	3304      	adds	r3, #4
 8001482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001484:	f003 ffea 	bl	800545c <USB_CoreInit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e026      	b.n	80014e8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 f861 	bl	8005568 <USB_SetCurrentMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e017      	b.n	80014e8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7c1a      	ldrb	r2, [r3, #16]
 80014c0:	f88d 2000 	strb.w	r2, [sp]
 80014c4:	3304      	adds	r3, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	f004 fa04 	bl	80058d4 <USB_HostInit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e004      	b.n	80014e8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	@ 0x2c
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	460b      	mov	r3, r1
 8001504:	70bb      	strb	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800150a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800150c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_HCD_HC_Init+0x2c>
 8001518:	2302      	movs	r3, #2
 800151a:	e09d      	b.n	8001658 <HAL_HCD_HC_Init+0x168>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3319      	adds	r3, #25
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3314      	adds	r3, #20
 8001548:	787a      	ldrb	r2, [r7, #1]
 800154a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3315      	adds	r3, #21
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3326      	adds	r3, #38	@ 0x26
 8001570:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	78bb      	ldrb	r3, [r7, #2]
 800157a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800157e:	b2d8      	uxtb	r0, r3
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	3316      	adds	r3, #22
 800158e:	4602      	mov	r2, r0
 8001590:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fbc8 	bl	8001d2c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800159c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0a      	bge.n	80015ba <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3317      	adds	r3, #23
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e009      	b.n	80015ce <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3317      	adds	r3, #23
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 facc 	bl	8005b70 <USB_GetHostSpeed>
 80015d8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80015da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10b      	bne.n	80015fa <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80015e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_HCD_HC_Init+0x10a>
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80015f4:	d901      	bls.n	80015fa <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80015f6:	23bc      	movs	r3, #188	@ 0xbc
 80015f8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3318      	adds	r3, #24
 800160a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800160e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	b298      	uxth	r0, r3
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3328      	adds	r3, #40	@ 0x28
 8001624:	4602      	mov	r2, r0
 8001626:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	b29b      	uxth	r3, r3
 8001630:	787c      	ldrb	r4, [r7, #1]
 8001632:	78ba      	ldrb	r2, [r7, #2]
 8001634:	78f9      	ldrb	r1, [r7, #3]
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4623      	mov	r3, r4
 8001646:	f004 fabb 	bl	8005bc0 <USB_HC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_HCD_HC_Halt+0x1e>
 800167a:	2302      	movs	r3, #2
 800167c:	e00f      	b.n	800169e <HAL_HCD_HC_Halt+0x3e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fe01 	bl	8006296 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	70fb      	strb	r3, [r7, #3]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70bb      	strb	r3, [r7, #2]
 80016be:	4613      	mov	r3, r2
 80016c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3317      	adds	r3, #23
 80016d2:	78ba      	ldrb	r2, [r7, #2]
 80016d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3326      	adds	r3, #38	@ 0x26
 80016e6:	787a      	ldrb	r2, [r7, #1]
 80016e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016ea:	7c3b      	ldrb	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d114      	bne.n	800171a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	332a      	adds	r3, #42	@ 0x2a
 8001700:	2203      	movs	r2, #3
 8001702:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3319      	adds	r3, #25
 8001714:	7f3a      	ldrb	r2, [r7, #28]
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e009      	b.n	800172e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	332a      	adds	r3, #42	@ 0x2a
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800172e:	787b      	ldrb	r3, [r7, #1]
 8001730:	2b03      	cmp	r3, #3
 8001732:	f200 8102 	bhi.w	800193a <HAL_HCD_HC_SubmitRequest+0x292>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001925 	.word	0x08001925
 8001744:	08001811 	.word	0x08001811
 8001748:	0800189b 	.word	0x0800189b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800174c:	7c3b      	ldrb	r3, [r7, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	f040 80f5 	bne.w	800193e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001754:	78bb      	ldrb	r3, [r7, #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d12d      	bne.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800175a:	8b3b      	ldrh	r3, [r7, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	333d      	adds	r3, #61	@ 0x3d
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	333d      	adds	r3, #61	@ 0x3d
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	332a      	adds	r3, #42	@ 0x2a
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800179e:	e0ce      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	332a      	adds	r3, #42	@ 0x2a
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
      break;
 80017b4:	e0c3      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	331a      	adds	r3, #26
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	f040 80b8 	bne.w	800193e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	333c      	adds	r3, #60	@ 0x3c
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	332a      	adds	r3, #42	@ 0x2a
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
      break;
 80017f8:	e0a1      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	332a      	adds	r3, #42	@ 0x2a
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e096      	b.n	800193e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d120      	bne.n	8001858 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	333d      	adds	r3, #61	@ 0x3d
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	332a      	adds	r3, #42	@ 0x2a
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001840:	e07e      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e073      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	333c      	adds	r3, #60	@ 0x3c
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	332a      	adds	r3, #42	@ 0x2a
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
      break;
 8001882:	e05d      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	@ 0x2a
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e052      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800189a:	78bb      	ldrb	r3, [r7, #2]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d120      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333d      	adds	r3, #61	@ 0x3d
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	332a      	adds	r3, #42	@ 0x2a
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ca:	e039      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e02e      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333c      	adds	r3, #60	@ 0x3c
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	332a      	adds	r3, #42	@ 0x2a
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
      break;
 800190c:	e018      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	@ 0x2a
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e00d      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	332a      	adds	r3, #42	@ 0x2a
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
      break;
 8001938:	e002      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800193e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	332c      	adds	r3, #44	@ 0x2c
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	8b39      	ldrh	r1, [r7, #24]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4403      	add	r3, r0
 8001964:	3334      	adds	r3, #52	@ 0x34
 8001966:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	334c      	adds	r3, #76	@ 0x4c
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3338      	adds	r3, #56	@ 0x38
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3315      	adds	r3, #21
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	334d      	adds	r3, #77	@ 0x4d
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	3310      	adds	r3, #16
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	1d19      	adds	r1, r3, #4
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	799b      	ldrb	r3, [r3, #6]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f004 fa0a 	bl	8005dec <USB_HC_StartXfer>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop

080019e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 ff2a 	bl	8005854 <USB_GetMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80fb 	bne.w	8001bfe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 feed 	bl	80057ec <USB_ReadInterrupts>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80f1 	beq.w	8001bfc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fee4 	bl	80057ec <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a2e:	d104      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fed4 	bl	80057ec <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a4e:	d104      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fec4 	bl	80057ec <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a6e:	d104      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 feb4 	bl	80057ec <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d103      	bne.n	8001a96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fea6 	bl	80057ec <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aaa:	d120      	bne.n	8001aee <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ab4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d113      	bne.n	8001aee <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	6938      	ldr	r0, [r7, #16]
 8001aca:	f003 fd99 	bl	8005600 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f003 fdc8 	bl	8005664 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7a5b      	ldrb	r3, [r3, #9]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d105      	bne.n	8001ae8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 ffa4 	bl	8005a30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f009 f84b 	bl	800ab84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fe7a 	bl	80057ec <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b02:	d102      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 fd4d 	bl	80035a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fe6c 	bl	80057ec <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d106      	bne.n	8001b2c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f009 f814 	bl	800ab4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fe5b 	bl	80057ec <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b40:	d139      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fb94 	bl	8006274 <USB_HC_ReadInterrupt>
 8001b4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e025      	b.n	8001ba0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d018      	beq.n	8001b9a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b7e:	d106      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f905 	bl	8001d96 <HCD_HC_IN_IRQHandler>
 8001b8c:	e005      	b.n	8001b9a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 ff67 	bl	8002a68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	795b      	ldrb	r3, [r3, #5]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d3d3      	bcc.n	8001b54 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fe16 	bl	80057ec <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d101      	bne.n	8001bce <HAL_HCD_IRQHandler+0x1ea>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_HCD_IRQHandler+0x1ec>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d014      	beq.n	8001bfe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0210 	bic.w	r2, r2, #16
 8001be2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 fbfe 	bl	80033e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0210 	orr.w	r2, r2, #16
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	e000      	b.n	8001bfe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001bfc:	bf00      	nop
    }
  }
}
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_HCD_Start+0x16>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e013      	b.n	8001c42 <HAL_HCD_Start+0x3e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 ff68 	bl	8005afe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fc76 	bl	8005524 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_Stop+0x16>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00d      	b.n	8001c7c <HAL_HCD_Stop+0x32>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fc32 	bl	80064d6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 ff0a 	bl	8005aaa <USB_ResetPort>
 8001c96:	4603      	mov	r3, r0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	334c      	adds	r3, #76	@ 0x4c
 8001cbc:	781b      	ldrb	r3, [r3, #0]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3338      	adds	r3, #56	@ 0x38
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ff4c 	bl	8005b9e <USB_GetCurrentFrame>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 ff27 	bl	8005b70 <USB_GetHostSpeed>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	331a      	adds	r3, #26
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	331b      	adds	r3, #27
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3325      	adds	r3, #37	@ 0x25
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3324      	adds	r3, #36	@ 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fd2c 	bl	8005812 <USB_ReadChInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d11a      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	334d      	adds	r3, #77	@ 0x4d
 8001de6:	2207      	movs	r2, #7
 8001de8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fa4f 	bl	8006296 <USB_HC_Halt>
 8001df8:	e09e      	b.n	8001f38 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fd05 	bl	8005812 <USB_ReadChInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e12:	d11b      	bne.n	8001e4c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	334d      	adds	r3, #77	@ 0x4d
 8001e38:	2208      	movs	r2, #8
 8001e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fa26 	bl	8006296 <USB_HC_Halt>
 8001e4a:	e075      	b.n	8001f38 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fcdc 	bl	8005812 <USB_ReadChInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2308      	movs	r3, #8
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334d      	adds	r3, #77	@ 0x4d
 8001e86:	2206      	movs	r2, #6
 8001e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 f9ff 	bl	8006296 <USB_HC_Halt>
 8001e98:	e04e      	b.n	8001f38 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fcb5 	bl	8005812 <USB_ReadChInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb2:	d11b      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334d      	adds	r3, #77	@ 0x4d
 8001ed8:	2209      	movs	r2, #9
 8001eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 f9d6 	bl	8006296 <USB_HC_Halt>
 8001eea:	e025      	b.n	8001f38 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fc8c 	bl	8005812 <USB_ReadChInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f00:	2b80      	cmp	r3, #128	@ 0x80
 8001f02:	d119      	bne.n	8001f38 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	@ 0x4d
 8001f26:	2207      	movs	r2, #7
 8001f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f9af 	bl	8006296 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fc66 	bl	8005812 <USB_ReadChInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f50:	d112      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 f99b 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f72:	6093      	str	r3, [r2, #8]
 8001f74:	f000 bd75 	b.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fc46 	bl	8005812 <USB_ReadChInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 8128 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d119      	bne.n	8001fee <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	331b      	adds	r3, #27
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	0151      	lsls	r1, r2, #5
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	799b      	ldrb	r3, [r3, #6]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01b      	beq.n	800202e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3330      	adds	r3, #48	@ 0x30
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	1ac9      	subs	r1, r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4403      	add	r3, r0
 800202a:	3338      	adds	r3, #56	@ 0x38
 800202c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	334d      	adds	r3, #77	@ 0x4d
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3344      	adds	r3, #68	@ 0x44
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2301      	movs	r3, #1
 8002066:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3326      	adds	r3, #38	@ 0x26
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3326      	adds	r3, #38	@ 0x26
 800208e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002090:	2b02      	cmp	r3, #2
 8002092:	d110      	bne.n	80020b6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f004 f8fa 	bl	8006296 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	2310      	movs	r3, #16
 80020b2:	6093      	str	r3, [r2, #8]
 80020b4:	e03d      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3326      	adds	r3, #38	@ 0x26
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d00a      	beq.n	80020e2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3326      	adds	r3, #38	@ 0x26
 80020dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d127      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002100:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334c      	adds	r3, #76	@ 0x4c
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334c      	adds	r3, #76	@ 0x4c
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f008 fd37 	bl	800aba0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	799b      	ldrb	r3, [r3, #6]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13b      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	3338      	adds	r3, #56	@ 0x38
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4403      	add	r3, r0
 800215a:	3328      	adds	r3, #40	@ 0x28
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	440b      	add	r3, r1
 8002160:	1e59      	subs	r1, r3, #1
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4403      	add	r3, r0
 8002170:	3328      	adds	r3, #40	@ 0x28
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8470 	beq.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	333c      	adds	r3, #60	@ 0x3c
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2d8      	uxtb	r0, r3
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	333c      	adds	r3, #60	@ 0x3c
 80021aa:	4602      	mov	r2, r0
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	f000 bc58 	b.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	333c      	adds	r3, #60	@ 0x3c
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2d8      	uxtb	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	4602      	mov	r2, r0
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	f000 bc40 	b.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fb11 	bl	8005812 <USB_ReadChInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d131      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	331a      	adds	r3, #26
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 841f 	bne.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	331b      	adds	r3, #27
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	334d      	adds	r3, #77	@ 0x4d
 8002248:	2203      	movs	r2, #3
 800224a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f004 f81e 	bl	8006296 <USB_HC_Halt>
 800225a:	f000 bc02 	b.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fad3 	bl	8005812 <USB_ReadChInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	f040 8305 	bne.w	8002882 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002284:	461a      	mov	r2, r3
 8002286:	2302      	movs	r3, #2
 8002288:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	334d      	adds	r3, #77	@ 0x4d
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d114      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	334d      	adds	r3, #77	@ 0x4d
 80022b0:	2202      	movs	r2, #2
 80022b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	334c      	adds	r3, #76	@ 0x4c
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e2cc      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	334d      	adds	r3, #77	@ 0x4d
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d114      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334d      	adds	r3, #77	@ 0x4d
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	334c      	adds	r3, #76	@ 0x4c
 8002304:	2205      	movs	r2, #5
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e2ac      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	334d      	adds	r3, #77	@ 0x4d
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b07      	cmp	r3, #7
 800231e:	d00b      	beq.n	8002338 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	@ 0x4d
 8002330:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002332:	2b09      	cmp	r3, #9
 8002334:	f040 80a6 	bne.w	8002484 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334d      	adds	r3, #77	@ 0x4d
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	@ 0x44
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4403      	add	r3, r0
 800236c:	3344      	adds	r3, #68	@ 0x44
 800236e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3344      	adds	r3, #68	@ 0x44
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d943      	bls.n	800240e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3344      	adds	r3, #68	@ 0x44
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	331a      	adds	r3, #26
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d123      	bne.n	80023f8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	331b      	adds	r3, #27
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	331c      	adds	r3, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	0151      	lsls	r1, r2, #5
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	440a      	add	r2, r1
 80023ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334c      	adds	r3, #76	@ 0x4c
 8002408:	2204      	movs	r2, #4
 800240a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800240c:	e229      	b.n	8002862 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334c      	adds	r3, #76	@ 0x4c
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3326      	adds	r3, #38	@ 0x26
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3326      	adds	r3, #38	@ 0x26
 8002448:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244a:	2b02      	cmp	r3, #2
 800244c:	f040 8209 	bne.w	8002862 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002466:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002482:	e1ee      	b.n	8002862 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	334d      	adds	r3, #77	@ 0x4d
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b05      	cmp	r3, #5
 8002498:	f040 80c8 	bne.w	800262c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	334d      	adds	r3, #77	@ 0x4d
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	331b      	adds	r3, #27
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 81ce 	bne.w	8002864 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3326      	adds	r3, #38	@ 0x26
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d16b      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3348      	adds	r3, #72	@ 0x48
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4403      	add	r3, r0
 80024fe:	3348      	adds	r3, #72	@ 0x48
 8002500:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3348      	adds	r3, #72	@ 0x48
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d943      	bls.n	80025a0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3348      	adds	r3, #72	@ 0x48
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	331b      	adds	r3, #27
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3344      	adds	r3, #68	@ 0x44
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d809      	bhi.n	800256a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	331c      	adds	r3, #28
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002588:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	334c      	adds	r3, #76	@ 0x4c
 800259a:	2204      	movs	r2, #4
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e014      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334c      	adds	r3, #76	@ 0x4c
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e009      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	334c      	adds	r3, #76	@ 0x4c
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3326      	adds	r3, #38	@ 0x26
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3326      	adds	r3, #38	@ 0x26
 80025f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 8136 	bne.w	8002864 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800260e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002616:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e11b      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334d      	adds	r3, #77	@ 0x4d
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b03      	cmp	r3, #3
 8002640:	f040 8081 	bne.w	8002746 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334d      	adds	r3, #77	@ 0x4d
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	331b      	adds	r3, #27
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 80fa 	bne.w	8002864 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334c      	adds	r3, #76	@ 0x4c
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	0151      	lsls	r1, r2, #5
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	440a      	add	r2, r1
 800269a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026c2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	0151      	lsls	r1, r2, #5
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	440a      	add	r2, r1
 80026da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026de:	f023 0320 	bic.w	r3, r3, #32
 80026e2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3326      	adds	r3, #38	@ 0x26
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3326      	adds	r3, #38	@ 0x26
 800270a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270c:	2b02      	cmp	r3, #2
 800270e:	f040 80a9 	bne.w	8002864 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002728:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002730:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e08e      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	334d      	adds	r3, #77	@ 0x4d
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d143      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334d      	adds	r3, #77	@ 0x4d
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334c      	adds	r3, #76	@ 0x4c
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3326      	adds	r3, #38	@ 0x26
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3326      	adds	r3, #38	@ 0x26
 80027aa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d159      	bne.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e03f      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	334d      	adds	r3, #77	@ 0x4d
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d126      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	334d      	adds	r3, #77	@ 0x4d
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3344      	adds	r3, #68	@ 0x44
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c59      	adds	r1, r3, #1
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4403      	add	r3, r0
 800282e:	3344      	adds	r3, #68	@ 0x44
 8002830:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	334c      	adds	r3, #76	@ 0x4c
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e00d      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334d      	adds	r3, #77	@ 0x4d
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	f000 8100 	beq.w	8002a60 <HCD_HC_IN_IRQHandler+0xcca>
 8002860:	e000      	b.n	8002864 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002862:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334c      	adds	r3, #76	@ 0x4c
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f008 f990 	bl	800aba0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002880:	e0ef      	b.n	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f002 ffc1 	bl	8005812 <USB_ReadChInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	2b40      	cmp	r3, #64	@ 0x40
 8002898:	d12f      	bne.n	80028fa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2340      	movs	r3, #64	@ 0x40
 80028aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	334d      	adds	r3, #77	@ 0x4d
 80028bc:	2205      	movs	r2, #5
 80028be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	331a      	adds	r3, #26
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3344      	adds	r3, #68	@ 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fccf 	bl	8006296 <USB_HC_Halt>
 80028f8:	e0b3      	b.n	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 ff85 	bl	8005812 <USB_ReadChInterrupts>
 8002908:	4603      	mov	r3, r0
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b10      	cmp	r3, #16
 8002910:	f040 80a7 	bne.w	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3326      	adds	r3, #38	@ 0x26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d11b      	bne.n	8002962 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3344      	adds	r3, #68	@ 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	334d      	adds	r3, #77	@ 0x4d
 800294e:	2204      	movs	r2, #4
 8002950:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fc9b 	bl	8006296 <USB_HC_Halt>
 8002960:	e03f      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3326      	adds	r3, #38	@ 0x26
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3326      	adds	r3, #38	@ 0x26
 8002988:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800298a:	2b02      	cmp	r3, #2
 800298c:	d129      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3344      	adds	r3, #68	@ 0x44
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HCD_HC_IN_IRQHandler+0xc2a>
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	331b      	adds	r3, #27
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d110      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	334d      	adds	r3, #77	@ 0x4d
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fc5a 	bl	8006296 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	331b      	adds	r3, #27
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d129      	bne.n	8002a4c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	331b      	adds	r3, #27
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	0151      	lsls	r1, r2, #5
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	440a      	add	r2, r1
 8002a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	0151      	lsls	r1, r2, #5
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	440a      	add	r2, r1
 8002a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	6093      	str	r3, [r2, #8]
 8002a5e:	e000      	b.n	8002a62 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a60:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fec3 	bl	8005812 <USB_ReadChInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d11b      	bne.n	8002ace <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334d      	adds	r3, #77	@ 0x4d
 8002ab8:	2207      	movs	r2, #7
 8002aba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fbe6 	bl	8006296 <USB_HC_Halt>
 8002aca:	f000 bc89 	b.w	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fe9b 	bl	8005812 <USB_ReadChInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 8082 	bne.w	8002bec <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af4:	461a      	mov	r2, r3
 8002af6:	2320      	movs	r3, #32
 8002af8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3319      	adds	r3, #25
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d124      	bne.n	8002b5a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3319      	adds	r3, #25
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334c      	adds	r3, #76	@ 0x4c
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	@ 0x4d
 8002b48:	2203      	movs	r2, #3
 8002b4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fb9e 	bl	8006296 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	331a      	adds	r3, #26
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 8437 	bne.w	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	331b      	adds	r3, #27
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 842b 	bne.w	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3326      	adds	r3, #38	@ 0x26
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d009      	beq.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	331b      	adds	r3, #27
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	334d      	adds	r3, #77	@ 0x4d
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fb60 	bl	8006296 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	@ 0x44
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e3f9      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fe0c 	bl	8005812 <USB_ReadChInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c04:	d111      	bne.n	8002c2a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c12:	461a      	mov	r2, r3
 8002c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fb37 	bl	8006296 <USB_HC_Halt>
 8002c28:	e3da      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fded 	bl	8005812 <USB_ReadChInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d168      	bne.n	8002d14 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3344      	adds	r3, #68	@ 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fdd7 	bl	8005812 <USB_ReadChInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d112      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3319      	adds	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2340      	movs	r3, #64	@ 0x40
 8002c92:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	331b      	adds	r3, #27
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	331b      	adds	r3, #27
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cdc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fac2 	bl	8006296 <USB_HC_Halt>
 8002d12:	e365      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fd78 	bl	8005812 <USB_ReadChInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d139      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	331a      	adds	r3, #26
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3319      	adds	r3, #25
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3344      	adds	r3, #68	@ 0x44
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fa85 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2340      	movs	r3, #64	@ 0x40
 8002d9c:	6093      	str	r3, [r2, #8]
 8002d9e:	e31f      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fd32 	bl	8005812 <USB_ReadChInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d11a      	bne.n	8002dee <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	334d      	adds	r3, #77	@ 0x4d
 8002dda:	2206      	movs	r2, #6
 8002ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fa55 	bl	8006296 <USB_HC_Halt>
 8002dec:	e2f8      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fd0b 	bl	8005812 <USB_ReadChInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d144      	bne.n	8002e90 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	334d      	adds	r3, #77	@ 0x4d
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3319      	adds	r3, #25
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d114      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3318      	adds	r3, #24
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3319      	adds	r3, #25
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fa0d 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	6093      	str	r3, [r2, #8]
 8002e8e:	e2a7      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fcba 	bl	8005812 <USB_ReadChInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b80      	cmp	r3, #128	@ 0x80
 8002ea6:	f040 8083 	bne.w	8002fb0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	799b      	ldrb	r3, [r3, #6]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d111      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 f9e1 	bl	8006296 <USB_HC_Halt>
 8002ed4:	e062      	b.n	8002f9c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3344      	adds	r3, #68	@ 0x44
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4403      	add	r3, r0
 8002ef6:	3344      	adds	r3, #68	@ 0x44
 8002ef8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3344      	adds	r3, #68	@ 0x44
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d922      	bls.n	8002f56 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	@ 0x44
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	334c      	adds	r3, #76	@ 0x4c
 8002f34:	2204      	movs	r2, #4
 8002f36:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334c      	adds	r3, #76	@ 0x4c
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f007 fe26 	bl	800aba0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f54:	e022      	b.n	8002f9c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334c      	adds	r3, #76	@ 0x4c
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f80:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f88:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	6093      	str	r3, [r2, #8]
 8002fae:	e217      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fc2a 	bl	8005812 <USB_ReadChInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc8:	d11b      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	2209      	movs	r2, #9
 8002fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 f955 	bl	8006296 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e1ee      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fc01 	bl	8005812 <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	f040 81df 	bne.w	80033da <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2302      	movs	r3, #2
 800302c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	334d      	adds	r3, #77	@ 0x4d
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 8093 	bne.w	800316c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334d      	adds	r3, #77	@ 0x4d
 8003056:	2202      	movs	r2, #2
 8003058:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334c      	adds	r3, #76	@ 0x4c
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3326      	adds	r3, #38	@ 0x26
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d00b      	beq.n	800309c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3326      	adds	r3, #38	@ 0x26
 8003094:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003096:	2b03      	cmp	r3, #3
 8003098:	f040 8190 	bne.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	799b      	ldrb	r3, [r3, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d115      	bne.n	80030d0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	333d      	adds	r3, #61	@ 0x3d
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	333d      	adds	r3, #61	@ 0x3d
 80030cc:	4602      	mov	r2, r0
 80030ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	799b      	ldrb	r3, [r3, #6]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8171 	bne.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3334      	adds	r3, #52	@ 0x34
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8165 	beq.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3334      	adds	r3, #52	@ 0x34
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4403      	add	r3, r0
 8003112:	3328      	adds	r3, #40	@ 0x28
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	440b      	add	r3, r1
 8003118:	1e59      	subs	r1, r3, #1
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003130:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 813f 	beq.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	333d      	adds	r3, #61	@ 0x3d
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	f083 0301 	eor.w	r3, r3, #1
 8003156:	b2d8      	uxtb	r0, r3
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	333d      	adds	r3, #61	@ 0x3d
 8003166:	4602      	mov	r2, r0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e127      	b.n	80033bc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d120      	bne.n	80031c4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334d      	adds	r3, #77	@ 0x4d
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	331b      	adds	r3, #27
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 8107 	bne.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334c      	adds	r3, #76	@ 0x4c
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e0fb      	b.n	80033bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	334d      	adds	r3, #77	@ 0x4d
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d13a      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	334d      	adds	r3, #77	@ 0x4d
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334c      	adds	r3, #76	@ 0x4c
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 80d1 	bne.w	80033bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	331b      	adds	r3, #27
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	0151      	lsls	r1, r2, #5
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	440a      	add	r2, r1
 8003244:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324c:	6053      	str	r3, [r2, #4]
 800324e:	e0b5      	b.n	80033bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d114      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	@ 0x4c
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e095      	b.n	80033bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d114      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334c      	adds	r3, #76	@ 0x4c
 80032ca:	2205      	movs	r2, #5
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e075      	b.n	80033bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	334d      	adds	r3, #77	@ 0x4d
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b07      	cmp	r3, #7
 80032e4:	d00a      	beq.n	80032fc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334d      	adds	r3, #77	@ 0x4d
 80032f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	d170      	bne.n	80033de <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3344      	adds	r3, #68	@ 0x44
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3344      	adds	r3, #68	@ 0x44
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d914      	bls.n	8003374 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334c      	adds	r3, #76	@ 0x4c
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003372:	e022      	b.n	80033ba <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334c      	adds	r3, #76	@ 0x4c
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800339e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334c      	adds	r3, #76	@ 0x4c
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f007 fbe4 	bl	800aba0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033d8:	e002      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80033da:	bf00      	nop
 80033dc:	e000      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80033de:	bf00      	nop
  }
}
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	@ 0x28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	0c5b      	lsrs	r3, r3, #17
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d004      	beq.n	800342c <HCD_RXQLVL_IRQHandler+0x46>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b05      	cmp	r3, #5
 8003426:	f000 80b6 	beq.w	8003596 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800342a:	e0b7      	b.n	800359c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80b3 	beq.w	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	332c      	adds	r3, #44	@ 0x2c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a7 	beq.w	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3338      	adds	r3, #56	@ 0x38
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	18d1      	adds	r1, r2, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	3334      	adds	r3, #52	@ 0x34
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4299      	cmp	r1, r3
 8003476:	f200 8083 	bhi.w	8003580 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	332c      	adds	r3, #44	@ 0x2c
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	b292      	uxth	r2, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f002 f951 	bl	800573c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	332c      	adds	r3, #44	@ 0x2c
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	18d1      	adds	r1, r2, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	332c      	adds	r3, #44	@ 0x2c
 80034c0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3338      	adds	r3, #56	@ 0x38
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	18d1      	adds	r1, r2, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	3338      	adds	r3, #56	@ 0x38
 80034e8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	0cdb      	lsrs	r3, r3, #19
 80034fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4293      	cmp	r3, r2
 8003518:	d13f      	bne.n	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03c      	beq.n	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003536:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800353e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	333c      	adds	r3, #60	@ 0x3c
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	333c      	adds	r3, #60	@ 0x3c
 800357a:	4602      	mov	r2, r0
 800357c:	701a      	strb	r2, [r3, #0]
      break;
 800357e:	e00c      	b.n	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334c      	adds	r3, #76	@ 0x4c
 8003590:	2204      	movs	r2, #4
 8003592:	701a      	strb	r2, [r3, #0]
      break;
 8003594:	e001      	b.n	800359a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800359a:	bf00      	nop
  }
}
 800359c:	bf00      	nop
 800359e:	3728      	adds	r7, #40	@ 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d10b      	bne.n	80035f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f007 fabe 	bl	800ab68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d132      	bne.n	8003664 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d126      	bne.n	800365e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7a5b      	ldrb	r3, [r3, #9]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d113      	bne.n	8003640 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800361e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003622:	d106      	bne.n	8003632 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f002 fa00 	bl	8005a30 <USB_InitFSLSPClkSel>
 8003630:	e011      	b.n	8003656 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f002 f9f9 	bl	8005a30 <USB_InitFSLSPClkSel>
 800363e:	e00a      	b.n	8003656 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	79db      	ldrb	r3, [r3, #7]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800364e:	461a      	mov	r2, r3
 8003650:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003654:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f007 fab0 	bl	800abbc <HAL_HCD_PortEnabled_Callback>
 800365c:	e002      	b.n	8003664 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f007 faba 	bl	800abd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b20      	cmp	r3, #32
 800366c:	d103      	bne.n	8003676 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e12b      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f98a 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	@ 0x24
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f0:	f001 fa20 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80036f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a81      	ldr	r2, [pc, #516]	@ (8003900 <HAL_I2C_Init+0x274>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d807      	bhi.n	8003710 <HAL_I2C_Init+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a80      	ldr	r2, [pc, #512]	@ (8003904 <HAL_I2C_Init+0x278>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e006      	b.n	800371e <HAL_I2C_Init+0x92>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a7d      	ldr	r2, [pc, #500]	@ (8003908 <HAL_I2C_Init+0x27c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	bf94      	ite	ls
 8003718:	2301      	movls	r3, #1
 800371a:	2300      	movhi	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0e7      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a78      	ldr	r2, [pc, #480]	@ (800390c <HAL_I2C_Init+0x280>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0c9b      	lsrs	r3, r3, #18
 8003730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a6a      	ldr	r2, [pc, #424]	@ (8003900 <HAL_I2C_Init+0x274>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d802      	bhi.n	8003760 <HAL_I2C_Init+0xd4>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3301      	adds	r3, #1
 800375e:	e009      	b.n	8003774 <HAL_I2C_Init+0xe8>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	4a69      	ldr	r2, [pc, #420]	@ (8003910 <HAL_I2C_Init+0x284>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	3301      	adds	r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	495c      	ldr	r1, [pc, #368]	@ (8003900 <HAL_I2C_Init+0x274>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d819      	bhi.n	80037c8 <HAL_I2C_Init+0x13c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e59      	subs	r1, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a8:	400b      	ands	r3, r1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_I2C_Init+0x138>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e59      	subs	r1, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c2:	e051      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e04f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d111      	bne.n	80037f4 <HAL_I2C_Init+0x168>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e012      	b.n	800381a <HAL_I2C_Init+0x18e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1e58      	subs	r0, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	0099      	lsls	r1, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x196>
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10e      	bne.n	8003848 <HAL_I2C_Init+0x1bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e58      	subs	r0, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	fbb0 f3f3 	udiv	r3, r0, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003846:	e00f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e58      	subs	r0, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	0099      	lsls	r1, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	fbb0 f3f3 	udiv	r3, r0, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6911      	ldr	r1, [r2, #16]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	000186a0 	.word	0x000186a0
 8003904:	001e847f 	.word	0x001e847f
 8003908:	003d08ff 	.word	0x003d08ff
 800390c:	431bde83 	.word	0x431bde83
 8003910:	10624dd3 	.word	0x10624dd3

08003914 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e128      	b.n	8003b78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a90      	ldr	r2, [pc, #576]	@ (8003b80 <HAL_I2S_Init+0x26c>)
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fd f88b 	bl	8000a5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800395c:	f023 030f 	bic.w	r3, r3, #15
 8003960:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d060      	beq.n	8003a34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800397a:	2310      	movs	r3, #16
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e001      	b.n	8003984 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b20      	cmp	r3, #32
 800398a:	d802      	bhi.n	8003992 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003992:	2001      	movs	r0, #1
 8003994:	f001 fa04 	bl	8004da0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003998:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a2:	d125      	bne.n	80039f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	3305      	adds	r3, #5
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e01f      	b.n	8003a0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	3305      	adds	r3, #5
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e00e      	b.n	8003a0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	3305      	adds	r3, #5
 8003a0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4a5c      	ldr	r2, [pc, #368]	@ (8003b84 <HAL_I2S_Init+0x270>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e003      	b.n	8003a3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d902      	bls.n	8003a48 <HAL_I2S_Init+0x134>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2bff      	cmp	r3, #255	@ 0xff
 8003a46:	d907      	bls.n	8003a58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	f043 0210 	orr.w	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e08f      	b.n	8003b78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a76:	f023 030f 	bic.w	r3, r3, #15
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6851      	ldr	r1, [r2, #4]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68d2      	ldr	r2, [r2, #12]
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6992      	ldr	r2, [r2, #24]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d161      	bne.n	8003b68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_I2S_Init+0x274>)
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a37      	ldr	r2, [pc, #220]	@ (8003b8c <HAL_I2S_Init+0x278>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2S_Init+0x1a4>
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <HAL_I2S_Init+0x27c>)
 8003ab6:	e001      	b.n	8003abc <HAL_I2S_Init+0x1a8>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4932      	ldr	r1, [pc, #200]	@ (8003b8c <HAL_I2S_Init+0x278>)
 8003ac4:	428a      	cmp	r2, r1
 8003ac6:	d101      	bne.n	8003acc <HAL_I2S_Init+0x1b8>
 8003ac8:	4a31      	ldr	r2, [pc, #196]	@ (8003b90 <HAL_I2S_Init+0x27c>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2S_Init+0x1bc>
 8003acc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ad0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2b      	ldr	r2, [pc, #172]	@ (8003b8c <HAL_I2S_Init+0x278>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2S_Init+0x1d4>
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <HAL_I2S_Init+0x27c>)
 8003ae6:	e001      	b.n	8003aec <HAL_I2S_Init+0x1d8>
 8003ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aec:	2202      	movs	r2, #2
 8003aee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_I2S_Init+0x278>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_I2S_Init+0x1ea>
 8003afa:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_I2S_Init+0x27c>)
 8003afc:	e001      	b.n	8003b02 <HAL_I2S_Init+0x1ee>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0e:	d003      	beq.n	8003b18 <HAL_I2S_Init+0x204>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <HAL_I2S_Init+0x278>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2S_Init+0x24c>
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_I2S_Init+0x27c>)
 8003b5e:	e001      	b.n	8003b64 <HAL_I2S_Init+0x250>
 8003b60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b64:	897a      	ldrh	r2, [r7, #10]
 8003b66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	08003c8b 	.word	0x08003c8b
 8003b84:	cccccccd 	.word	0xcccccccd
 8003b88:	08003da1 	.word	0x08003da1
 8003b8c:	40003800 	.word	0x40003800
 8003b90:	40003400 	.word	0x40003400

08003b94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	881a      	ldrh	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	1c9a      	adds	r2, r3, #2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10e      	bne.n	8003c24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ffb8 	bl	8003b94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10e      	bne.n	8003c82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff93 	bl	8003ba8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d13a      	bne.n	8003d1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d109      	bne.n	8003cc4 <I2S_IRQHandler+0x3a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cba:	2b40      	cmp	r3, #64	@ 0x40
 8003cbc:	d102      	bne.n	8003cc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ffb4 	bl	8003c2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d126      	bne.n	8003d1c <I2S_IRQHandler+0x92>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d11f      	bne.n	8003d1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff50 	bl	8003bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d136      	bne.n	8003d96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d109      	bne.n	8003d46 <I2S_IRQHandler+0xbc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3c:	2b80      	cmp	r3, #128	@ 0x80
 8003d3e:	d102      	bne.n	8003d46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff45 	bl	8003bd0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d122      	bne.n	8003d96 <I2S_IRQHandler+0x10c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d11b      	bne.n	8003d96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff13 	bl	8003bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a92      	ldr	r2, [pc, #584]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dba:	4b92      	ldr	r3, [pc, #584]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dbc:	e001      	b.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a8b      	ldr	r2, [pc, #556]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dda:	e001      	b.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ddc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dec:	d004      	beq.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 8099 	bne.w	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f925 	bl	800405c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d107      	bne.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9c8 	bl	80041bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b40      	cmp	r3, #64	@ 0x40
 8003e34:	d13a      	bne.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d035      	beq.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6e      	ldr	r2, [pc, #440]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e4c:	e001      	b.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4969      	ldr	r1, [pc, #420]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5a:	428b      	cmp	r3, r1
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e5e:	4b69      	ldr	r3, [pc, #420]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e60:	e001      	b.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe88 	bl	8003bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	f040 80c3 	bne.w	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80bd 	beq.w	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ed2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a49      	ldr	r2, [pc, #292]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ede:	4b49      	ldr	r3, [pc, #292]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee0:	e001      	b.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ee2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4944      	ldr	r1, [pc, #272]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eee:	428b      	cmp	r3, r1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ef2:	4b44      	ldr	r3, [pc, #272]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003efe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f043 0204 	orr.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe4a 	bl	8003bbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f28:	e089      	b.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d107      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8be 	bl	80040c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8fd 	bl	8004158 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d12f      	bne.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02a      	beq.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8e:	e001      	b.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4919      	ldr	r1, [pc, #100]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fa0:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fdfa 	bl	8003bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d136      	bne.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe8:	e001      	b.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4902      	ldr	r1, [pc, #8]	@ (8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	d106      	bne.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ffa:	4b02      	ldr	r3, [pc, #8]	@ (8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e006      	b.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003ffe:	bf00      	nop
 8004000:	40003800 	.word	0x40003800
 8004004:	40003400 	.word	0x40003400
 8004008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800400c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004010:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004020:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fdc0 	bl	8003bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403c:	e000      	b.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800403e:	bf00      	nop
}
 8004040:	bf00      	nop
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c99      	adds	r1, r3, #2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6251      	str	r1, [r2, #36]	@ 0x24
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800409c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ffc9 	bl	8004048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	1c99      	adds	r1, r3, #2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80040d2:	8819      	ldrh	r1, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004150 <I2SEx_TxISR_I2SExt+0x90>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <I2SEx_TxISR_I2SExt+0x22>
 80040de:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <I2SEx_TxISR_I2SExt+0x94>)
 80040e0:	e001      	b.n	80040e6 <I2SEx_TxISR_I2SExt+0x26>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e6:	460a      	mov	r2, r1
 80040e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d121      	bne.n	8004146 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a12      	ldr	r2, [pc, #72]	@ (8004150 <I2SEx_TxISR_I2SExt+0x90>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <I2SEx_TxISR_I2SExt+0x50>
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <I2SEx_TxISR_I2SExt+0x94>)
 800410e:	e001      	b.n	8004114 <I2SEx_TxISR_I2SExt+0x54>
 8004110:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	490d      	ldr	r1, [pc, #52]	@ (8004150 <I2SEx_TxISR_I2SExt+0x90>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d101      	bne.n	8004124 <I2SEx_TxISR_I2SExt+0x64>
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <I2SEx_TxISR_I2SExt+0x94>)
 8004122:	e001      	b.n	8004128 <I2SEx_TxISR_I2SExt+0x68>
 8004124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800412c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff81 	bl	8004048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40003800 	.word	0x40003800
 8004154:	40003400 	.word	0x40003400

08004158 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68d8      	ldr	r0, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	1c99      	adds	r1, r3, #2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004170:	b282      	uxth	r2, r0
 8004172:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d113      	bne.n	80041b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800419a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff4a 	bl	8004048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a20      	ldr	r2, [pc, #128]	@ (800424c <I2SEx_RxISR_I2SExt+0x90>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <I2SEx_RxISR_I2SExt+0x16>
 80041ce:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <I2SEx_RxISR_I2SExt+0x94>)
 80041d0:	e001      	b.n	80041d6 <I2SEx_RxISR_I2SExt+0x1a>
 80041d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d6:	68d8      	ldr	r0, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	1c99      	adds	r1, r3, #2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041e2:	b282      	uxth	r2, r0
 80041e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <I2SEx_RxISR_I2SExt+0x90>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <I2SEx_RxISR_I2SExt+0x50>
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <I2SEx_RxISR_I2SExt+0x94>)
 800420a:	e001      	b.n	8004210 <I2SEx_RxISR_I2SExt+0x54>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	490d      	ldr	r1, [pc, #52]	@ (800424c <I2SEx_RxISR_I2SExt+0x90>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d101      	bne.n	8004220 <I2SEx_RxISR_I2SExt+0x64>
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <I2SEx_RxISR_I2SExt+0x94>)
 800421e:	e001      	b.n	8004224 <I2SEx_RxISR_I2SExt+0x68>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004228:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff03 	bl	8004048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40003800 	.word	0x40003800
 8004250:	40003400 	.word	0x40003400

08004254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e267      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d075      	beq.n	800435e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004272:	4b88      	ldr	r3, [pc, #544]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d00c      	beq.n	8004298 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427e:	4b85      	ldr	r3, [pc, #532]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004286:	2b08      	cmp	r3, #8
 8004288:	d112      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428a:	4b82      	ldr	r3, [pc, #520]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004296:	d10b      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	4b7e      	ldr	r3, [pc, #504]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d05b      	beq.n	800435c <HAL_RCC_OscConfig+0x108>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d157      	bne.n	800435c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e242      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b8:	d106      	bne.n	80042c8 <HAL_RCC_OscConfig+0x74>
 80042ba:	4b76      	ldr	r3, [pc, #472]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a75      	ldr	r2, [pc, #468]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e01d      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0x98>
 80042d2:	4b70      	ldr	r3, [pc, #448]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b6d      	ldr	r3, [pc, #436]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042ec:	4b69      	ldr	r3, [pc, #420]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a68      	ldr	r2, [pc, #416]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b66      	ldr	r3, [pc, #408]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a65      	ldr	r2, [pc, #404]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fc fdda 	bl	8000ec4 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fc fdd6 	bl	8000ec4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e207      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xc0>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fc fdc6 	bl	8000ec4 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fc fdc2 	bl	8000ec4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1f3      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	4b51      	ldr	r3, [pc, #324]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0xe8>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d063      	beq.n	8004432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800436a:	4b4a      	ldr	r3, [pc, #296]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800437e:	2b08      	cmp	r3, #8
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b44      	ldr	r3, [pc, #272]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x152>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1c7      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4937      	ldr	r1, [pc, #220]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b34      	ldr	r3, [pc, #208]	@ (8004498 <HAL_RCC_OscConfig+0x244>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fc fd7b 	bl	8000ec4 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fc fd77 	bl	8000ec4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1a8      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b28      	ldr	r3, [pc, #160]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4925      	ldr	r1, [pc, #148]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCC_OscConfig+0x244>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc fd5a 	bl	8000ec4 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fc fd56 	bl	8000ec4 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e187      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d036      	beq.n	80044ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b15      	ldr	r3, [pc, #84]	@ (800449c <HAL_RCC_OscConfig+0x248>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fc fd3a 	bl	8000ec4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fc fd36 	bl	8000ec4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e167      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_OscConfig+0x240>)
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x200>
 8004472:	e01b      	b.n	80044ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x248>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447a:	f7fc fd23 	bl	8000ec4 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	e00e      	b.n	80044a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fc fd1f 	bl	8000ec4 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d907      	bls.n	80044a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e150      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
 8004494:	40023800 	.word	0x40023800
 8004498:	42470000 	.word	0x42470000
 800449c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ea      	bne.n	8004482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8097 	beq.w	80045e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b81      	ldr	r3, [pc, #516]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b7d      	ldr	r3, [pc, #500]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4a7c      	ldr	r2, [pc, #496]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044da:	4b7a      	ldr	r3, [pc, #488]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b77      	ldr	r3, [pc, #476]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b74      	ldr	r3, [pc, #464]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a73      	ldr	r2, [pc, #460]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fc fcdf 	bl	8000ec4 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fc fcdb 	bl	8000ec4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e10c      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_OscConfig+0x474>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x2ea>
 8004530:	4b64      	ldr	r3, [pc, #400]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004534:	4a63      	ldr	r2, [pc, #396]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	@ 0x70
 800453c:	e01c      	b.n	8004578 <HAL_RCC_OscConfig+0x324>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b05      	cmp	r3, #5
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x30c>
 8004546:	4b5f      	ldr	r3, [pc, #380]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a5e      	ldr	r2, [pc, #376]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
 8004552:	4b5c      	ldr	r3, [pc, #368]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	4a5b      	ldr	r2, [pc, #364]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	@ 0x70
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0x324>
 8004560:	4b58      	ldr	r3, [pc, #352]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a57      	ldr	r2, [pc, #348]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
 800456c:	4b55      	ldr	r3, [pc, #340]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a54      	ldr	r2, [pc, #336]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fc fca0 	bl	8000ec4 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fc fc9c 	bl	8000ec4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0cb      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ee      	beq.n	8004588 <HAL_RCC_OscConfig+0x334>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ac:	f7fc fc8a 	bl	8000ec4 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fc fc86 	bl	8000ec4 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0b5      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ca:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ee      	bne.n	80045b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	4a38      	ldr	r2, [pc, #224]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a1 	beq.w	8004734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f2:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d05c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d141      	bne.n	800468a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b31      	ldr	r3, [pc, #196]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fc fc5a 	bl	8000ec4 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fc fc56 	bl	8000ec4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e087      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	491b      	ldr	r1, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fc fc2f 	bl	8000ec4 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466a:	f7fc fc2b 	bl	8000ec4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e05c      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x416>
 8004688:	e054      	b.n	8004734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_RCC_OscConfig+0x478>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fc fc18 	bl	8000ec4 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004698:	f7fc fc14 	bl	8000ec4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e045      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_OscConfig+0x470>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x444>
 80046b6:	e03d      	b.n	8004734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e038      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <HAL_RCC_OscConfig+0x4ec>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d028      	beq.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d121      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11a      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004708:	4293      	cmp	r3, r2
 800470a:	d111      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	3b01      	subs	r3, #1
 800471a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0cc      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b68      	ldr	r3, [pc, #416]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d90c      	bls.n	8004780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b65      	ldr	r3, [pc, #404]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b63      	ldr	r3, [pc, #396]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0b8      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004798:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4a58      	ldr	r2, [pc, #352]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b0:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a52      	ldr	r2, [pc, #328]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047bc:	4b50      	ldr	r3, [pc, #320]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	494d      	ldr	r1, [pc, #308]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d044      	beq.n	8004864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b47      	ldr	r3, [pc, #284]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d119      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	4b3f      	ldr	r3, [pc, #252]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004812:	4b3b      	ldr	r3, [pc, #236]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e067      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004822:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4934      	ldr	r1, [pc, #208]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004834:	f7fc fb46 	bl	8000ec4 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483a:	e00a      	b.n	8004852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483c:	f7fc fb42 	bl	8000ec4 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e04f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 020c 	and.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	429a      	cmp	r2, r3
 8004862:	d1eb      	bne.n	800483c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004864:	4b25      	ldr	r3, [pc, #148]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d20c      	bcs.n	800488c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e032      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4916      	ldr	r1, [pc, #88]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b6:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490e      	ldr	r1, [pc, #56]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ca:	f000 f821 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490a      	ldr	r1, [pc, #40]	@ (8004904 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCC_ClockConfig+0x1c8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc f9cc 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023c00 	.word	0x40023c00
 8004900:	40023800 	.word	0x40023800
 8004904:	0800b2d8 	.word	0x0800b2d8
 8004908:	20000000 	.word	0x20000000
 800490c:	20000004 	.word	0x20000004

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b094      	sub	sp, #80	@ 0x50
 8004916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004928:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d00d      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x40>
 8004934:	2b08      	cmp	r3, #8
 8004936:	f200 80e1 	bhi.w	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x34>
 800493e:	2b04      	cmp	r3, #4
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x3a>
 8004942:	e0db      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004948:	e0db      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494a:	4b73      	ldr	r3, [pc, #460]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800494c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494e:	e0d8      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004950:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	2200      	movs	r2, #0
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
 800497e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	0159      	lsls	r1, r3, #5
 8004990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004994:	0150      	lsls	r0, r2, #5
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4621      	mov	r1, r4
 800499c:	1a51      	subs	r1, r2, r1
 800499e:	6139      	str	r1, [r7, #16]
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b4:	4659      	mov	r1, fp
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049be:	4651      	mov	r1, sl
 80049c0:	018a      	lsls	r2, r1, #6
 80049c2:	4651      	mov	r1, sl
 80049c4:	ebb2 0801 	subs.w	r8, r2, r1
 80049c8:	4659      	mov	r1, fp
 80049ca:	eb63 0901 	sbc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	462b      	mov	r3, r5
 80049f0:	eb49 0303 	adc.w	r3, r9, r3
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a02:	4629      	mov	r1, r5
 8004a04:	024b      	lsls	r3, r1, #9
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	024a      	lsls	r2, r1, #9
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a16:	2200      	movs	r2, #0
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a20:	f7fb fbde 	bl	80001e0 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	e058      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	2200      	movs	r2, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	0159      	lsls	r1, r3, #5
 8004a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5a:	0150      	lsls	r0, r2, #5
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4641      	mov	r1, r8
 8004a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a80:	ebb2 040a 	subs.w	r4, r2, sl
 8004a84:	eb63 050b 	sbc.w	r5, r3, fp
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	00eb      	lsls	r3, r5, #3
 8004a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a96:	00e2      	lsls	r2, r4, #3
 8004a98:	4614      	mov	r4, r2
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	18e3      	adds	r3, r4, r3
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	eb45 0303 	adc.w	r3, r5, r3
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	028b      	lsls	r3, r1, #10
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	028a      	lsls	r2, r1, #10
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	f7fb fb84 	bl	80001e0 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3750      	adds	r7, #80	@ 0x50
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	007a1200 	.word	0x007a1200

08004b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000000 	.word	0x20000000

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff0 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a9b      	lsrs	r3, r3, #10
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	0800b2e8 	.word	0x0800b2e8

08004b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	220f      	movs	r2, #15
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b6c:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0203 	and.w	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b78:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b84:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	08db      	lsrs	r3, r3, #3
 8004b96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <HAL_RCC_GetClockConfig+0x60>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0207 	and.w	r2, r3, #7
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40023c00 	.word	0x40023c00

08004bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d038      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be8:	4b68      	ldr	r3, [pc, #416]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7fc f969 	bl	8000ec4 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bf6:	f7fc f965 	bl	8000ec4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0bd      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c08:	4b61      	ldr	r3, [pc, #388]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	495a      	ldr	r1, [pc, #360]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2e:	4b57      	ldr	r3, [pc, #348]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fc f946 	bl	8000ec4 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3c:	f7fc f942 	bl	8000ec4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e09a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4e:	4b50      	ldr	r3, [pc, #320]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8083 	beq.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	4b48      	ldr	r3, [pc, #288]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	4a47      	ldr	r2, [pc, #284]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c78:	4b45      	ldr	r3, [pc, #276]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c84:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a42      	ldr	r2, [pc, #264]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fc f918 	bl	8000ec4 <HAL_GetTick>
 8004c94:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fc f914 	bl	8000ec4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e06c      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004caa:	4b3a      	ldr	r3, [pc, #232]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb6:	4b36      	ldr	r3, [pc, #216]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d02f      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d028      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cdc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cde:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cea:	4a29      	ldr	r2, [pc, #164]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf0:	4b27      	ldr	r3, [pc, #156]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d114      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc f8e2 	bl	8000ec4 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	e00a      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fc f8de 	bl	8000ec4 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e034      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0ee      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004d34:	4b16      	ldr	r3, [pc, #88]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	4911      	ldr	r1, [pc, #68]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
 8004d4e:	e005      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004d50:	4b0f      	ldr	r3, [pc, #60]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a0e      	ldr	r2, [pc, #56]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	4909      	ldr	r1, [pc, #36]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7d1a      	ldrb	r2, [r3, #20]
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d80:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	42470068 	.word	0x42470068
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40007000 	.word	0x40007000
 8004d98:	42470e40 	.word	0x42470e40
 8004d9c:	424711e0 	.word	0x424711e0

08004da0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d141      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dbe:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dd4:	d131      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dd6:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dd8:	617b      	str	r3, [r7, #20]
          break;
 8004dda:	e031      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de8:	d109      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004dea:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df4:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004dfe:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e2a:	0f1b      	lsrs	r3, r3, #28
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
          break;
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
          break;
 8004e3e:	bf00      	nop
        }
      }
      break;
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004e42:	bf00      	nop
    }
  }
  return frequency;
 8004e44:	697b      	ldr	r3, [r7, #20]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00bb8000 	.word	0x00bb8000
 8004e5c:	007a1200 	.word	0x007a1200
 8004e60:	00f42400 	.word	0x00f42400

08004e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07b      	b.n	8004f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d108      	bne.n	8004e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e86:	d009      	beq.n	8004e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	61da      	str	r2, [r3, #28]
 8004e8e:	e005      	b.n	8004e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb fe9e 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	ea42 0103 	orr.w	r1, r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0104 	and.w	r1, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	f003 0210 	and.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e041      	b.n	800500c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f839 	bl	8005014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 f9b1 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d001      	beq.n	8005040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e044      	b.n	80050ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d018      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x6c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d013      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x6c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1a      	ldr	r2, [pc, #104]	@ (80050dc <HAL_TIM_Base_Start_IT+0xb4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00e      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a17      	ldr	r2, [pc, #92]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d111      	bne.n	80050b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d010      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0201 	orr.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	e007      	b.n	80050c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40000c00 	.word	0x40000c00
 80050e8:	40014000 	.word	0x40014000

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0202 	mvn.w	r2, #2
 8005120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8d2 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8c4 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8d5 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01b      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8ac 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f89e 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8af 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f886 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f878 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f889 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f860 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f852 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f863 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fb7a 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8e6 	bl	8005448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f834 	bl	8005308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0220 	mvn.w	r2, #32
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8b8 	bl	8005434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3a      	ldr	r2, [pc, #232]	@ (8005418 <TIM_Base_SetConfig+0xfc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0x38>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x38>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a37      	ldr	r2, [pc, #220]	@ (800541c <TIM_Base_SetConfig+0x100>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x38>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a36      	ldr	r2, [pc, #216]	@ (8005420 <TIM_Base_SetConfig+0x104>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x38>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a35      	ldr	r2, [pc, #212]	@ (8005424 <TIM_Base_SetConfig+0x108>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2b      	ldr	r2, [pc, #172]	@ (8005418 <TIM_Base_SetConfig+0xfc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01b      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d017      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a28      	ldr	r2, [pc, #160]	@ (800541c <TIM_Base_SetConfig+0x100>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a27      	ldr	r2, [pc, #156]	@ (8005420 <TIM_Base_SetConfig+0x104>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00f      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a26      	ldr	r2, [pc, #152]	@ (8005424 <TIM_Base_SetConfig+0x108>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00b      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a25      	ldr	r2, [pc, #148]	@ (8005428 <TIM_Base_SetConfig+0x10c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a24      	ldr	r2, [pc, #144]	@ (800542c <TIM_Base_SetConfig+0x110>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_Base_SetConfig+0x8a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a23      	ldr	r2, [pc, #140]	@ (8005430 <TIM_Base_SetConfig+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0e      	ldr	r2, [pc, #56]	@ (8005418 <TIM_Base_SetConfig+0xfc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]
  }
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800

08005434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800545c:	b084      	sub	sp, #16
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	f107 001c 	add.w	r0, r7, #28
 800546a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800546e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005472:	2b01      	cmp	r3, #1
 8005474:	d123      	bne.n	80054be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800548a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800549e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d105      	bne.n	80054b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9dc 	bl	8005870 <USB_CoreReset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e01b      	b.n	80054f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9d0 	bl	8005870 <USB_CoreReset>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80054e8:	e005      	b.n	80054f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054f6:	7fbb      	ldrb	r3, [r7, #30]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10b      	bne.n	8005514 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f043 0206 	orr.w	r2, r3, #6
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005520:	b004      	add	sp, #16
 8005522:	4770      	bx	lr

08005524 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d115      	bne.n	80055b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005596:	200a      	movs	r0, #10
 8005598:	f7fb fca0 	bl	8000edc <HAL_Delay>
      ms += 10U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	330a      	adds	r3, #10
 80055a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f956 	bl	8005854 <USB_GetMode>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d01e      	beq.n	80055ec <USB_SetCurrentMode+0x84>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80055b2:	d9f0      	bls.n	8005596 <USB_SetCurrentMode+0x2e>
 80055b4:	e01a      	b.n	80055ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d115      	bne.n	80055e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055c8:	200a      	movs	r0, #10
 80055ca:	f7fb fc87 	bl	8000edc <HAL_Delay>
      ms += 10U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	330a      	adds	r3, #10
 80055d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f93d 	bl	8005854 <USB_GetMode>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <USB_SetCurrentMode+0x84>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80055e4:	d9f0      	bls.n	80055c8 <USB_SetCurrentMode+0x60>
 80055e6:	e001      	b.n	80055ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e005      	b.n	80055f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80055f0:	d101      	bne.n	80055f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800561a:	d901      	bls.n	8005620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e01b      	b.n	8005658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	daf2      	bge.n	800560e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	019b      	lsls	r3, r3, #6
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005644:	d901      	bls.n	800564a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e006      	b.n	8005658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d0f0      	beq.n	8005638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567c:	d901      	bls.n	8005682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e018      	b.n	80056b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	daf2      	bge.n	8005670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2210      	movs	r2, #16
 8005692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a0:	d901      	bls.n	80056a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d0f0      	beq.n	8005694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	@ 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	71fb      	strb	r3, [r7, #7]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d123      	bne.n	800572e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056e6:	88bb      	ldrh	r3, [r7, #4]
 80056e8:	3303      	adds	r3, #3
 80056ea:	089b      	lsrs	r3, r3, #2
 80056ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e018      	b.n	8005726 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	031a      	lsls	r2, r3, #12
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005700:	461a      	mov	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3301      	adds	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	3301      	adds	r3, #1
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d3e2      	bcc.n	80056f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3724      	adds	r7, #36	@ 0x24
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800573c:	b480      	push	{r7}
 800573e:	b08b      	sub	sp, #44	@ 0x2c
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	b29b      	uxth	r3, r3
 8005758:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	e014      	b.n	8005792 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	601a      	str	r2, [r3, #0]
    pDest++;
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	3301      	adds	r3, #1
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	3301      	adds	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	3301      	adds	r3, #1
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3e6      	bcc.n	8005768 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800579a:	8bfb      	ldrh	r3, [r7, #30]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01e      	beq.n	80057de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057aa:	461a      	mov	r2, r3
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	701a      	strb	r2, [r3, #0]
      i++;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	3301      	adds	r3, #1
 80057ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	3301      	adds	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80057d2:	8bfb      	ldrh	r3, [r7, #30]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057d8:	8bfb      	ldrh	r3, [r7, #30]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ea      	bne.n	80057b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	372c      	adds	r7, #44	@ 0x2c
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4013      	ands	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005804:	68fb      	ldr	r3, [r7, #12]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005846:	68bb      	ldr	r3, [r7, #8]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0301 	and.w	r3, r3, #1
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005888:	d901      	bls.n	800588e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e01b      	b.n	80058c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	daf2      	bge.n	800587c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f043 0201 	orr.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b2:	d901      	bls.n	80058b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d0f0      	beq.n	80058a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d4:	b084      	sub	sp, #16
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800592a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10a      	bne.n	8005948 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005940:	f043 0304 	orr.w	r3, r3, #4
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e014      	b.n	8005972 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005956:	f023 0304 	bic.w	r3, r3, #4
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e009      	b.n	8005972 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005972:	2110      	movs	r1, #16
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fe43 	bl	8005600 <USB_FlushTxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fe6d 	bl	8005664 <USB_FlushRxFifo>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	e015      	b.n	80059c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a6:	461a      	mov	r2, r3
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3301      	adds	r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059ca:	461a      	mov	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d3e3      	bcc.n	800599a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2280      	movs	r2, #128	@ 0x80
 80059e4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a24 <USB_HostInit+0x150>)
 80059ea:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005a28 <USB_HostInit+0x154>)
 80059f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f043 0210 	orr.w	r2, r3, #16
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <USB_HostInit+0x158>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a20:	b004      	add	sp, #16
 8005a22:	4770      	bx	lr
 8005a24:	00600080 	.word	0x00600080
 8005a28:	004000e0 	.word	0x004000e0
 8005a2c:	a3200008 	.word	0xa3200008

08005a30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d107      	bne.n	8005a82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a7e:	6053      	str	r3, [r2, #4]
 8005a80:	e00c      	b.n	8005a9c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d107      	bne.n	8005a98 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005a94:	6053      	str	r3, [r2, #4]
 8005a96:	e001      	b.n	8005a9c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005aca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ada:	2064      	movs	r0, #100	@ 0x64
 8005adc:	f7fb f9fe 	bl	8000edc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005aee:	200a      	movs	r0, #10
 8005af0:	f7fb f9f4 	bl	8000edc <HAL_Delay>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	460b      	mov	r3, r1
 8005b08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <USB_DriveVbus+0x44>
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d106      	bne.n	8005b42 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b40:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4c:	d109      	bne.n	8005b62 <USB_DriveVbus+0x64>
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b60:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	0c5b      	lsrs	r3, r3, #17
 8005b8e:	f003 0303 	and.w	r3, r3, #3
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	b29b      	uxth	r3, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	70fb      	strb	r3, [r7, #3]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70bb      	strb	r3, [r7, #2]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d867      	bhi.n	8005cce <USB_HC_Init+0x10e>
 8005bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <USB_HC_Init+0x44>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c91 	.word	0x08005c91
 8005c0c:	08005c15 	.word	0x08005c15
 8005c10:	08005c53 	.word	0x08005c53
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da51      	bge.n	8005cd4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005c50:	e040      	b.n	8005cd4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005c64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da34      	bge.n	8005cd8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c8c:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c8e:	e023      	b.n	8005cd8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f240 2325 	movw	r3, #549	@ 0x225
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da17      	bge.n	8005cdc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005cca:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ccc:	e006      	b.n	8005cdc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	77fb      	strb	r3, [r7, #31]
      break;
 8005cd2:	e004      	b.n	8005cde <USB_HC_Init+0x11e>
      break;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <USB_HC_Init+0x11e>
      break;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <USB_HC_Init+0x11e>
      break;
 8005cdc:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cea:	461a      	mov	r2, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d0a:	f043 0302 	orr.w	r3, r3, #2
 8005d0e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f303 	lsl.w	r3, r1, r3
 8005d24:	6939      	ldr	r1, [r7, #16]
 8005d26:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da03      	bge.n	8005d4a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e001      	b.n	8005d4e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff ff0e 	bl	8005b70 <USB_GetHostSpeed>
 8005d54:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d106      	bne.n	8005d6c <USB_HC_Init+0x1ac>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d003      	beq.n	8005d6c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	e001      	b.n	8005d70 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d70:	787b      	ldrb	r3, [r7, #1]
 8005d72:	059b      	lsls	r3, r3, #22
 8005d74:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d78:	78bb      	ldrb	r3, [r7, #2]
 8005d7a:	02db      	lsls	r3, r3, #11
 8005d7c:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d80:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d86:	049b      	lsls	r3, r3, #18
 8005d88:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005d8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d94:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dae:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005db0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d003      	beq.n	8005dc0 <USB_HC_Init+0x200>
 8005db8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10f      	bne.n	8005de0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dde:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop

08005dec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08c      	sub	sp, #48	@ 0x30
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e08:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	799b      	ldrb	r3, [r3, #6]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d158      	bne.n	8005ec4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005e12:	2301      	movs	r3, #1
 8005e14:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	8a92      	ldrh	r2, [r2, #20]
 8005e24:	fb03 f202 	mul.w	r2, r3, r2
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61da      	str	r2, [r3, #28]
 8005e2c:	e079      	b.n	8005f22 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	7c9b      	ldrb	r3, [r3, #18]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d130      	bne.n	8005e98 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2bbc      	cmp	r3, #188	@ 0xbc
 8005e3c:	d918      	bls.n	8005e70 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	8a9b      	ldrh	r3, [r3, #20]
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d003      	beq.n	8005e60 <USB_HC_StartXfer+0x74>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d103      	bne.n	8005e68 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2202      	movs	r2, #2
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e05c      	b.n	8005f22 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	60da      	str	r2, [r3, #12]
 8005e6e:	e058      	b.n	8005f22 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d007      	beq.n	8005e90 <USB_HC_StartXfer+0xa4>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d003      	beq.n	8005e90 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e048      	b.n	8005f22 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2203      	movs	r2, #3
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	e044      	b.n	8005f22 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10d      	bne.n	8005eba <USB_HC_StartXfer+0xce>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	8a92      	ldrh	r2, [r2, #20]
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d907      	bls.n	8005eba <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	8a92      	ldrh	r2, [r2, #20]
 8005eb0:	fb03 f202 	mul.w	r2, r3, r2
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	61da      	str	r2, [r3, #28]
 8005eb8:	e033      	b.n	8005f22 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	e02e      	b.n	8005f22 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d018      	beq.n	8005efe <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	8a92      	ldrh	r2, [r2, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	8a92      	ldrh	r2, [r2, #20]
 8005edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005ee2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005ee4:	8b7b      	ldrh	r3, [r7, #26]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90b      	bls.n	8005f02 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005eea:	8b7b      	ldrh	r3, [r7, #26]
 8005eec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	8a92      	ldrh	r2, [r2, #20]
 8005ef4:	fb03 f202 	mul.w	r2, r3, r2
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	61da      	str	r2, [r3, #28]
 8005efc:	e001      	b.n	8005f02 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005efe:	2301      	movs	r3, #1
 8005f00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	8a92      	ldrh	r2, [r2, #20]
 8005f10:	fb03 f202 	mul.w	r2, r3, r2
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61da      	str	r2, [r3, #28]
 8005f18:	e003      	b.n	8005f22 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f2c:	04d9      	lsls	r1, r3, #19
 8005f2e:	4ba4      	ldr	r3, [pc, #656]	@ (80061c0 <USB_HC_StartXfer+0x3d4>)
 8005f30:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f32:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	7d9b      	ldrb	r3, [r3, #22]
 8005f38:	075b      	lsls	r3, r3, #29
 8005f3a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f3e:	69f9      	ldr	r1, [r7, #28]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	6a39      	ldr	r1, [r7, #32]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f4a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6999      	ldr	r1, [r3, #24]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f64:	460a      	mov	r2, r1
 8005f66:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f9e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	7e7b      	ldrb	r3, [r7, #25]
 8005fb0:	075b      	lsls	r3, r3, #29
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	0148      	lsls	r0, r1, #5
 8005fb6:	6a39      	ldr	r1, [r7, #32]
 8005fb8:	4401      	add	r1, r0
 8005fba:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	799b      	ldrb	r3, [r3, #6]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	f040 80c4 	bne.w	8006154 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	7c5b      	ldrb	r3, [r3, #17]
 8005fd0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fe8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006004:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006008:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	79db      	ldrb	r3, [r3, #7]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d123      	bne.n	800605a <USB_HC_StartXfer+0x26e>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	78db      	ldrb	r3, [r3, #3]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11f      	bne.n	800605a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	440a      	add	r2, r1
 8006030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006038:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	6a3a      	ldr	r2, [r7, #32]
 800604e:	440a      	add	r2, r1
 8006050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006058:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	7c9b      	ldrb	r3, [r3, #18]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d003      	beq.n	800606a <USB_HC_StartXfer+0x27e>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7c9b      	ldrb	r3, [r3, #18]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d117      	bne.n	800609a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800606e:	2b01      	cmp	r3, #1
 8006070:	d113      	bne.n	800609a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	78db      	ldrb	r3, [r3, #3]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10f      	bne.n	800609a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	6a3a      	ldr	r2, [r7, #32]
 800608e:	440a      	add	r2, r1
 8006090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	7c9b      	ldrb	r3, [r3, #18]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d163      	bne.n	800616a <USB_HC_StartXfer+0x37e>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	78db      	ldrb	r3, [r3, #3]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d15f      	bne.n	800616a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d859      	bhi.n	8006168 <USB_HC_StartXfer+0x37c>
 80060b4:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <USB_HC_StartXfer+0x2d0>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	08006111 	.word	0x08006111
 80060c8:	08006133 	.word	0x08006133
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ea:	6053      	str	r3, [r2, #4]
          break;
 80060ec:	e03d      	b.n	800616a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006108:	f043 030e 	orr.w	r3, r3, #14
 800610c:	6053      	str	r3, [r2, #4]
          break;
 800610e:	e02c      	b.n	800616a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	440a      	add	r2, r1
 8006126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800612a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800612e:	6053      	str	r3, [r2, #4]
          break;
 8006130:	e01b      	b.n	800616a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	440a      	add	r2, r1
 8006148:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800614c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006150:	6053      	str	r3, [r2, #4]
          break;
 8006152:	e00a      	b.n	800616a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	6053      	str	r3, [r2, #4]
 8006166:	e000      	b.n	800616a <USB_HC_StartXfer+0x37e>
          break;
 8006168:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006180:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e003      	b.n	800619c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800619a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061a2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e055      	b.n	800626c <USB_HC_StartXfer+0x480>
 80061c0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	78db      	ldrb	r3, [r3, #3]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d14e      	bne.n	800626a <USB_HC_StartXfer+0x47e>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d04a      	beq.n	800626a <USB_HC_StartXfer+0x47e>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	79db      	ldrb	r3, [r3, #7]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d146      	bne.n	800626a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	7c9b      	ldrb	r3, [r3, #18]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d831      	bhi.n	8006248 <USB_HC_StartXfer+0x45c>
 80061e4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <USB_HC_StartXfer+0x400>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006221 	.word	0x08006221
 80061f4:	080061fd 	.word	0x080061fd
 80061f8:	08006221 	.word	0x08006221
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	3303      	adds	r3, #3
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006206:	8afa      	ldrh	r2, [r7, #22]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620c:	b29b      	uxth	r3, r3
 800620e:	429a      	cmp	r2, r3
 8006210:	d91c      	bls.n	800624c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f043 0220 	orr.w	r2, r3, #32
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	619a      	str	r2, [r3, #24]
        }
        break;
 800621e:	e015      	b.n	800624c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	3303      	adds	r3, #3
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800622a:	8afa      	ldrh	r2, [r7, #22]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	b29b      	uxth	r3, r3
 8006236:	429a      	cmp	r2, r3
 8006238:	d90a      	bls.n	8006250 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]
        }
        break;
 8006246:	e003      	b.n	8006250 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <USB_HC_StartXfer+0x466>
        break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <USB_HC_StartXfer+0x466>
        break;
 8006250:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785a      	ldrb	r2, [r3, #1]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	b29b      	uxth	r3, r3
 8006260:	2000      	movs	r0, #0
 8006262:	9000      	str	r0, [sp, #0]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff fa2b 	bl	80056c0 <USB_WritePacket>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3728      	adds	r7, #40	@ 0x28
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	b29b      	uxth	r3, r3
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006296:	b480      	push	{r7}
 8006298:	b089      	sub	sp, #36	@ 0x24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	0c9b      	lsrs	r3, r3, #18
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0fdb      	lsrs	r3, r3, #31
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	0fdb      	lsrs	r3, r3, #31
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d10d      	bne.n	8006318 <USB_HC_Halt+0x82>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <USB_HC_Halt+0x82>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d002      	beq.n	8006314 <USB_HC_Halt+0x7e>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d101      	bne.n	8006318 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e0d8      	b.n	80064ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USB_HC_Halt+0x8e>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d173      	bne.n	800640c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006342:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d14a      	bne.n	80063e6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d133      	bne.n	80063c4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800637a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800639a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3301      	adds	r3, #1
 80063a0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063a8:	d82e      	bhi.n	8006408 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063c0:	d0ec      	beq.n	800639c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c2:	e081      	b.n	80064c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063e2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e4:	e070      	b.n	80064c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006404:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006406:	e05f      	b.n	80064c8 <USB_HC_Halt+0x232>
            break;
 8006408:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800640a:	e05d      	b.n	80064c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006426:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800642a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d133      	bne.n	80064a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006456:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006476:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800647a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	3301      	adds	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006488:	d81d      	bhi.n	80064c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a0:	d0ec      	beq.n	800647c <USB_HC_Halt+0x1e6>
 80064a2:	e011      	b.n	80064c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e000      	b.n	80064c8 <USB_HC_Halt+0x232>
          break;
 80064c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3724      	adds	r7, #36	@ 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff f82b 	bl	8005546 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064f0:	2110      	movs	r1, #16
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f884 	bl	8005600 <USB_FlushTxFifo>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff f8ae 	bl	8005664 <USB_FlushRxFifo>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e01f      	b.n	8006558 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800652e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006536:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800653e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654c:	461a      	mov	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	3301      	adds	r3, #1
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b0f      	cmp	r3, #15
 800655c:	d9dc      	bls.n	8006518 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	e034      	b.n	80065ce <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800657a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006582:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800658a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006598:	461a      	mov	r2, r3
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065aa:	d80c      	bhi.n	80065c6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c2:	d0ec      	beq.n	800659e <USB_StopHost+0xc8>
 80065c4:	e000      	b.n	80065c8 <USB_StopHost+0xf2>
        break;
 80065c6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b0f      	cmp	r3, #15
 80065d2:	d9c7      	bls.n	8006564 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f04f 32ff 	mov.w	r2, #4294967295
 80065e8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fe ff9a 	bl	8005524 <USB_EnableGlobalInt>

  return ret;
 80065f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 0208 	add.w	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f103 0208 	add.w	r2, r3, #8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 0208 	add.w	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d103      	bne.n	8006674 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e00c      	b.n	800668e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3308      	adds	r3, #8
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e002      	b.n	8006682 <vListInsert+0x2e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d2f6      	bcs.n	800667c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6892      	ldr	r2, [r2, #8]
 80066dc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6852      	ldr	r2, [r2, #4]
 80066e6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d103      	bne.n	80066fa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d05d      	beq.n	800680e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006756:	2b00      	cmp	r3, #0
 8006758:	d059      	beq.n	800680e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	2100      	movs	r1, #0
 8006764:	fba3 2302 	umull	r2, r3, r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d000      	beq.n	800676e <xQueueGenericReset+0x52>
 800676c:	2101      	movs	r1, #1
 800676e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006770:	2b00      	cmp	r3, #0
 8006772:	d14c      	bne.n	800680e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8006774:	f001 fdf2 	bl	800835c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006780:	6939      	ldr	r1, [r7, #16]
 8006782:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	441a      	add	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2200      	movs	r2, #0
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	3b01      	subs	r3, #1
 80067a6:	6939      	ldr	r1, [r7, #16]
 80067a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	441a      	add	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	22ff      	movs	r2, #255	@ 0xff
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	22ff      	movs	r2, #255	@ 0xff
 80067c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d114      	bne.n	80067f4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01a      	beq.n	8006808 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3310      	adds	r3, #16
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 ff50 	bl	800767c <xTaskRemoveFromEventList>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80067e2:	4b16      	ldr	r3, [pc, #88]	@ (800683c <xQueueGenericReset+0x120>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	e009      	b.n	8006808 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3310      	adds	r3, #16
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fefe 	bl	80065fa <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3324      	adds	r3, #36	@ 0x24
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fef9 	bl	80065fa <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006808:	f001 fdda 	bl	80083c0 <vPortExitCritical>
 800680c:	e001      	b.n	8006812 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <xQueueGenericReset+0x114>
        __asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60bb      	str	r3, [r7, #8]
    }
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	e7fd      	b.n	800682c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	@ 0x28
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d02e      	beq.n	80068b6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006858:	2100      	movs	r1, #0
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	fba3 2302 	umull	r2, r3, r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d000      	beq.n	8006868 <xQueueGenericCreate+0x28>
 8006866:	2101      	movs	r1, #1
 8006868:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800686a:	2b00      	cmp	r3, #0
 800686c:	d123      	bne.n	80068b6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006876:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800687a:	d81c      	bhi.n	80068b6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3350      	adds	r3, #80	@ 0x50
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fe4e 	bl	800852c <pvPortMalloc>
 8006890:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01d      	beq.n	80068d4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3350      	adds	r3, #80	@ 0x50
 80068a0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a2:	79fa      	ldrb	r2, [r7, #7]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f815 	bl	80068de <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80068b4:	e00e      	b.n	80068d4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xQueueGenericCreate+0x94>
        __asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	613b      	str	r3, [r7, #16]
    }
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80068d4:	69fb      	ldr	r3, [r7, #28]
    }
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e002      	b.n	8006900 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800690c:	2101      	movs	r1, #1
 800690e:	69b8      	ldr	r0, [r7, #24]
 8006910:	f7ff ff04 	bl	800671c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	@ 0x30
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <xQueueReceive+0x32>
        __asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	623b      	str	r3, [r7, #32]
    }
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <xQueueReceive+0x40>
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xQueueReceive+0x44>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xQueueReceive+0x46>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xQueueReceive+0x62>
        __asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
    }
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006986:	f001 f88d 	bl	8007aa4 <xTaskGetSchedulerState>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <xQueueReceive+0x72>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <xQueueReceive+0x76>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <xQueueReceive+0x78>
 800699a:	2300      	movs	r3, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xQueueReceive+0x94>
        __asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61bb      	str	r3, [r7, #24]
    }
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80069b8:	f001 fcd0 	bl	800835c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01f      	beq.n	8006a08 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069cc:	f000 f88c 	bl	8006ae8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00f      	beq.n	8006a00 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fe49 	bl	800767c <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d007      	beq.n	8006a00 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ae4 <xQueueReceive+0x1c0>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006a00:	f001 fcde 	bl	80083c0 <vPortExitCritical>
                return pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e069      	b.n	8006adc <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006a0e:	f001 fcd7 	bl	80083c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e062      	b.n	8006adc <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 ff03 	bl	800782c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006a2a:	f001 fcc9 	bl	80083c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006a2e:	f000 fb2b 	bl	8007088 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006a32:	f001 fc93 	bl	800835c <vPortEnterCritical>
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a3c:	b25b      	sxtb	r3, r3
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d103      	bne.n	8006a4c <xQueueReceive+0x128>
 8006a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d103      	bne.n	8006a62 <xQueueReceive+0x13e>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a62:	f001 fcad 	bl	80083c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a66:	1d3a      	adds	r2, r7, #4
 8006a68:	f107 0310 	add.w	r3, r7, #16
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fef2 	bl	8007858 <xTaskCheckForTimeOut>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d123      	bne.n	8006ac2 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a7c:	f000 f8ac 	bl	8006bd8 <prvIsQueueEmpty>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	3324      	adds	r3, #36	@ 0x24
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fd88 	bl	80075a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a96:	f000 f84d 	bl	8006b34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a9a:	f000 fb03 	bl	80070a4 <xTaskResumeAll>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d189      	bne.n	80069b8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8006aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae4 <xQueueReceive+0x1c0>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	e780      	b.n	80069b8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ab8:	f000 f83c 	bl	8006b34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006abc:	f000 faf2 	bl	80070a4 <xTaskResumeAll>
 8006ac0:	e77a      	b.n	80069b8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac4:	f000 f836 	bl	8006b34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006ac8:	f000 faec 	bl	80070a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ace:	f000 f883 	bl	8006bd8 <prvIsQueueEmpty>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f43f af6f 	beq.w	80069b8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006ada:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3730      	adds	r7, #48	@ 0x30
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b02:	441a      	add	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d303      	bcc.n	8006b1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68d9      	ldr	r1, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	461a      	mov	r2, r3
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	f004 fb56 	bl	800b1d8 <memcpy>
    }
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006b3c:	f001 fc0e 	bl	800835c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b48:	e011      	b.n	8006b6e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d012      	beq.n	8006b78 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	@ 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fd90 	bl	800767c <xTaskRemoveFromEventList>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006b62:	f000 fee1 	bl	8007928 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dce9      	bgt.n	8006b4a <prvUnlockQueue+0x16>
 8006b76:	e000      	b.n	8006b7a <prvUnlockQueue+0x46>
                    break;
 8006b78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	22ff      	movs	r2, #255	@ 0xff
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006b82:	f001 fc1d 	bl	80083c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006b86:	f001 fbe9 	bl	800835c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b92:	e011      	b.n	8006bb8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d012      	beq.n	8006bc2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fd6b 	bl	800767c <xTaskRemoveFromEventList>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006bac:	f000 febc 	bl	8007928 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dce9      	bgt.n	8006b94 <prvUnlockQueue+0x60>
 8006bc0:	e000      	b.n	8006bc4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006bc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	22ff      	movs	r2, #255	@ 0xff
 8006bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006bcc:	f001 fbf8 	bl	80083c0 <vPortExitCritical>
}
 8006bd0:	bf00      	nop
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006be0:	f001 fbbc 	bl	800835c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e001      	b.n	8006bf6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006bf6:	f001 fbe3 	bl	80083c0 <vPortExitCritical>

    return xReturn;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60fb      	str	r3, [r7, #12]
    }
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	e7fd      	b.n	8006c2c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d024      	beq.n	8006c80 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e01e      	b.n	8006c7a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006c3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ca0 <vQueueAddToRegistry+0x9c>)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d105      	bne.n	8006c58 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4a13      	ldr	r2, [pc, #76]	@ (8006ca0 <vQueueAddToRegistry+0x9c>)
 8006c52:	4413      	add	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
                    break;
 8006c56:	e013      	b.n	8006c80 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <vQueueAddToRegistry+0x70>
 8006c5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <vQueueAddToRegistry+0x9c>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca0 <vQueueAddToRegistry+0x9c>)
 8006c70:	4413      	add	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	3301      	adds	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b07      	cmp	r3, #7
 8006c7e:	d9dd      	bls.n	8006c3c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000228 	.word	0x20000228

08006ca4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006cb4:	f001 fb52 	bl	800835c <vPortEnterCritical>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d103      	bne.n	8006cce <vQueueWaitForMessageRestricted+0x2a>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d103      	bne.n	8006ce4 <vQueueWaitForMessageRestricted+0x40>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ce4:	f001 fb6c 	bl	80083c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	3324      	adds	r3, #36	@ 0x24
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fc79 	bl	80075f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f7ff ff18 	bl	8006b34 <prvUnlockQueue>
    }
 8006d04:	bf00      	nop
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08c      	sub	sp, #48	@ 0x30
 8006d10:	af04      	add	r7, sp, #16
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fc03 	bl	800852c <pvPortMalloc>
 8006d26:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d2e:	2058      	movs	r0, #88	@ 0x58
 8006d30:	f001 fbfc 	bl	800852c <pvPortMalloc>
 8006d34:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006d3c:	2258      	movs	r2, #88	@ 0x58
 8006d3e:	2100      	movs	r1, #0
 8006d40:	69f8      	ldr	r0, [r7, #28]
 8006d42:	f004 fa0b 	bl	800b15c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d4c:	e005      	b.n	8006d5a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f001 fca8 	bl	80086a4 <vPortFree>
 8006d54:	e001      	b.n	8006d5a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d013      	beq.n	8006d88 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	2300      	movs	r3, #0
 8006d64:	9303      	str	r3, [sp, #12]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f80e 	bl	8006d98 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006d7c:	69f8      	ldr	r0, [r7, #28]
 8006d7e:	f000 f89b 	bl	8006eb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e002      	b.n	8006d8e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d88:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
    }
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	461a      	mov	r2, r3
 8006db0:	21a5      	movs	r1, #165	@ 0xa5
 8006db2:	f004 f9d3 	bl	800b15c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	617b      	str	r3, [r7, #20]
    }
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01e      	beq.n	8006e36 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e012      	b.n	8006e24 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4413      	add	r3, r2
 8006e04:	7819      	ldrb	r1, [r3, #0]
 8006e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3334      	adds	r3, #52	@ 0x34
 8006e0e:	460a      	mov	r2, r1
 8006e10:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d006      	beq.n	8006e2c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d9e9      	bls.n	8006dfe <prvInitialiseNewTask+0x66>
 8006e2a:	e000      	b.n	8006e2e <prvInitialiseNewTask+0x96>
            {
                break;
 8006e2c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d90b      	bls.n	8006e54 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
    }
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d901      	bls.n	8006e5e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e62:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e68:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fbe3 	bl	800663a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	3318      	adds	r3, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff fbde 	bl	800663a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e82:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	f1c3 0205 	rsb	r2, r3, #5
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e92:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	69b8      	ldr	r0, [r7, #24]
 8006e9a:	f001 f92d 	bl	80080f8 <pxPortInitialiseStack>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006eb0:	bf00      	nop
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006ec0:	f001 fa4c 	bl	800835c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006ec4:	4b40      	ldr	r3, [pc, #256]	@ (8006fc8 <prvAddNewTaskToReadyList+0x110>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4a3f      	ldr	r2, [pc, #252]	@ (8006fc8 <prvAddNewTaskToReadyList+0x110>)
 8006ecc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006ece:	4b3f      	ldr	r3, [pc, #252]	@ (8006fcc <prvAddNewTaskToReadyList+0x114>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006ed6:	4a3d      	ldr	r2, [pc, #244]	@ (8006fcc <prvAddNewTaskToReadyList+0x114>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006edc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc8 <prvAddNewTaskToReadyList+0x110>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d110      	bne.n	8006f06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006ee4:	f000 fd44 	bl	8007970 <prvInitialiseTaskLists>
 8006ee8:	e00d      	b.n	8006f06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <prvAddNewTaskToReadyList+0x118>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ef2:	4b36      	ldr	r3, [pc, #216]	@ (8006fcc <prvAddNewTaskToReadyList+0x114>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d802      	bhi.n	8006f06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006f00:	4a32      	ldr	r2, [pc, #200]	@ (8006fcc <prvAddNewTaskToReadyList+0x114>)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006f06:	4b33      	ldr	r3, [pc, #204]	@ (8006fd4 <prvAddNewTaskToReadyList+0x11c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	4a31      	ldr	r2, [pc, #196]	@ (8006fd4 <prvAddNewTaskToReadyList+0x11c>)
 8006f0e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f10:	4b30      	ldr	r3, [pc, #192]	@ (8006fd4 <prvAddNewTaskToReadyList+0x11c>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd8 <prvAddNewTaskToReadyList+0x120>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd8 <prvAddNewTaskToReadyList+0x120>)
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2e:	492b      	ldr	r1, [pc, #172]	@ (8006fdc <prvAddNewTaskToReadyList+0x124>)
 8006f30:	4613      	mov	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	609a      	str	r2, [r3, #8]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	3204      	adds	r2, #4
 8006f56:	605a      	str	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	609a      	str	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fdc <prvAddNewTaskToReadyList+0x124>)
 8006f6e:	441a      	add	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	615a      	str	r2, [r3, #20]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f78:	4918      	ldr	r1, [pc, #96]	@ (8006fdc <prvAddNewTaskToReadyList+0x124>)
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	4814      	ldr	r0, [pc, #80]	@ (8006fdc <prvAddNewTaskToReadyList+0x124>)
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4403      	add	r3, r0
 8006f94:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006f96:	f001 fa13 	bl	80083c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <prvAddNewTaskToReadyList+0x118>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00e      	beq.n	8006fc0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fcc <prvAddNewTaskToReadyList+0x114>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d207      	bcs.n	8006fc0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <prvAddNewTaskToReadyList+0x128>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000340 	.word	0x20000340
 8006fcc:	20000268 	.word	0x20000268
 8006fd0:	2000034c 	.word	0x2000034c
 8006fd4:	2000035c 	.word	0x2000035c
 8006fd8:	20000348 	.word	0x20000348
 8006fdc:	2000026c 	.word	0x2000026c
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006fea:	4b20      	ldr	r3, [pc, #128]	@ (800706c <vTaskStartScheduler+0x88>)
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2282      	movs	r2, #130	@ 0x82
 8006ff6:	491e      	ldr	r1, [pc, #120]	@ (8007070 <vTaskStartScheduler+0x8c>)
 8006ff8:	481e      	ldr	r0, [pc, #120]	@ (8007074 <vTaskStartScheduler+0x90>)
 8006ffa:	f7ff fe87 	bl	8006d0c <xTaskCreate>
 8006ffe:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d102      	bne.n	800700c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007006:	f000 fdeb 	bl	8007be0 <xTimerCreateTimerTask>
 800700a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d116      	bne.n	8007040 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60bb      	str	r3, [r7, #8]
    }
 8007024:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007026:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <vTaskStartScheduler+0x94>)
 8007028:	f04f 32ff 	mov.w	r2, #4294967295
 800702c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800702e:	4b13      	ldr	r3, [pc, #76]	@ (800707c <vTaskStartScheduler+0x98>)
 8007030:	2201      	movs	r2, #1
 8007032:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007034:	4b12      	ldr	r3, [pc, #72]	@ (8007080 <vTaskStartScheduler+0x9c>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800703a:	f001 f8eb 	bl	8008214 <xPortStartScheduler>
 800703e:	e00f      	b.n	8007060 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d10b      	bne.n	8007060 <vTaskStartScheduler+0x7c>
        __asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	607b      	str	r3, [r7, #4]
    }
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	e7fd      	b.n	800705c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007060:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <vTaskStartScheduler+0xa0>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000364 	.word	0x20000364
 8007070:	0800b2bc 	.word	0x0800b2bc
 8007074:	08007941 	.word	0x08007941
 8007078:	20000360 	.word	0x20000360
 800707c:	2000034c 	.word	0x2000034c
 8007080:	20000344 	.word	0x20000344
 8007084:	2000000c 	.word	0x2000000c

08007088 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800708c:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <vTaskSuspendAll+0x18>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a03      	ldr	r2, [pc, #12]	@ (80070a0 <vTaskSuspendAll+0x18>)
 8007094:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007096:	bf00      	nop
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000368 	.word	0x20000368

080070a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80070b2:	4b71      	ldr	r3, [pc, #452]	@ (8007278 <xTaskResumeAll+0x1d4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <xTaskResumeAll+0x2e>
        __asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	607b      	str	r3, [r7, #4]
    }
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	e7fd      	b.n	80070ce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80070d2:	f001 f943 	bl	800835c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80070d6:	4b68      	ldr	r3, [pc, #416]	@ (8007278 <xTaskResumeAll+0x1d4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3b01      	subs	r3, #1
 80070dc:	4a66      	ldr	r2, [pc, #408]	@ (8007278 <xTaskResumeAll+0x1d4>)
 80070de:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e0:	4b65      	ldr	r3, [pc, #404]	@ (8007278 <xTaskResumeAll+0x1d4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 80c0 	bne.w	800726a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ea:	4b64      	ldr	r3, [pc, #400]	@ (800727c <xTaskResumeAll+0x1d8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80bb 	beq.w	800726a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f4:	e08a      	b.n	800720c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f6:	4b62      	ldr	r3, [pc, #392]	@ (8007280 <xTaskResumeAll+0x1dc>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	6a12      	ldr	r2, [r2, #32]
 800710c:	609a      	str	r2, [r3, #8]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	69d2      	ldr	r2, [r2, #28]
 8007116:	605a      	str	r2, [r3, #4]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3318      	adds	r3, #24
 8007120:	429a      	cmp	r2, r3
 8007122:	d103      	bne.n	800712c <xTaskResumeAll+0x88>
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	6a1a      	ldr	r2, [r3, #32]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2200      	movs	r2, #0
 8007130:	629a      	str	r2, [r3, #40]	@ 0x28
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	1e5a      	subs	r2, r3, #1
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	68d2      	ldr	r2, [r2, #12]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	6892      	ldr	r2, [r2, #8]
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3304      	adds	r3, #4
 800715e:	429a      	cmp	r2, r3
 8007160:	d103      	bne.n	800716a <xTaskResumeAll+0xc6>
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2200      	movs	r2, #0
 800716e:	615a      	str	r2, [r3, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	1e5a      	subs	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	2201      	movs	r2, #1
 8007180:	409a      	lsls	r2, r3
 8007182:	4b40      	ldr	r3, [pc, #256]	@ (8007284 <xTaskResumeAll+0x1e0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4313      	orrs	r3, r2
 8007188:	4a3e      	ldr	r2, [pc, #248]	@ (8007284 <xTaskResumeAll+0x1e0>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007190:	493d      	ldr	r1, [pc, #244]	@ (8007288 <xTaskResumeAll+0x1e4>)
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3304      	adds	r3, #4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	609a      	str	r2, [r3, #8]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	60da      	str	r2, [r3, #12]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	3204      	adds	r2, #4
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	609a      	str	r2, [r3, #8]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007288 <xTaskResumeAll+0x1e4>)
 80071d0:	441a      	add	r2, r3
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	615a      	str	r2, [r3, #20]
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	492b      	ldr	r1, [pc, #172]	@ (8007288 <xTaskResumeAll+0x1e4>)
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	1c59      	adds	r1, r3, #1
 80071ea:	4827      	ldr	r0, [pc, #156]	@ (8007288 <xTaskResumeAll+0x1e4>)
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4403      	add	r3, r0
 80071f6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fc:	4b23      	ldr	r3, [pc, #140]	@ (800728c <xTaskResumeAll+0x1e8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	429a      	cmp	r2, r3
 8007204:	d302      	bcc.n	800720c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8007206:	4b22      	ldr	r3, [pc, #136]	@ (8007290 <xTaskResumeAll+0x1ec>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800720c:	4b1c      	ldr	r3, [pc, #112]	@ (8007280 <xTaskResumeAll+0x1dc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f47f af70 	bne.w	80070f6 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800721c:	f000 fc26 	bl	8007a6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007220:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <xTaskResumeAll+0x1f0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800722c:	f000 f846 	bl	80072bc <xTaskIncrementTick>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8007236:	4b16      	ldr	r3, [pc, #88]	@ (8007290 <xTaskResumeAll+0x1ec>)
 8007238:	2201      	movs	r2, #1
 800723a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3b01      	subs	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f1      	bne.n	800722c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8007248:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <xTaskResumeAll+0x1f0>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800724e:	4b10      	ldr	r3, [pc, #64]	@ (8007290 <xTaskResumeAll+0x1ec>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800725a:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <xTaskResumeAll+0x1f4>)
 800725c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800726a:	f001 f8a9 	bl	80083c0 <vPortExitCritical>

    return xAlreadyYielded;
 800726e:	69bb      	ldr	r3, [r7, #24]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000368 	.word	0x20000368
 800727c:	20000340 	.word	0x20000340
 8007280:	20000300 	.word	0x20000300
 8007284:	20000348 	.word	0x20000348
 8007288:	2000026c 	.word	0x2000026c
 800728c:	20000268 	.word	0x20000268
 8007290:	20000354 	.word	0x20000354
 8007294:	20000350 	.word	0x20000350
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80072a2:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <xTaskGetTickCount+0x1c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80072a8:	687b      	ldr	r3, [r7, #4]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000344 	.word	0x20000344

080072bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	@ 0x28
 80072c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c6:	4b7e      	ldr	r3, [pc, #504]	@ (80074c0 <xTaskIncrementTick+0x204>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 80ed 	bne.w	80074aa <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072d0:	4b7c      	ldr	r3, [pc, #496]	@ (80074c4 <xTaskIncrementTick+0x208>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80072d8:	4a7a      	ldr	r2, [pc, #488]	@ (80074c4 <xTaskIncrementTick+0x208>)
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d121      	bne.n	8007328 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80072e4:	4b78      	ldr	r3, [pc, #480]	@ (80074c8 <xTaskIncrementTick+0x20c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <xTaskIncrementTick+0x4a>
        __asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
    }
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xTaskIncrementTick+0x46>
 8007306:	4b70      	ldr	r3, [pc, #448]	@ (80074c8 <xTaskIncrementTick+0x20c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	4b6f      	ldr	r3, [pc, #444]	@ (80074cc <xTaskIncrementTick+0x210>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a6d      	ldr	r2, [pc, #436]	@ (80074c8 <xTaskIncrementTick+0x20c>)
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	4a6d      	ldr	r2, [pc, #436]	@ (80074cc <xTaskIncrementTick+0x210>)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	4b6d      	ldr	r3, [pc, #436]	@ (80074d0 <xTaskIncrementTick+0x214>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	4a6b      	ldr	r2, [pc, #428]	@ (80074d0 <xTaskIncrementTick+0x214>)
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	f000 fba2 	bl	8007a6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007328:	4b6a      	ldr	r3, [pc, #424]	@ (80074d4 <xTaskIncrementTick+0x218>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a3a      	ldr	r2, [r7, #32]
 800732e:	429a      	cmp	r2, r3
 8007330:	f0c0 80a6 	bcc.w	8007480 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007334:	4b64      	ldr	r3, [pc, #400]	@ (80074c8 <xTaskIncrementTick+0x20c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733e:	4b65      	ldr	r3, [pc, #404]	@ (80074d4 <xTaskIncrementTick+0x218>)
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	601a      	str	r2, [r3, #0]
                    break;
 8007346:	e09b      	b.n	8007480 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007348:	4b5f      	ldr	r3, [pc, #380]	@ (80074c8 <xTaskIncrementTick+0x20c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	429a      	cmp	r2, r3
 800735e:	d203      	bcs.n	8007368 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007360:	4a5c      	ldr	r2, [pc, #368]	@ (80074d4 <xTaskIncrementTick+0x218>)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007366:	e08b      	b.n	8007480 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	68d2      	ldr	r2, [r2, #12]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	6892      	ldr	r2, [r2, #8]
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	3304      	adds	r3, #4
 800738a:	429a      	cmp	r2, r3
 800738c:	d103      	bne.n	8007396 <xTaskIncrementTick+0xda>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2200      	movs	r2, #0
 800739a:	615a      	str	r2, [r3, #20]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	1e5a      	subs	r2, r3, #1
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01e      	beq.n	80073ec <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	6a12      	ldr	r2, [r2, #32]
 80073bc:	609a      	str	r2, [r3, #8]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	69d2      	ldr	r2, [r2, #28]
 80073c6:	605a      	str	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	3318      	adds	r3, #24
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d103      	bne.n	80073dc <xTaskIncrementTick+0x120>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2200      	movs	r2, #0
 80073e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1e5a      	subs	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	2201      	movs	r2, #1
 80073f2:	409a      	lsls	r2, r3
 80073f4:	4b38      	ldr	r3, [pc, #224]	@ (80074d8 <xTaskIncrementTick+0x21c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	4a37      	ldr	r2, [pc, #220]	@ (80074d8 <xTaskIncrementTick+0x21c>)
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	4936      	ldr	r1, [pc, #216]	@ (80074dc <xTaskIncrementTick+0x220>)
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	3304      	adds	r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	3204      	adds	r2, #4
 800742a:	605a      	str	r2, [r3, #4]
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <xTaskIncrementTick+0x220>)
 8007442:	441a      	add	r2, r3
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	615a      	str	r2, [r3, #20]
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744c:	4923      	ldr	r1, [pc, #140]	@ (80074dc <xTaskIncrementTick+0x220>)
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	481f      	ldr	r0, [pc, #124]	@ (80074dc <xTaskIncrementTick+0x220>)
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4403      	add	r3, r0
 8007468:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746e:	4b1c      	ldr	r3, [pc, #112]	@ (80074e0 <xTaskIncrementTick+0x224>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	429a      	cmp	r2, r3
 8007476:	f67f af5d 	bls.w	8007334 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800747e:	e759      	b.n	8007334 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007480:	4b17      	ldr	r3, [pc, #92]	@ (80074e0 <xTaskIncrementTick+0x224>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4915      	ldr	r1, [pc, #84]	@ (80074dc <xTaskIncrementTick+0x220>)
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d901      	bls.n	800749c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800749c:	4b11      	ldr	r3, [pc, #68]	@ (80074e4 <xTaskIncrementTick+0x228>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a8:	e004      	b.n	80074b4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80074aa:	4b0f      	ldr	r3, [pc, #60]	@ (80074e8 <xTaskIncrementTick+0x22c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	4a0d      	ldr	r2, [pc, #52]	@ (80074e8 <xTaskIncrementTick+0x22c>)
 80074b2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3728      	adds	r7, #40	@ 0x28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000368 	.word	0x20000368
 80074c4:	20000344 	.word	0x20000344
 80074c8:	200002f8 	.word	0x200002f8
 80074cc:	200002fc 	.word	0x200002fc
 80074d0:	20000358 	.word	0x20000358
 80074d4:	20000360 	.word	0x20000360
 80074d8:	20000348 	.word	0x20000348
 80074dc:	2000026c 	.word	0x2000026c
 80074e0:	20000268 	.word	0x20000268
 80074e4:	20000354 	.word	0x20000354
 80074e8:	20000350 	.word	0x20000350

080074ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074f2:	4b27      	ldr	r3, [pc, #156]	@ (8007590 <vTaskSwitchContext+0xa4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80074fa:	4b26      	ldr	r3, [pc, #152]	@ (8007594 <vTaskSwitchContext+0xa8>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007500:	e040      	b.n	8007584 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007502:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <vTaskSwitchContext+0xa8>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007508:	4b23      	ldr	r3, [pc, #140]	@ (8007598 <vTaskSwitchContext+0xac>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	fab3 f383 	clz	r3, r3
 8007514:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	f1c3 031f 	rsb	r3, r3, #31
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	491f      	ldr	r1, [pc, #124]	@ (800759c <vTaskSwitchContext+0xb0>)
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <vTaskSwitchContext+0x5e>
        __asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	607b      	str	r3, [r7, #4]
    }
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <vTaskSwitchContext+0x5a>
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a11      	ldr	r2, [pc, #68]	@ (800759c <vTaskSwitchContext+0xb0>)
 8007556:	4413      	add	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3308      	adds	r3, #8
 800756c:	429a      	cmp	r2, r3
 800756e:	d104      	bne.n	800757a <vTaskSwitchContext+0x8e>
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4a07      	ldr	r2, [pc, #28]	@ (80075a0 <vTaskSwitchContext+0xb4>)
 8007582:	6013      	str	r3, [r2, #0]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	20000368 	.word	0x20000368
 8007594:	20000354 	.word	0x20000354
 8007598:	20000348 	.word	0x20000348
 800759c:	2000026c 	.word	0x2000026c
 80075a0:	20000268 	.word	0x20000268

080075a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60fb      	str	r3, [r7, #12]
    }
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075cc:	4b07      	ldr	r3, [pc, #28]	@ (80075ec <vTaskPlaceOnEventList+0x48>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3318      	adds	r3, #24
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff f83d 	bl	8006654 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075da:	2101      	movs	r1, #1
 80075dc:	6838      	ldr	r0, [r7, #0]
 80075de:	f000 fa7f 	bl	8007ae0 <prvAddCurrentTaskToDelayedList>
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000268 	.word	0x20000268

080075f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	613b      	str	r3, [r7, #16]
    }
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <vTaskPlaceOnEventListRestricted+0x88>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	61da      	str	r2, [r3, #28]
 8007628:	4b13      	ldr	r3, [pc, #76]	@ (8007678 <vTaskPlaceOnEventListRestricted+0x88>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	6892      	ldr	r2, [r2, #8]
 8007630:	621a      	str	r2, [r3, #32]
 8007632:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <vTaskPlaceOnEventListRestricted+0x88>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	3218      	adds	r2, #24
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	4b0e      	ldr	r3, [pc, #56]	@ (8007678 <vTaskPlaceOnEventListRestricted+0x88>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f103 0218 	add.w	r2, r3, #24
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	609a      	str	r2, [r3, #8]
 800764a:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <vTaskPlaceOnEventListRestricted+0x88>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	629a      	str	r2, [r3, #40]	@ 0x28
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	f000 fa38 	bl	8007ae0 <prvAddCurrentTaskToDelayedList>
    }
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000268 	.word	0x20000268

0800767c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800767c:	b480      	push	{r7}
 800767e:	b08b      	sub	sp, #44	@ 0x2c
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
    }
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	6a12      	ldr	r2, [r2, #32]
 80076b8:	609a      	str	r2, [r3, #8]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	69d2      	ldr	r2, [r2, #28]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	3318      	adds	r3, #24
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d103      	bne.n	80076d8 <xTaskRemoveFromEventList+0x5c>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	6a1a      	ldr	r2, [r3, #32]
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2200      	movs	r2, #0
 80076dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007814 <xTaskRemoveFromEventList+0x198>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d15e      	bne.n	80077ae <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	6a3a      	ldr	r2, [r7, #32]
 80076fc:	68d2      	ldr	r2, [r2, #12]
 80076fe:	609a      	str	r2, [r3, #8]
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	6a3a      	ldr	r2, [r7, #32]
 8007706:	6892      	ldr	r2, [r2, #8]
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	3304      	adds	r3, #4
 8007712:	429a      	cmp	r2, r3
 8007714:	d103      	bne.n	800771e <xTaskRemoveFromEventList+0xa2>
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2200      	movs	r2, #0
 8007722:	615a      	str	r2, [r3, #20]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	2201      	movs	r2, #1
 8007734:	409a      	lsls	r2, r3
 8007736:	4b38      	ldr	r3, [pc, #224]	@ (8007818 <xTaskRemoveFromEventList+0x19c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	4a36      	ldr	r2, [pc, #216]	@ (8007818 <xTaskRemoveFromEventList+0x19c>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	4935      	ldr	r1, [pc, #212]	@ (800781c <xTaskRemoveFromEventList+0x1a0>)
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3304      	adds	r3, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	609a      	str	r2, [r3, #8]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	3204      	adds	r2, #4
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a26      	ldr	r2, [pc, #152]	@ (800781c <xTaskRemoveFromEventList+0x1a0>)
 8007784:	441a      	add	r2, r3
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	615a      	str	r2, [r3, #20]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778e:	4923      	ldr	r1, [pc, #140]	@ (800781c <xTaskRemoveFromEventList+0x1a0>)
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1c59      	adds	r1, r3, #1
 800779e:	481f      	ldr	r0, [pc, #124]	@ (800781c <xTaskRemoveFromEventList+0x1a0>)
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4403      	add	r3, r0
 80077aa:	6019      	str	r1, [r3, #0]
 80077ac:	e01b      	b.n	80077e6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007820 <xTaskRemoveFromEventList+0x1a4>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	61da      	str	r2, [r3, #28]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	621a      	str	r2, [r3, #32]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	6a3a      	ldr	r2, [r7, #32]
 80077c8:	3218      	adds	r2, #24
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	f103 0218 	add.w	r2, r3, #24
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	4a11      	ldr	r2, [pc, #68]	@ (8007820 <xTaskRemoveFromEventList+0x1a4>)
 80077da:	629a      	str	r2, [r3, #40]	@ 0x28
 80077dc:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <xTaskRemoveFromEventList+0x1a4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007820 <xTaskRemoveFromEventList+0x1a4>)
 80077e4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <xTaskRemoveFromEventList+0x1a8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d905      	bls.n	8007800 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <xTaskRemoveFromEventList+0x1ac>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e001      	b.n	8007804 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007806:	4618      	mov	r0, r3
 8007808:	372c      	adds	r7, #44	@ 0x2c
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000368 	.word	0x20000368
 8007818:	20000348 	.word	0x20000348
 800781c:	2000026c 	.word	0x2000026c
 8007820:	20000300 	.word	0x20000300
 8007824:	20000268 	.word	0x20000268
 8007828:	20000354 	.word	0x20000354

0800782c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007834:	4b06      	ldr	r3, [pc, #24]	@ (8007850 <vTaskInternalSetTimeOutState+0x24>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800783c:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <vTaskInternalSetTimeOutState+0x28>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000358 	.word	0x20000358
 8007854:	20000344 	.word	0x20000344

08007858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10b      	bne.n	8007880 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	613b      	str	r3, [r7, #16]
    }
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	e7fd      	b.n	800787c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60fb      	str	r3, [r7, #12]
    }
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800789e:	f000 fd5d 	bl	800835c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80078a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <xTaskCheckForTimeOut+0xc8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d102      	bne.n	80078c2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80078bc:	2300      	movs	r3, #0
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e026      	b.n	8007910 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <xTaskCheckForTimeOut+0xcc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d00a      	beq.n	80078e4 <xTaskCheckForTimeOut+0x8c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d305      	bcc.n	80078e4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e015      	b.n	8007910 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d20b      	bcs.n	8007906 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff ff96 	bl	800782c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007900:	2300      	movs	r3, #0
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	e004      	b.n	8007910 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007910:	f000 fd56 	bl	80083c0 <vPortExitCritical>

    return xReturn;
 8007914:	69fb      	ldr	r3, [r7, #28]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000344 	.word	0x20000344
 8007924:	20000358 	.word	0x20000358

08007928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800792c:	4b03      	ldr	r3, [pc, #12]	@ (800793c <vTaskMissedYield+0x14>)
 800792e:	2201      	movs	r2, #1
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	bf00      	nop
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000354 	.word	0x20000354

08007940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007948:	f000 f852 	bl	80079f0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <prvIdleTask+0x28>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d9f9      	bls.n	8007948 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <prvIdleTask+0x2c>)
 8007956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007964:	e7f0      	b.n	8007948 <prvIdleTask+0x8>
 8007966:	bf00      	nop
 8007968:	2000026c 	.word	0x2000026c
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007976:	2300      	movs	r3, #0
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	e00c      	b.n	8007996 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4a12      	ldr	r2, [pc, #72]	@ (80079d0 <prvInitialiseTaskLists+0x60>)
 8007988:	4413      	add	r3, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fe35 	bl	80065fa <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3301      	adds	r3, #1
 8007994:	607b      	str	r3, [r7, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b04      	cmp	r3, #4
 800799a:	d9ef      	bls.n	800797c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800799c:	480d      	ldr	r0, [pc, #52]	@ (80079d4 <prvInitialiseTaskLists+0x64>)
 800799e:	f7fe fe2c 	bl	80065fa <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80079a2:	480d      	ldr	r0, [pc, #52]	@ (80079d8 <prvInitialiseTaskLists+0x68>)
 80079a4:	f7fe fe29 	bl	80065fa <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80079a8:	480c      	ldr	r0, [pc, #48]	@ (80079dc <prvInitialiseTaskLists+0x6c>)
 80079aa:	f7fe fe26 	bl	80065fa <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80079ae:	480c      	ldr	r0, [pc, #48]	@ (80079e0 <prvInitialiseTaskLists+0x70>)
 80079b0:	f7fe fe23 	bl	80065fa <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80079b4:	480b      	ldr	r0, [pc, #44]	@ (80079e4 <prvInitialiseTaskLists+0x74>)
 80079b6:	f7fe fe20 	bl	80065fa <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <prvInitialiseTaskLists+0x78>)
 80079bc:	4a05      	ldr	r2, [pc, #20]	@ (80079d4 <prvInitialiseTaskLists+0x64>)
 80079be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <prvInitialiseTaskLists+0x7c>)
 80079c2:	4a05      	ldr	r2, [pc, #20]	@ (80079d8 <prvInitialiseTaskLists+0x68>)
 80079c4:	601a      	str	r2, [r3, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	2000026c 	.word	0x2000026c
 80079d4:	200002d0 	.word	0x200002d0
 80079d8:	200002e4 	.word	0x200002e4
 80079dc:	20000300 	.word	0x20000300
 80079e0:	20000314 	.word	0x20000314
 80079e4:	2000032c 	.word	0x2000032c
 80079e8:	200002f8 	.word	0x200002f8
 80079ec:	200002fc 	.word	0x200002fc

080079f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079f6:	e019      	b.n	8007a2c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80079f8:	f000 fcb0 	bl	800835c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fc:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <prvCheckTasksWaitingTermination+0x50>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fe5c 	bl	80066c6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <prvCheckTasksWaitingTermination+0x54>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4a0b      	ldr	r2, [pc, #44]	@ (8007a44 <prvCheckTasksWaitingTermination+0x54>)
 8007a16:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007a18:	4b0b      	ldr	r3, [pc, #44]	@ (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a20:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007a22:	f000 fccd 	bl	80083c0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f810 	bl	8007a4c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e1      	bne.n	80079f8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000314 	.word	0x20000314
 8007a44:	20000340 	.word	0x20000340
 8007a48:	20000328 	.word	0x20000328

08007a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fe23 	bl	80086a4 <vPortFree>
            vPortFree( pxTCB );
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fe20 	bl	80086a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a70:	4b0a      	ldr	r3, [pc, #40]	@ (8007a9c <prvResetNextTaskUnblockTime+0x30>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007a7a:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <prvResetNextTaskUnblockTime+0x34>)
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007a82:	e005      	b.n	8007a90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <prvResetNextTaskUnblockTime+0x30>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <prvResetNextTaskUnblockTime+0x34>)
 8007a8e:	6013      	str	r3, [r2, #0]
}
 8007a90:	bf00      	nop
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	200002f8 	.word	0x200002f8
 8007aa0:	20000360 	.word	0x20000360

08007aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <xTaskGetSchedulerState+0x34>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	e008      	b.n	8007aca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ab8:	4b08      	ldr	r3, [pc, #32]	@ (8007adc <xTaskGetSchedulerState+0x38>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	e001      	b.n	8007aca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007aca:	687b      	ldr	r3, [r7, #4]
    }
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	2000034c 	.word	0x2000034c
 8007adc:	20000368 	.word	0x20000368

08007ae0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007aea:	4b36      	ldr	r3, [pc, #216]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af0:	4b35      	ldr	r3, [pc, #212]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fde5 	bl	80066c6 <uxListRemove>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b02:	4b31      	ldr	r3, [pc, #196]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	2201      	movs	r2, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	43da      	mvns	r2, r3
 8007b10:	4b2e      	ldr	r3, [pc, #184]	@ (8007bcc <prvAddCurrentTaskToDelayedList+0xec>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4013      	ands	r3, r2
 8007b16:	4a2d      	ldr	r2, [pc, #180]	@ (8007bcc <prvAddCurrentTaskToDelayedList+0xec>)
 8007b18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d124      	bne.n	8007b6c <prvAddCurrentTaskToDelayedList+0x8c>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d021      	beq.n	8007b6c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b28:	4b29      	ldr	r3, [pc, #164]	@ (8007bd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	4b26      	ldr	r3, [pc, #152]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	609a      	str	r2, [r3, #8]
 8007b36:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	6892      	ldr	r2, [r2, #8]
 8007b3e:	60da      	str	r2, [r3, #12]
 8007b40:	4b21      	ldr	r3, [pc, #132]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	3204      	adds	r2, #4
 8007b4a:	605a      	str	r2, [r3, #4]
 8007b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	609a      	str	r2, [r3, #8]
 8007b56:	4b1c      	ldr	r3, [pc, #112]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007b5c:	615a      	str	r2, [r3, #20]
 8007b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007bd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007b6a:	e026      	b.n	8007bba <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b74:	4b14      	ldr	r3, [pc, #80]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d209      	bcs.n	8007b98 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b84:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7fe fd5f 	bl	8006654 <vListInsert>
}
 8007b96:	e010      	b.n	8007bba <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b98:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7fe fd55 	bl	8006654 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007baa:	4b0c      	ldr	r3, [pc, #48]	@ (8007bdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d202      	bcs.n	8007bba <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007bb4:	4a09      	ldr	r2, [pc, #36]	@ (8007bdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6013      	str	r3, [r2, #0]
}
 8007bba:	bf00      	nop
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000344 	.word	0x20000344
 8007bc8:	20000268 	.word	0x20000268
 8007bcc:	20000348 	.word	0x20000348
 8007bd0:	2000032c 	.word	0x2000032c
 8007bd4:	200002fc 	.word	0x200002fc
 8007bd8:	200002f8 	.word	0x200002f8
 8007bdc:	20000360 	.word	0x20000360

08007be0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007bea:	f000 fa4f 	bl	800808c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007bee:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <xTimerCreateTimerTask+0x58>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007bf6:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <xTimerCreateTimerTask+0x5c>)
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007c04:	490e      	ldr	r1, [pc, #56]	@ (8007c40 <xTimerCreateTimerTask+0x60>)
 8007c06:	480f      	ldr	r0, [pc, #60]	@ (8007c44 <xTimerCreateTimerTask+0x64>)
 8007c08:	f7ff f880 	bl	8006d0c <xTaskCreate>
 8007c0c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	603b      	str	r3, [r7, #0]
    }
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007c2c:	687b      	ldr	r3, [r7, #4]
    }
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	2000039c 	.word	0x2000039c
 8007c3c:	200003a0 	.word	0x200003a0
 8007c40:	0800b2c4 	.word	0x0800b2c4
 8007c44:	08007ced 	.word	0x08007ced

08007c48 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007c54:	e008      	b.n	8007c68 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699a      	ldr	r2, [r3, #24]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	18d1      	adds	r1, r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f8df 	bl	8007e38 <prvInsertTimerInActiveList>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1ea      	bne.n	8007c56 <prvReloadTimer+0xe>
        }
    }
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c96:	4b14      	ldr	r3, [pc, #80]	@ (8007ce8 <prvProcessExpiredTimer+0x5c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fd0e 	bl	80066c6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ffc3 	bl	8007c48 <prvReloadTimer>
 8007cc2:	e008      	b.n	8007cd6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3
    }
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000394 	.word	0x20000394

08007cec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f859 	bl	8007db0 <prvGetNextExpireTime>
 8007cfe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f805 	bl	8007d14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007d0a:	f000 f8d7 	bl	8007ebc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d0e:	bf00      	nop
 8007d10:	e7f0      	b.n	8007cf4 <prvTimerTask+0x8>
	...

08007d14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007d1e:	f7ff f9b3 	bl	8007088 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f866 	bl	8007df8 <prvSampleTimeNow>
 8007d2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d130      	bne.n	8007d96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <prvProcessTimerOrBlockTask+0x3c>
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d806      	bhi.n	8007d50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007d42:	f7ff f9af 	bl	80070a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff ff9f 	bl	8007c8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007d4e:	e024      	b.n	8007d9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d56:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <prvProcessTimerOrBlockTask+0x90>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <prvProcessTimerOrBlockTask+0x50>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <prvProcessTimerOrBlockTask+0x52>
 8007d64:	2300      	movs	r3, #0
 8007d66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <prvProcessTimerOrBlockTask+0x94>)
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7fe ff95 	bl	8006ca4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007d7a:	f7ff f993 	bl	80070a4 <xTaskResumeAll>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007d84:	4b09      	ldr	r3, [pc, #36]	@ (8007dac <prvProcessTimerOrBlockTask+0x98>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
    }
 8007d94:	e001      	b.n	8007d9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007d96:	f7ff f985 	bl	80070a4 <xTaskResumeAll>
    }
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000398 	.word	0x20000398
 8007da8:	2000039c 	.word	0x2000039c
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007db8:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <prvGetNextExpireTime+0x44>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <prvGetNextExpireTime+0x16>
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	e000      	b.n	8007dc8 <prvGetNextExpireTime+0x18>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dd4:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <prvGetNextExpireTime+0x44>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e001      	b.n	8007de4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007de4:	68fb      	ldr	r3, [r7, #12]
    }
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000394 	.word	0x20000394

08007df8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007e00:	f7ff fa4c 	bl	800729c <xTaskGetTickCount>
 8007e04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007e06:	4b0b      	ldr	r3, [pc, #44]	@ (8007e34 <prvSampleTimeNow+0x3c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d205      	bcs.n	8007e1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007e10:	f000 f916 	bl	8008040 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e002      	b.n	8007e22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007e22:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <prvSampleTimeNow+0x3c>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007e28:	68fb      	ldr	r3, [r7, #12]
    }
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	200003a4 	.word	0x200003a4

08007e38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d812      	bhi.n	8007e84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	1ad2      	subs	r2, r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	e01b      	b.n	8007eaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e72:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <prvInsertTimerInActiveList+0x7c>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f7fe fbe9 	bl	8006654 <vListInsert>
 8007e82:	e012      	b.n	8007eaa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d206      	bcs.n	8007e9a <prvInsertTimerInActiveList+0x62>
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d302      	bcc.n	8007e9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e007      	b.n	8007eaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e9a:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <prvInsertTimerInActiveList+0x80>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7fe fbd5 	bl	8006654 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007eaa:	697b      	ldr	r3, [r7, #20]
    }
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000398 	.word	0x20000398
 8007eb8:	20000394 	.word	0x20000394

08007ebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ec2:	e0a9      	b.n	8008018 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 80a6 	blt.w	8008018 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fbf2 	bl	80066c6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff ff87 	bl	8007df8 <prvSampleTimeNow>
 8007eea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	f200 808e 	bhi.w	8008012 <prvProcessReceivedCommands+0x156>
 8007ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8007efc <prvProcessReceivedCommands+0x40>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	08007f9d 	.word	0x08007f9d
 8007f0c:	08007fe9 	.word	0x08007fe9
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f21 	.word	0x08007f21
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f9d 	.word	0x08007f9d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	18d1      	adds	r1, r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	69f8      	ldr	r0, [r7, #28]
 8007f40:	f7ff ff7a 	bl	8007e38 <prvInsertTimerInActiveList>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d065      	beq.n	8008016 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	4413      	add	r3, r2
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4619      	mov	r1, r3
 8007f64:	69f8      	ldr	r0, [r7, #28]
 8007f66:	f7ff fe6f 	bl	8007c48 <prvReloadTimer>
 8007f6a:	e008      	b.n	8007f7e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	69f8      	ldr	r0, [r7, #28]
 8007f84:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007f86:	e046      	b.n	8008016 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007f9a:	e03d      	b.n	8008018 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10b      	bne.n	8007fd4 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	617b      	str	r3, [r7, #20]
    }
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	e7fd      	b.n	8007fd0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	18d1      	adds	r1, r2, r3
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	69f8      	ldr	r0, [r7, #28]
 8007fe2:	f7ff ff29 	bl	8007e38 <prvInsertTimerInActiveList>
                        break;
 8007fe6:	e017      	b.n	8008018 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d103      	bne.n	8007ffe <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8007ff6:	69f8      	ldr	r0, [r7, #28]
 8007ff8:	f000 fb54 	bl	80086a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007ffc:	e00c      	b.n	8008018 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	b2da      	uxtb	r2, r3
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008010:	e002      	b.n	8008018 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <prvProcessReceivedCommands+0x15c>
                        break;
 8008016:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008018:	4b08      	ldr	r3, [pc, #32]	@ (800803c <prvProcessReceivedCommands+0x180>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f107 0108 	add.w	r1, r7, #8
 8008020:	2200      	movs	r2, #0
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fc7e 	bl	8006924 <xQueueReceive>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	f47f af4a 	bne.w	8007ec4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000039c 	.word	0x2000039c

08008040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008046:	e009      	b.n	800805c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008048:	4b0e      	ldr	r3, [pc, #56]	@ (8008084 <prvSwitchTimerLists+0x44>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008052:	f04f 31ff 	mov.w	r1, #4294967295
 8008056:	6838      	ldr	r0, [r7, #0]
 8008058:	f7ff fe18 	bl	8007c8c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <prvSwitchTimerLists+0x44>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f0      	bne.n	8008048 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008066:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <prvSwitchTimerLists+0x44>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <prvSwitchTimerLists+0x48>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a04      	ldr	r2, [pc, #16]	@ (8008084 <prvSwitchTimerLists+0x44>)
 8008072:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008074:	4a04      	ldr	r2, [pc, #16]	@ (8008088 <prvSwitchTimerLists+0x48>)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6013      	str	r3, [r2, #0]
    }
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000394 	.word	0x20000394
 8008088:	20000398 	.word	0x20000398

0800808c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008090:	f000 f964 	bl	800835c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008094:	4b12      	ldr	r3, [pc, #72]	@ (80080e0 <prvCheckForValidListAndQueue+0x54>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11d      	bne.n	80080d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800809c:	4811      	ldr	r0, [pc, #68]	@ (80080e4 <prvCheckForValidListAndQueue+0x58>)
 800809e:	f7fe faac 	bl	80065fa <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80080a2:	4811      	ldr	r0, [pc, #68]	@ (80080e8 <prvCheckForValidListAndQueue+0x5c>)
 80080a4:	f7fe faa9 	bl	80065fa <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80080a8:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <prvCheckForValidListAndQueue+0x60>)
 80080aa:	4a0e      	ldr	r2, [pc, #56]	@ (80080e4 <prvCheckForValidListAndQueue+0x58>)
 80080ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80080ae:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <prvCheckForValidListAndQueue+0x64>)
 80080b0:	4a0d      	ldr	r2, [pc, #52]	@ (80080e8 <prvCheckForValidListAndQueue+0x5c>)
 80080b2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80080b4:	2200      	movs	r2, #0
 80080b6:	210c      	movs	r1, #12
 80080b8:	200a      	movs	r0, #10
 80080ba:	f7fe fbc1 	bl	8006840 <xQueueGenericCreate>
 80080be:	4603      	mov	r3, r0
 80080c0:	4a07      	ldr	r2, [pc, #28]	@ (80080e0 <prvCheckForValidListAndQueue+0x54>)
 80080c2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80080c4:	4b06      	ldr	r3, [pc, #24]	@ (80080e0 <prvCheckForValidListAndQueue+0x54>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080cc:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <prvCheckForValidListAndQueue+0x54>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4908      	ldr	r1, [pc, #32]	@ (80080f4 <prvCheckForValidListAndQueue+0x68>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fd96 	bl	8006c04 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80080d8:	f000 f972 	bl	80083c0 <vPortExitCritical>
    }
 80080dc:	bf00      	nop
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	2000039c 	.word	0x2000039c
 80080e4:	2000036c 	.word	0x2000036c
 80080e8:	20000380 	.word	0x20000380
 80080ec:	20000394 	.word	0x20000394
 80080f0:	20000398 	.word	0x20000398
 80080f4:	0800b2cc 	.word	0x0800b2cc

080080f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3b04      	subs	r3, #4
 8008108:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008110:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b04      	subs	r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f023 0201 	bic.w	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3b04      	subs	r3, #4
 8008126:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008128:	4a0c      	ldr	r2, [pc, #48]	@ (800815c <pxPortInitialiseStack+0x64>)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3b14      	subs	r3, #20
 8008132:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3b04      	subs	r3, #4
 800813e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f06f 0202 	mvn.w	r2, #2
 8008146:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b20      	subs	r3, #32
 800814c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	08008161 	.word	0x08008161

08008160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800816a:	4b13      	ldr	r3, [pc, #76]	@ (80081b8 <prvTaskExitError+0x58>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d00b      	beq.n	800818c <prvTaskExitError+0x2c>
        __asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
    }
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <prvTaskExitError+0x28>
        __asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60bb      	str	r3, [r7, #8]
    }
 800819e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80081a0:	bf00      	nop
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0fc      	beq.n	80081a2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20000010 	.word	0x20000010
 80081bc:	00000000 	.word	0x00000000

080081c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80081c0:	4b07      	ldr	r3, [pc, #28]	@ (80081e0 <pxCurrentTCBConst2>)
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f380 8809 	msr	PSP, r0
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8811 	msr	BASEPRI, r0
 80081da:	4770      	bx	lr
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst2>:
 80081e0:	20000268 	.word	0x20000268
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80081e8:	4808      	ldr	r0, [pc, #32]	@ (800820c <prvPortStartFirstTask+0x24>)
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f380 8808 	msr	MSP, r0
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8814 	msr	CONTROL, r0
 80081fa:	b662      	cpsie	i
 80081fc:	b661      	cpsie	f
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	df00      	svc	0
 8008208:	bf00      	nop
 800820a:	0000      	.short	0x0000
 800820c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop

08008214 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800821a:	4b47      	ldr	r3, [pc, #284]	@ (8008338 <xPortStartScheduler+0x124>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a47      	ldr	r2, [pc, #284]	@ (800833c <xPortStartScheduler+0x128>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d10b      	bne.n	800823c <xPortStartScheduler+0x28>
        __asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	613b      	str	r3, [r7, #16]
    }
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800823c:	4b3e      	ldr	r3, [pc, #248]	@ (8008338 <xPortStartScheduler+0x124>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3f      	ldr	r2, [pc, #252]	@ (8008340 <xPortStartScheduler+0x12c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10b      	bne.n	800825e <xPortStartScheduler+0x4a>
        __asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60fb      	str	r3, [r7, #12]
    }
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <xPortStartScheduler+0x130>)
 8008260:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	22ff      	movs	r2, #255	@ 0xff
 800826e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008280:	b2da      	uxtb	r2, r3
 8008282:	4b31      	ldr	r3, [pc, #196]	@ (8008348 <xPortStartScheduler+0x134>)
 8008284:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008286:	4b31      	ldr	r3, [pc, #196]	@ (800834c <xPortStartScheduler+0x138>)
 8008288:	2207      	movs	r2, #7
 800828a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828c:	e009      	b.n	80082a2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800828e:	4b2f      	ldr	r3, [pc, #188]	@ (800834c <xPortStartScheduler+0x138>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3b01      	subs	r3, #1
 8008294:	4a2d      	ldr	r2, [pc, #180]	@ (800834c <xPortStartScheduler+0x138>)
 8008296:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b80      	cmp	r3, #128	@ 0x80
 80082ac:	d0ef      	beq.n	800828e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082ae:	4b27      	ldr	r3, [pc, #156]	@ (800834c <xPortStartScheduler+0x138>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f1c3 0307 	rsb	r3, r3, #7
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d00b      	beq.n	80082d2 <xPortStartScheduler+0xbe>
        __asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	60bb      	str	r3, [r7, #8]
    }
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082d2:	4b1e      	ldr	r3, [pc, #120]	@ (800834c <xPortStartScheduler+0x138>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <xPortStartScheduler+0x138>)
 80082da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082dc:	4b1b      	ldr	r3, [pc, #108]	@ (800834c <xPortStartScheduler+0x138>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082e4:	4a19      	ldr	r2, [pc, #100]	@ (800834c <xPortStartScheduler+0x138>)
 80082e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80082f0:	4b17      	ldr	r3, [pc, #92]	@ (8008350 <xPortStartScheduler+0x13c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a16      	ldr	r2, [pc, #88]	@ (8008350 <xPortStartScheduler+0x13c>)
 80082f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80082fc:	4b14      	ldr	r3, [pc, #80]	@ (8008350 <xPortStartScheduler+0x13c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a13      	ldr	r2, [pc, #76]	@ (8008350 <xPortStartScheduler+0x13c>)
 8008302:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008306:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008308:	f000 f8e0 	bl	80084cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800830c:	4b11      	ldr	r3, [pc, #68]	@ (8008354 <xPortStartScheduler+0x140>)
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008312:	f000 f8ff 	bl	8008514 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008316:	4b10      	ldr	r3, [pc, #64]	@ (8008358 <xPortStartScheduler+0x144>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a0f      	ldr	r2, [pc, #60]	@ (8008358 <xPortStartScheduler+0x144>)
 800831c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008320:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008322:	f7ff ff61 	bl	80081e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008326:	f7ff f8e1 	bl	80074ec <vTaskSwitchContext>
    prvTaskExitError();
 800832a:	f7ff ff19 	bl	8008160 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed00 	.word	0xe000ed00
 800833c:	410fc271 	.word	0x410fc271
 8008340:	410fc270 	.word	0x410fc270
 8008344:	e000e400 	.word	0xe000e400
 8008348:	200003a8 	.word	0x200003a8
 800834c:	200003ac 	.word	0x200003ac
 8008350:	e000ed20 	.word	0xe000ed20
 8008354:	20000010 	.word	0x20000010
 8008358:	e000ef34 	.word	0xe000ef34

0800835c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
        __asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
    }
 8008374:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008376:	4b10      	ldr	r3, [pc, #64]	@ (80083b8 <vPortEnterCritical+0x5c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	4a0e      	ldr	r2, [pc, #56]	@ (80083b8 <vPortEnterCritical+0x5c>)
 800837e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008380:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <vPortEnterCritical+0x5c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d110      	bne.n	80083aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008388:	4b0c      	ldr	r3, [pc, #48]	@ (80083bc <vPortEnterCritical+0x60>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <vPortEnterCritical+0x4e>
        __asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	603b      	str	r3, [r7, #0]
    }
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <vPortEnterCritical+0x4a>
    }
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000010 	.word	0x20000010
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80083c6:	4b12      	ldr	r3, [pc, #72]	@ (8008410 <vPortExitCritical+0x50>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <vPortExitCritical+0x26>
        __asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
    }
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80083e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008410 <vPortExitCritical+0x50>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a08      	ldr	r2, [pc, #32]	@ (8008410 <vPortExitCritical+0x50>)
 80083ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <vPortExitCritical+0x50>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <vPortExitCritical+0x44>
 80083f8:	2300      	movs	r3, #0
 80083fa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008402:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20000010 	.word	0x20000010
	...

08008420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008420:	f3ef 8009 	mrs	r0, PSP
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4b15      	ldr	r3, [pc, #84]	@ (8008480 <pxCurrentTCBConst>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	f01e 0f10 	tst.w	lr, #16
 8008430:	bf08      	it	eq
 8008432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	6010      	str	r0, [r2, #0]
 800843c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008444:	f380 8811 	msr	BASEPRI, r0
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f7ff f84c 	bl	80074ec <vTaskSwitchContext>
 8008454:	f04f 0000 	mov.w	r0, #0
 8008458:	f380 8811 	msr	BASEPRI, r0
 800845c:	bc09      	pop	{r0, r3}
 800845e:	6819      	ldr	r1, [r3, #0]
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008466:	f01e 0f10 	tst.w	lr, #16
 800846a:	bf08      	it	eq
 800846c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008470:	f380 8809 	msr	PSP, r0
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst>:
 8008480:	20000268 	.word	0x20000268
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop

08008488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
        __asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
    }
 80084a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084a2:	f7fe ff0b 	bl	80072bc <xTaskIncrementTick>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <SysTick_Handler+0x40>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f383 8811 	msr	BASEPRI, r3
    }
 80084be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <vPortSetupTimerInterrupt+0x34>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008504 <vPortSetupTimerInterrupt+0x38>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <vPortSetupTimerInterrupt+0x3c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <vPortSetupTimerInterrupt+0x40>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	099b      	lsrs	r3, r3, #6
 80084e8:	4a09      	ldr	r2, [pc, #36]	@ (8008510 <vPortSetupTimerInterrupt+0x44>)
 80084ea:	3b01      	subs	r3, #1
 80084ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ee:	4b04      	ldr	r3, [pc, #16]	@ (8008500 <vPortSetupTimerInterrupt+0x34>)
 80084f0:	2207      	movs	r2, #7
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	e000e010 	.word	0xe000e010
 8008504:	e000e018 	.word	0xe000e018
 8008508:	20000000 	.word	0x20000000
 800850c:	10624dd3 	.word	0x10624dd3
 8008510:	e000e014 	.word	0xe000e014

08008514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008524 <vPortEnableVFP+0x10>
 8008518:	6801      	ldr	r1, [r0, #0]
 800851a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800851e:	6001      	str	r1, [r0, #0]
 8008520:	4770      	bx	lr
 8008522:	0000      	.short	0x0000
 8008524:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop

0800852c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	@ 0x28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008538:	f7fe fda6 	bl	8007088 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800853c:	4b54      	ldr	r3, [pc, #336]	@ (8008690 <pvPortMalloc+0x164>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008544:	f000 f90c 	bl	8008760 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d012      	beq.n	8008574 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800854e:	2208      	movs	r2, #8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	3308      	adds	r3, #8
 800855a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	43db      	mvns	r3, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d804      	bhi.n	8008570 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	4413      	add	r3, r2
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	e001      	b.n	8008574 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	db71      	blt.n	800865e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d06e      	beq.n	800865e <pvPortMalloc+0x132>
 8008580:	4b44      	ldr	r3, [pc, #272]	@ (8008694 <pvPortMalloc+0x168>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d869      	bhi.n	800865e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800858a:	4b43      	ldr	r3, [pc, #268]	@ (8008698 <pvPortMalloc+0x16c>)
 800858c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800858e:	4b42      	ldr	r3, [pc, #264]	@ (8008698 <pvPortMalloc+0x16c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008594:	e004      	b.n	80085a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d903      	bls.n	80085b2 <pvPortMalloc+0x86>
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f1      	bne.n	8008596 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80085b2:	4b37      	ldr	r3, [pc, #220]	@ (8008690 <pvPortMalloc+0x164>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d050      	beq.n	800865e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2208      	movs	r2, #8
 80085c2:	4413      	add	r3, r2
 80085c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	1ad2      	subs	r2, r2, r3
 80085d6:	2308      	movs	r3, #8
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	429a      	cmp	r2, r3
 80085dc:	d920      	bls.n	8008620 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4413      	add	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <pvPortMalloc+0xdc>
        __asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	613b      	str	r3, [r7, #16]
    }
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f000 f8fc 	bl	8008818 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008620:	4b1c      	ldr	r3, [pc, #112]	@ (8008694 <pvPortMalloc+0x168>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	4a1a      	ldr	r2, [pc, #104]	@ (8008694 <pvPortMalloc+0x168>)
 800862c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800862e:	4b19      	ldr	r3, [pc, #100]	@ (8008694 <pvPortMalloc+0x168>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <pvPortMalloc+0x170>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d203      	bcs.n	8008642 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800863a:	4b16      	ldr	r3, [pc, #88]	@ (8008694 <pvPortMalloc+0x168>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a17      	ldr	r2, [pc, #92]	@ (800869c <pvPortMalloc+0x170>)
 8008640:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008654:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <pvPortMalloc+0x174>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a11      	ldr	r2, [pc, #68]	@ (80086a0 <pvPortMalloc+0x174>)
 800865c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800865e:	f7fe fd21 	bl	80070a4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <pvPortMalloc+0x158>
        __asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
    }
 800867e:	bf00      	nop
 8008680:	bf00      	nop
 8008682:	e7fd      	b.n	8008680 <pvPortMalloc+0x154>
    return pvReturn;
 8008684:	69fb      	ldr	r3, [r7, #28]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3728      	adds	r7, #40	@ 0x28
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20012fb8 	.word	0x20012fb8
 8008694:	20012fbc 	.word	0x20012fbc
 8008698:	20012fb0 	.word	0x20012fb0
 800869c:	20012fc0 	.word	0x20012fc0
 80086a0:	20012fc4 	.word	0x20012fc4

080086a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d04b      	beq.n	800874e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80086b6:	2308      	movs	r3, #8
 80086b8:	425b      	negs	r3, r3
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	4413      	add	r3, r2
 80086be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db0b      	blt.n	80086e4 <vPortFree+0x40>
        __asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	60fb      	str	r3, [r7, #12]
    }
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	e7fd      	b.n	80086e0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <vPortFree+0x60>
        __asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60bb      	str	r3, [r7, #8]
    }
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	0fdb      	lsrs	r3, r3, #31
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01c      	beq.n	800874e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d118      	bne.n	800874e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008728:	f7fe fcae 	bl	8007088 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <vPortFree+0xb4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4413      	add	r3, r2
 8008736:	4a08      	ldr	r2, [pc, #32]	@ (8008758 <vPortFree+0xb4>)
 8008738:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f000 f86c 	bl	8008818 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008740:	4b06      	ldr	r3, [pc, #24]	@ (800875c <vPortFree+0xb8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a05      	ldr	r2, [pc, #20]	@ (800875c <vPortFree+0xb8>)
 8008748:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800874a:	f7fe fcab 	bl	80070a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20012fbc 	.word	0x20012fbc
 800875c:	20012fc8 	.word	0x20012fc8

08008760 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008766:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800876a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800876c:	4b25      	ldr	r3, [pc, #148]	@ (8008804 <prvHeapInit+0xa4>)
 800876e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00c      	beq.n	8008794 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3307      	adds	r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0307 	bic.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <prvHeapInit+0xa4>)
 8008790:	4413      	add	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008798:	4a1b      	ldr	r2, [pc, #108]	@ (8008808 <prvHeapInit+0xa8>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800879e:	4b1a      	ldr	r3, [pc, #104]	@ (8008808 <prvHeapInit+0xa8>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4413      	add	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80087ac:	2208      	movs	r2, #8
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a13      	ldr	r2, [pc, #76]	@ (800880c <prvHeapInit+0xac>)
 80087c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <prvHeapInit+0xac>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80087ca:	4b10      	ldr	r3, [pc, #64]	@ (800880c <prvHeapInit+0xac>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <prvHeapInit+0xac>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4a08      	ldr	r2, [pc, #32]	@ (8008810 <prvHeapInit+0xb0>)
 80087ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a07      	ldr	r2, [pc, #28]	@ (8008814 <prvHeapInit+0xb4>)
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	200003b0 	.word	0x200003b0
 8008808:	20012fb0 	.word	0x20012fb0
 800880c:	20012fb8 	.word	0x20012fb8
 8008810:	20012fc0 	.word	0x20012fc0
 8008814:	20012fbc 	.word	0x20012fbc

08008818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008820:	4b28      	ldr	r3, [pc, #160]	@ (80088c4 <prvInsertBlockIntoFreeList+0xac>)
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <prvInsertBlockIntoFreeList+0x14>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d8f7      	bhi.n	8008826 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d118      	bne.n	80088a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	@ (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d00d      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e008      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008896:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e003      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20012fb0 	.word	0x20012fb0
 80088c8:	20012fb8 	.word	0x20012fb8

080088cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b089      	sub	sp, #36	@ 0x24
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80088d4:	2301      	movs	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	2102      	movs	r1, #2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fc85 	bl	80091ea <USBH_FindInterface>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2bff      	cmp	r3, #255	@ 0xff
 80088e8:	d002      	beq.n	80088f0 <USBH_CDC_InterfaceInit+0x24>
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d901      	bls.n	80088f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e13d      	b.n	8008b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fc5a 	bl	80091b2 <USBH_SelectInterface>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008908:	2302      	movs	r3, #2
 800890a:	e131      	b.n	8008b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008912:	2050      	movs	r0, #80	@ 0x50
 8008914:	f002 fb64 	bl	800afe0 <malloc>
 8008918:	4603      	mov	r3, r0
 800891a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800892c:	2302      	movs	r3, #2
 800892e:	e11f      	b.n	8008b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008930:	2250      	movs	r2, #80	@ 0x50
 8008932:	2100      	movs	r1, #0
 8008934:	68b8      	ldr	r0, [r7, #8]
 8008936:	f002 fc11 	bl	800b15c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	211a      	movs	r1, #26
 8008940:	fb01 f303 	mul.w	r3, r1, r3
 8008944:	4413      	add	r3, r2
 8008946:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b25b      	sxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	da15      	bge.n	800897e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	211a      	movs	r1, #26
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	4413      	add	r3, r2
 800895e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	211a      	movs	r1, #26
 800896e:	fb01 f303 	mul.w	r3, r1, r3
 8008972:	4413      	add	r3, r2
 8008974:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008978:	881a      	ldrh	r2, [r3, #0]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 ffbe 	bl	800a906 <USBH_AllocPipe>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7819      	ldrb	r1, [r3, #0]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	7858      	ldrb	r0, [r3, #1]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	8952      	ldrh	r2, [r2, #10]
 80089aa:	9202      	str	r2, [sp, #8]
 80089ac:	2203      	movs	r2, #3
 80089ae:	9201      	str	r2, [sp, #4]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	4623      	mov	r3, r4
 80089b4:	4602      	mov	r2, r0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 ff76 	bl	800a8a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f002 fa85 	bl	800aed4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80089ca:	2300      	movs	r3, #0
 80089cc:	2200      	movs	r2, #0
 80089ce:	210a      	movs	r1, #10
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc0a 	bl	80091ea <USBH_FindInterface>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2bff      	cmp	r3, #255	@ 0xff
 80089de:	d002      	beq.n	80089e6 <USBH_CDC_InterfaceInit+0x11a>
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d901      	bls.n	80089ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	e0c2      	b.n	8008b70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	211a      	movs	r1, #26
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da16      	bge.n	8008a30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	211a      	movs	r1, #26
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	211a      	movs	r1, #26
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a28:	881a      	ldrh	r2, [r3, #0]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	835a      	strh	r2, [r3, #26]
 8008a2e:	e015      	b.n	8008a5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	211a      	movs	r1, #26
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	211a      	movs	r1, #26
 8008a4c:	fb01 f303 	mul.w	r3, r1, r3
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a56:	881a      	ldrh	r2, [r3, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	211a      	movs	r1, #26
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da16      	bge.n	8008aa2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	211a      	movs	r1, #26
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	211a      	movs	r1, #26
 8008a90:	fb01 f303 	mul.w	r3, r1, r3
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008a9a:	881a      	ldrh	r2, [r3, #0]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	835a      	strh	r2, [r3, #26]
 8008aa0:	e015      	b.n	8008ace <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	211a      	movs	r1, #26
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	4413      	add	r3, r2
 8008aae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	211a      	movs	r1, #26
 8008abe:	fb01 f303 	mul.w	r3, r1, r3
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008ac8:	881a      	ldrh	r2, [r3, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	7b9b      	ldrb	r3, [r3, #14]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ff16 	bl	800a906 <USBH_AllocPipe>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	7bdb      	ldrb	r3, [r3, #15]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 ff0c 	bl	800a906 <USBH_AllocPipe>
 8008aee:	4603      	mov	r3, r0
 8008af0:	461a      	mov	r2, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	7b59      	ldrb	r1, [r3, #13]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	7b98      	ldrb	r0, [r3, #14]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	8b12      	ldrh	r2, [r2, #24]
 8008b0e:	9202      	str	r2, [sp, #8]
 8008b10:	2202      	movs	r2, #2
 8008b12:	9201      	str	r2, [sp, #4]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	4623      	mov	r3, r4
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 fec4 	bl	800a8a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	7b19      	ldrb	r1, [r3, #12]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	7bd8      	ldrb	r0, [r3, #15]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	8b52      	ldrh	r2, [r2, #26]
 8008b38:	9202      	str	r2, [sp, #8]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	9201      	str	r2, [sp, #4]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4623      	mov	r3, r4
 8008b42:	4602      	mov	r2, r0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 feaf 	bl	800a8a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	7b5b      	ldrb	r3, [r3, #13]
 8008b56:	2200      	movs	r2, #0
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f002 f9ba 	bl	800aed4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	7b1b      	ldrb	r3, [r3, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f002 f9b3 	bl	800aed4 <USBH_LL_SetToggle>

  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd90      	pop	{r4, r7, pc}

08008b78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00e      	beq.n	8008bb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 fea4 	bl	800a8e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 fecf 	bl	800a948 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	7b1b      	ldrb	r3, [r3, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00e      	beq.n	8008bd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	7b1b      	ldrb	r3, [r3, #12]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fe91 	bl	800a8e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	7b1b      	ldrb	r3, [r3, #12]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 febc 	bl	800a948 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	7b5b      	ldrb	r3, [r3, #13]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00e      	beq.n	8008bfc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	7b5b      	ldrb	r3, [r3, #13]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fe7e 	bl	800a8e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	7b5b      	ldrb	r3, [r3, #13]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fea9 	bl	800a948 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f002 f9ed 	bl	800aff0 <free>
    phost->pActiveClass->pData = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3340      	adds	r3, #64	@ 0x40
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f8b1 	bl	8008daa <GetLineCoding>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d105      	bne.n	8008c5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c58:	2102      	movs	r1, #2
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d877      	bhi.n	8008d7c <USBH_CDC_Process+0x114>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <USBH_CDC_Process+0x2c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008caf 	.word	0x08008caf
 8008c9c:	08008cdf 	.word	0x08008cdf
 8008ca0:	08008d53 	.word	0x08008d53
 8008ca4:	08008d61 	.word	0x08008d61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
      break;
 8008cac:	e06d      	b.n	8008d8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f897 	bl	8008de8 <SetLineCoding>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d104      	bne.n	8008cce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ccc:	e058      	b.n	8008d80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d055      	beq.n	8008d80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008cdc:	e050      	b.n	8008d80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	3340      	adds	r3, #64	@ 0x40
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f860 	bl	8008daa <GetLineCoding>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d126      	bne.n	8008d42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d06:	791b      	ldrb	r3, [r3, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d13b      	bne.n	8008d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d133      	bne.n	8008d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d12b      	bne.n	8008d84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d124      	bne.n	8008d84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f958 	bl	8008ff0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d40:	e020      	b.n	8008d84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d01d      	beq.n	8008d84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008d50:	e018      	b.n	8008d84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f867 	bl	8008e26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f8da 	bl	8008f12 <CDC_ProcessReception>
      break;
 8008d5e:	e014      	b.n	8008d8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008d60:	2100      	movs	r1, #0
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 f81a 	bl	8009d9c <USBH_ClrFeature>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008d7a:	e005      	b.n	8008d88 <USBH_CDC_Process+0x120>

    default:
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e004      	b.n	8008d8a <USBH_CDC_Process+0x122>
      break;
 8008d80:	bf00      	nop
 8008d82:	e002      	b.n	8008d8a <USBH_CDC_Process+0x122>
      break;
 8008d84:	bf00      	nop
 8008d86:	e000      	b.n	8008d8a <USBH_CDC_Process+0x122>
      break;
 8008d88:	bf00      	nop

  }

  return status;
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	22a1      	movs	r2, #161	@ 0xa1
 8008db8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2221      	movs	r2, #33	@ 0x21
 8008dbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2207      	movs	r2, #7
 8008dd0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fb14 	bl	800a406 <USBH_CtlReq>
 8008dde:	4603      	mov	r3, r0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2221      	movs	r2, #33	@ 0x21
 8008df6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2207      	movs	r2, #7
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 faf5 	bl	800a406 <USBH_CtlReq>
 8008e1c:	4603      	mov	r3, r0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af02      	add	r7, sp, #8
 8008e2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d002      	beq.n	8008e4c <CDC_ProcessTransmission+0x26>
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d023      	beq.n	8008e92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008e4a:	e05e      	b.n	8008f0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	8b12      	ldrh	r2, [r2, #24]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d90b      	bls.n	8008e70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	69d9      	ldr	r1, [r3, #28]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8b1a      	ldrh	r2, [r3, #24]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7b5b      	ldrb	r3, [r3, #13]
 8008e64:	2001      	movs	r0, #1
 8008e66:	9000      	str	r0, [sp, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 fcda 	bl	800a822 <USBH_BulkSendData>
 8008e6e:	e00b      	b.n	8008e88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	7b5b      	ldrb	r3, [r3, #13]
 8008e7e:	2001      	movs	r0, #1
 8008e80:	9000      	str	r0, [sp, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fccd 	bl	800a822 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e90:	e03b      	b.n	8008f0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	7b5b      	ldrb	r3, [r3, #13]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fff1 	bl	800ae80 <USBH_LL_GetURBState>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d128      	bne.n	8008efa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	8b12      	ldrh	r2, [r2, #24]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d90e      	bls.n	8008ed2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	8b12      	ldrh	r2, [r2, #24]
 8008ebc:	1a9a      	subs	r2, r3, r2
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	8b12      	ldrh	r2, [r2, #24]
 8008eca:	441a      	add	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	61da      	str	r2, [r3, #28]
 8008ed0:	e002      	b.n	8008ed8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ee8:	e00e      	b.n	8008f08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f868 	bl	8008fc8 <USBH_CDC_TransmitCallback>
      break;
 8008ef8:	e006      	b.n	8008f08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d103      	bne.n	8008f08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f08:	bf00      	nop
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d002      	beq.n	8008f38 <CDC_ProcessReception+0x26>
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d00e      	beq.n	8008f54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008f36:	e043      	b.n	8008fc0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	6a19      	ldr	r1, [r3, #32]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	8b5a      	ldrh	r2, [r3, #26]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	7b1b      	ldrb	r3, [r3, #12]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 fc91 	bl	800a86c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008f52:	e035      	b.n	8008fc0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	7b1b      	ldrb	r3, [r3, #12]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 ff90 	bl	800ae80 <USBH_LL_GetURBState>
 8008f60:	4603      	mov	r3, r0
 8008f62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008f64:	7cfb      	ldrb	r3, [r7, #19]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d129      	bne.n	8008fbe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	7b1b      	ldrb	r3, [r3, #12]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fef3 	bl	800ad5c <USBH_LL_GetLastXferSize>
 8008f76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d016      	beq.n	8008fb0 <CDC_ProcessReception+0x9e>
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	8b5b      	ldrh	r3, [r3, #26]
 8008f86:	461a      	mov	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d110      	bne.n	8008fb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad2      	subs	r2, r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2203      	movs	r2, #3
 8008faa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008fae:	e006      	b.n	8008fbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f80f 	bl	8008fdc <USBH_CDC_ReceiveCallback>
      break;
 8008fbe:	bf00      	nop
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009018:	2302      	movs	r3, #2
 800901a:	e029      	b.n	8009070 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	79fa      	ldrb	r2, [r7, #7]
 8009020:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f81f 	bl	8009078 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f001 fdc3 	bl	800abf4 <USBH_LL_Init>

  return USBH_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e009      	b.n	800909e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	33e0      	adds	r3, #224	@ 0xe0
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b0f      	cmp	r3, #15
 80090a2:	d9f2      	bls.n	800908a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e009      	b.n	80090be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c4:	d3f1      	bcc.n	80090aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2240      	movs	r2, #64	@ 0x40
 80090ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	331c      	adds	r3, #28
 8009116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f002 f81d 	bl	800b15c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f002 f814 	bl	800b15c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800913a:	2212      	movs	r2, #18
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f002 f80c 	bl	800b15c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800914a:	223e      	movs	r2, #62	@ 0x3e
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f002 f804 	bl	800b15c <memset>

  return USBH_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10e      	bne.n	800919a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	33de      	adds	r3, #222	@ 0xde
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73fb      	strb	r3, [r7, #15]
 8009198:	e004      	b.n	80091a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800919a:	2302      	movs	r3, #2
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e001      	b.n	80091a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d204      	bcs.n	80091d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80091d6:	e001      	b.n	80091dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80091d8:	2302      	movs	r3, #2
 80091da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b087      	sub	sp, #28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	4608      	mov	r0, r1
 80091f4:	4611      	mov	r1, r2
 80091f6:	461a      	mov	r2, r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	70fb      	strb	r3, [r7, #3]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70bb      	strb	r3, [r7, #2]
 8009200:	4613      	mov	r3, r2
 8009202:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009212:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009214:	e025      	b.n	8009262 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	221a      	movs	r2, #26
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	3308      	adds	r3, #8
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	3302      	adds	r3, #2
 8009226:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	795b      	ldrb	r3, [r3, #5]
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	429a      	cmp	r2, r3
 8009230:	d002      	beq.n	8009238 <USBH_FindInterface+0x4e>
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	2bff      	cmp	r3, #255	@ 0xff
 8009236:	d111      	bne.n	800925c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800923c:	78ba      	ldrb	r2, [r7, #2]
 800923e:	429a      	cmp	r2, r3
 8009240:	d002      	beq.n	8009248 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009242:	78bb      	ldrb	r3, [r7, #2]
 8009244:	2bff      	cmp	r3, #255	@ 0xff
 8009246:	d109      	bne.n	800925c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800924c:	787a      	ldrb	r2, [r7, #1]
 800924e:	429a      	cmp	r2, r3
 8009250:	d002      	beq.n	8009258 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009252:	787b      	ldrb	r3, [r7, #1]
 8009254:	2bff      	cmp	r3, #255	@ 0xff
 8009256:	d101      	bne.n	800925c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	e006      	b.n	800926a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	3301      	adds	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d9d6      	bls.n	8009216 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009268:	23ff      	movs	r3, #255	@ 0xff
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fcf4 	bl	800ac6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009284:	2101      	movs	r1, #1
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fe0d 	bl	800aea6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af04      	add	r7, sp, #16
 800929e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80092a0:	2302      	movs	r3, #2
 80092a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d102      	bne.n	80092ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2203      	movs	r2, #3
 80092b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b0b      	cmp	r3, #11
 80092c2:	f200 81bb 	bhi.w	800963c <USBH_Process+0x3a4>
 80092c6:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <USBH_Process+0x34>)
 80092c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092cc:	080092fd 	.word	0x080092fd
 80092d0:	0800932f 	.word	0x0800932f
 80092d4:	08009397 	.word	0x08009397
 80092d8:	080095d7 	.word	0x080095d7
 80092dc:	0800963d 	.word	0x0800963d
 80092e0:	08009437 	.word	0x08009437
 80092e4:	0800957d 	.word	0x0800957d
 80092e8:	0800946d 	.word	0x0800946d
 80092ec:	0800948d 	.word	0x0800948d
 80092f0:	080094ab 	.word	0x080094ab
 80092f4:	080094ef 	.word	0x080094ef
 80092f8:	080095bf 	.word	0x080095bf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 819b 	beq.w	8009640 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009310:	20c8      	movs	r0, #200	@ 0xc8
 8009312:	f001 fe12 	bl	800af3a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fd05 	bl	800ad26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800932c:	e188      	b.n	8009640 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009334:	2b01      	cmp	r3, #1
 8009336:	d107      	bne.n	8009348 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009346:	e18a      	b.n	800965e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800934e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009352:	d914      	bls.n	800937e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800935a:	3301      	adds	r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800936a:	2b03      	cmp	r3, #3
 800936c:	d903      	bls.n	8009376 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220d      	movs	r2, #13
 8009372:	701a      	strb	r2, [r3, #0]
      break;
 8009374:	e173      	b.n	800965e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
      break;
 800937c:	e16f      	b.n	800965e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009384:	f103 020a 	add.w	r2, r3, #10
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800938e:	200a      	movs	r0, #10
 8009390:	f001 fdd3 	bl	800af3a <USBH_Delay>
      break;
 8009394:	e163      	b.n	800965e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093a6:	2104      	movs	r1, #4
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80093ac:	2064      	movs	r0, #100	@ 0x64
 80093ae:	f001 fdc4 	bl	800af3a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fc90 	bl	800acd8 <USBH_LL_GetSpeed>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2205      	movs	r2, #5
 80093c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80093c8:	2100      	movs	r1, #0
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 fa9b 	bl	800a906 <USBH_AllocPipe>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80093d8:	2180      	movs	r1, #128	@ 0x80
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fa93 	bl	800a906 <USBH_AllocPipe>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7919      	ldrb	r1, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80093fc:	9202      	str	r2, [sp, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	9201      	str	r2, [sp, #4]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	4603      	mov	r3, r0
 8009406:	2280      	movs	r2, #128	@ 0x80
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fa4d 	bl	800a8a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7959      	ldrb	r1, [r3, #5]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009422:	9202      	str	r2, [sp, #8]
 8009424:	2200      	movs	r2, #0
 8009426:	9201      	str	r2, [sp, #4]
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4603      	mov	r3, r0
 800942c:	2200      	movs	r2, #0
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fa3a 	bl	800a8a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009434:	e113      	b.n	800965e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f916 	bl	8009668 <USBH_HandleEnum>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	f040 80fd 	bne.w	8009644 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009458:	2b01      	cmp	r3, #1
 800945a:	d103      	bne.n	8009464 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2208      	movs	r2, #8
 8009460:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009462:	e0ef      	b.n	8009644 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2207      	movs	r2, #7
 8009468:	701a      	strb	r2, [r3, #0]
      break;
 800946a:	e0eb      	b.n	8009644 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80e8 	beq.w	8009648 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800947e:	2101      	movs	r1, #1
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2208      	movs	r2, #8
 8009488:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800948a:	e0dd      	b.n	8009648 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc3a 	bl	8009d0e <USBH_SetCfg>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	f040 80d5 	bne.w	800964c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2209      	movs	r2, #9
 80094a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094a8:	e0d0      	b.n	800964c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d016      	beq.n	80094e6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80094b8:	2101      	movs	r1, #1
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fc4a 	bl	8009d54 <USBH_SetFeature>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	220a      	movs	r2, #10
 80094d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094d2:	e0bd      	b.n	8009650 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b03      	cmp	r3, #3
 80094da:	f040 80b9 	bne.w	8009650 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	220a      	movs	r2, #10
 80094e2:	701a      	strb	r2, [r3, #0]
      break;
 80094e4:	e0b4      	b.n	8009650 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220a      	movs	r2, #10
 80094ea:	701a      	strb	r2, [r3, #0]
      break;
 80094ec:	e0b0      	b.n	8009650 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80ad 	beq.w	8009654 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
 8009506:	e016      	b.n	8009536 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009508:	7bfa      	ldrb	r2, [r7, #15]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32de      	adds	r2, #222	@ 0xde
 800950e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009512:	791a      	ldrb	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800951a:	429a      	cmp	r2, r3
 800951c:	d108      	bne.n	8009530 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800951e:	7bfa      	ldrb	r2, [r7, #15]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	32de      	adds	r2, #222	@ 0xde
 8009524:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800952e:	e005      	b.n	800953c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	3301      	adds	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0e5      	beq.n	8009508 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d016      	beq.n	8009574 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d109      	bne.n	800956c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2206      	movs	r2, #6
 800955c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009564:	2103      	movs	r1, #3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800956a:	e073      	b.n	8009654 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220d      	movs	r2, #13
 8009570:	701a      	strb	r2, [r3, #0]
      break;
 8009572:	e06f      	b.n	8009654 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220d      	movs	r2, #13
 8009578:	701a      	strb	r2, [r3, #0]
      break;
 800957a:	e06b      	b.n	8009654 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d017      	beq.n	80095b6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220b      	movs	r2, #11
 80095a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095a4:	e058      	b.n	8009658 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d154      	bne.n	8009658 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	220d      	movs	r2, #13
 80095b2:	701a      	strb	r2, [r3, #0]
      break;
 80095b4:	e050      	b.n	8009658 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220d      	movs	r2, #13
 80095ba:	701a      	strb	r2, [r3, #0]
      break;
 80095bc:	e04c      	b.n	8009658 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d049      	beq.n	800965c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
      }
      break;
 80095d4:	e042      	b.n	800965c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff fd4a 	bl	8009078 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009612:	2105      	movs	r1, #5
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b01      	cmp	r3, #1
 8009622:	d107      	bne.n	8009634 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fe22 	bl	8009276 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009632:	e014      	b.n	800965e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 fb19 	bl	800ac6c <USBH_LL_Start>
      break;
 800963a:	e010      	b.n	800965e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800963c:	bf00      	nop
 800963e:	e00e      	b.n	800965e <USBH_Process+0x3c6>
      break;
 8009640:	bf00      	nop
 8009642:	e00c      	b.n	800965e <USBH_Process+0x3c6>
      break;
 8009644:	bf00      	nop
 8009646:	e00a      	b.n	800965e <USBH_Process+0x3c6>
    break;
 8009648:	bf00      	nop
 800964a:	e008      	b.n	800965e <USBH_Process+0x3c6>
      break;
 800964c:	bf00      	nop
 800964e:	e006      	b.n	800965e <USBH_Process+0x3c6>
      break;
 8009650:	bf00      	nop
 8009652:	e004      	b.n	800965e <USBH_Process+0x3c6>
      break;
 8009654:	bf00      	nop
 8009656:	e002      	b.n	800965e <USBH_Process+0x3c6>
      break;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <USBH_Process+0x3c6>
      break;
 800965c:	bf00      	nop
  }
  return USBH_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af04      	add	r7, sp, #16
 800966e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009674:	2301      	movs	r3, #1
 8009676:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b07      	cmp	r3, #7
 800967e:	f200 81bd 	bhi.w	80099fc <USBH_HandleEnum+0x394>
 8009682:	a201      	add	r2, pc, #4	@ (adr r2, 8009688 <USBH_HandleEnum+0x20>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096a9 	.word	0x080096a9
 800968c:	08009763 	.word	0x08009763
 8009690:	080097cd 	.word	0x080097cd
 8009694:	08009857 	.word	0x08009857
 8009698:	080098c1 	.word	0x080098c1
 800969c:	08009931 	.word	0x08009931
 80096a0:	08009977 	.word	0x08009977
 80096a4:	080099bd 	.word	0x080099bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80096a8:	2108      	movs	r1, #8
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fa4c 	bl	8009b48 <USBH_Get_DevDesc>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d12e      	bne.n	8009718 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7919      	ldrb	r1, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80096de:	9202      	str	r2, [sp, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	9201      	str	r2, [sp, #4]
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4603      	mov	r3, r0
 80096e8:	2280      	movs	r2, #128	@ 0x80
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f8dc 	bl	800a8a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7959      	ldrb	r1, [r3, #5]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009704:	9202      	str	r2, [sp, #8]
 8009706:	2200      	movs	r2, #0
 8009708:	9201      	str	r2, [sp, #4]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	4603      	mov	r3, r0
 800970e:	2200      	movs	r2, #0
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 f8c9 	bl	800a8a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009716:	e173      	b.n	8009a00 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b03      	cmp	r3, #3
 800971c:	f040 8170 	bne.w	8009a00 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009726:	3301      	adds	r3, #1
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009736:	2b03      	cmp	r3, #3
 8009738:	d903      	bls.n	8009742 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	220d      	movs	r2, #13
 800973e:	701a      	strb	r2, [r3, #0]
      break;
 8009740:	e15e      	b.n	8009a00 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	795b      	ldrb	r3, [r3, #5]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f8fd 	bl	800a948 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	791b      	ldrb	r3, [r3, #4]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f8f7 	bl	800a948 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
      break;
 8009760:	e14e      	b.n	8009a00 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009762:	2112      	movs	r1, #18
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f9ef 	bl	8009b48 <USBH_Get_DevDesc>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800977a:	e143      	b.n	8009a04 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b03      	cmp	r3, #3
 8009780:	f040 8140 	bne.w	8009a04 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800978a:	3301      	adds	r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800979a:	2b03      	cmp	r3, #3
 800979c:	d903      	bls.n	80097a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	220d      	movs	r2, #13
 80097a2:	701a      	strb	r2, [r3, #0]
      break;
 80097a4:	e12e      	b.n	8009a04 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	795b      	ldrb	r3, [r3, #5]
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 f8cb 	bl	800a948 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	791b      	ldrb	r3, [r3, #4]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 f8c5 	bl	800a948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
      break;
 80097ca:	e11b      	b.n	8009a04 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80097cc:	2101      	movs	r1, #1
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa79 	bl	8009cc6 <USBH_SetAddress>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d130      	bne.n	8009840 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80097de:	2002      	movs	r0, #2
 80097e0:	f001 fbab 	bl	800af3a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2203      	movs	r2, #3
 80097f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	7919      	ldrb	r1, [r3, #4]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009806:	9202      	str	r2, [sp, #8]
 8009808:	2200      	movs	r2, #0
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	4603      	mov	r3, r0
 8009810:	2280      	movs	r2, #128	@ 0x80
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 f848 	bl	800a8a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7959      	ldrb	r1, [r3, #5]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800982c:	9202      	str	r2, [sp, #8]
 800982e:	2200      	movs	r2, #0
 8009830:	9201      	str	r2, [sp, #4]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	4603      	mov	r3, r0
 8009836:	2200      	movs	r2, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f835 	bl	800a8a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800983e:	e0e3      	b.n	8009a08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2b03      	cmp	r3, #3
 8009844:	f040 80e0 	bne.w	8009a08 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	220d      	movs	r2, #13
 800984c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	705a      	strb	r2, [r3, #1]
      break;
 8009854:	e0d8      	b.n	8009a08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009856:	2109      	movs	r1, #9
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9a1 	bl	8009ba0 <USBH_Get_CfgDesc>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2204      	movs	r2, #4
 800986c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800986e:	e0cd      	b.n	8009a0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b03      	cmp	r3, #3
 8009874:	f040 80ca 	bne.w	8009a0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800987e:	3301      	adds	r3, #1
 8009880:	b2da      	uxtb	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800988e:	2b03      	cmp	r3, #3
 8009890:	d903      	bls.n	800989a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	220d      	movs	r2, #13
 8009896:	701a      	strb	r2, [r3, #0]
      break;
 8009898:	e0b8      	b.n	8009a0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	795b      	ldrb	r3, [r3, #5]
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 f851 	bl	800a948 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	791b      	ldrb	r3, [r3, #4]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 f84b 	bl	800a948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
      break;
 80098be:	e0a5      	b.n	8009a0c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f969 	bl	8009ba0 <USBH_Get_CfgDesc>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d103      	bne.n	80098e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2205      	movs	r2, #5
 80098dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098de:	e097      	b.n	8009a10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	f040 8094 	bne.w	8009a10 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d903      	bls.n	800990a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220d      	movs	r2, #13
 8009906:	701a      	strb	r2, [r3, #0]
      break;
 8009908:	e082      	b.n	8009a10 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	795b      	ldrb	r3, [r3, #5]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 f819 	bl	800a948 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f813 	bl	800a948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
      break;
 800992e:	e06f      	b.n	8009a10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009936:	2b00      	cmp	r3, #0
 8009938:	d019      	beq.n	800996e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009946:	23ff      	movs	r3, #255	@ 0xff
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f953 	bl	8009bf4 <USBH_Get_StringDesc>
 800994e:	4603      	mov	r3, r0
 8009950:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2206      	movs	r2, #6
 800995c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800995e:	e059      	b.n	8009a14 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b03      	cmp	r3, #3
 8009964:	d156      	bne.n	8009a14 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2206      	movs	r2, #6
 800996a:	705a      	strb	r2, [r3, #1]
      break;
 800996c:	e052      	b.n	8009a14 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2206      	movs	r2, #6
 8009972:	705a      	strb	r2, [r3, #1]
      break;
 8009974:	e04e      	b.n	8009a14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800997c:	2b00      	cmp	r3, #0
 800997e:	d019      	beq.n	80099b4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800998c:	23ff      	movs	r3, #255	@ 0xff
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f930 	bl	8009bf4 <USBH_Get_StringDesc>
 8009994:	4603      	mov	r3, r0
 8009996:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d103      	bne.n	80099a6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2207      	movs	r2, #7
 80099a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099a4:	e038      	b.n	8009a18 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d135      	bne.n	8009a18 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2207      	movs	r2, #7
 80099b0:	705a      	strb	r2, [r3, #1]
      break;
 80099b2:	e031      	b.n	8009a18 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2207      	movs	r2, #7
 80099b8:	705a      	strb	r2, [r3, #1]
      break;
 80099ba:	e02d      	b.n	8009a18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d017      	beq.n	80099f6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80099d2:	23ff      	movs	r3, #255	@ 0xff
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f90d 	bl	8009bf4 <USBH_Get_StringDesc>
 80099da:	4603      	mov	r3, r0
 80099dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80099e8:	e018      	b.n	8009a1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d115      	bne.n	8009a1c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
      break;
 80099f4:	e012      	b.n	8009a1c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
      break;
 80099fa:	e00f      	b.n	8009a1c <USBH_HandleEnum+0x3b4>

    default:
      break;
 80099fc:	bf00      	nop
 80099fe:	e00e      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a00:	bf00      	nop
 8009a02:	e00c      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a04:	bf00      	nop
 8009a06:	e00a      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a08:	bf00      	nop
 8009a0a:	e008      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a0c:	bf00      	nop
 8009a0e:	e006      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a10:	bf00      	nop
 8009a12:	e004      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a14:	bf00      	nop
 8009a16:	e002      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e000      	b.n	8009a1e <USBH_HandleEnum+0x3b6>
      break;
 8009a1c:	bf00      	nop
  }
  return Status;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f804 	bl	8009a6a <USBH_HandleSof>
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b0b      	cmp	r3, #11
 8009a7a:	d10a      	bne.n	8009a92 <USBH_HandleSof+0x28>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
  }
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009aaa:	bf00      	nop
}
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009ac6:	bf00      	nop
}
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 f8be 	bl	800aca2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 ff0b 	bl	800a948 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	795b      	ldrb	r3, [r3, #5]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 ff05 	bl	800a948 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009b54:	887b      	ldrh	r3, [r7, #2]
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b5a:	d901      	bls.n	8009b60 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e01b      	b.n	8009b98 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f872 	bl	8009c5c <USBH_GetDescriptor>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009b88:	887a      	ldrh	r2, [r7, #2]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f929 	bl	8009de4 <USBH_ParseDevDesc>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	331c      	adds	r3, #28
 8009bb0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009bb2:	887b      	ldrh	r3, [r7, #2]
 8009bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb8:	d901      	bls.n	8009bbe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e016      	b.n	8009bec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009bbe:	887b      	ldrh	r3, [r7, #2]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f846 	bl	8009c5c <USBH_GetDescriptor>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d107      	bne.n	8009bea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009bda:	887b      	ldrh	r3, [r7, #2]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f9af 	bl	8009f44 <USBH_ParseCfgDesc>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af02      	add	r7, sp, #8
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	607a      	str	r2, [r7, #4]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	460b      	mov	r3, r1
 8009c02:	72fb      	strb	r3, [r7, #11]
 8009c04:	4613      	mov	r3, r2
 8009c06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009c08:	893b      	ldrh	r3, [r7, #8]
 8009c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c0e:	d802      	bhi.n	8009c16 <USBH_Get_StringDesc+0x22>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e01c      	b.n	8009c54 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009c1a:	7afb      	ldrb	r3, [r7, #11]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009c22:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009c2a:	893b      	ldrh	r3, [r7, #8]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f812 	bl	8009c5c <USBH_GetDescriptor>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d107      	bne.n	8009c52 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c48:	893a      	ldrh	r2, [r7, #8]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fb8d 	bl	800a36c <USBH_ParseStringDesc>
  }

  return status;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	607b      	str	r3, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	72fb      	strb	r3, [r7, #11]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	789b      	ldrb	r3, [r3, #2]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d11c      	bne.n	8009cb0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2206      	movs	r2, #6
 8009c86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	893a      	ldrh	r2, [r7, #8]
 8009c8c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c8e:	893b      	ldrh	r3, [r7, #8]
 8009c90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c98:	d104      	bne.n	8009ca4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ca0:	829a      	strh	r2, [r3, #20]
 8009ca2:	e002      	b.n	8009caa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8b3a      	ldrh	r2, [r7, #24]
 8009cae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009cb0:	8b3b      	ldrh	r3, [r7, #24]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fba5 	bl	800a406 <USBH_CtlReq>
 8009cbc:	4603      	mov	r3, r0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	789b      	ldrb	r3, [r3, #2]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d10f      	bne.n	8009cfa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2205      	movs	r2, #5
 8009ce4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fb81 	bl	800a406 <USBH_CtlReq>
 8009d04:	4603      	mov	r3, r0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	460b      	mov	r3, r1
 8009d18:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	789b      	ldrb	r3, [r3, #2]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10e      	bne.n	8009d40 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2209      	movs	r2, #9
 8009d2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	887a      	ldrh	r2, [r7, #2]
 8009d32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fb5e 	bl	800a406 <USBH_CtlReq>
 8009d4a:	4603      	mov	r3, r0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	789b      	ldrb	r3, [r3, #2]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d10f      	bne.n	8009d88 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2203      	movs	r2, #3
 8009d72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fb3a 	bl	800a406 <USBH_CtlReq>
 8009d92:	4603      	mov	r3, r0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	789b      	ldrb	r3, [r3, #2]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d10f      	bne.n	8009dd0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fb16 	bl	800a406 <USBH_CtlReq>
 8009dda:	4603      	mov	r3, r0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009df8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009e04:	2302      	movs	r3, #2
 8009e06:	e094      	b.n	8009f32 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	785a      	ldrb	r2, [r3, #1]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	3302      	adds	r3, #2
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	3303      	adds	r3, #3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	791a      	ldrb	r2, [r3, #4]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	795a      	ldrb	r2, [r3, #5]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	799a      	ldrb	r2, [r3, #6]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	79da      	ldrb	r2, [r3, #7]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d11b      	bne.n	8009e9e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	79db      	ldrb	r3, [r3, #7]
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	dc0f      	bgt.n	8009e8e <USBH_ParseDevDesc+0xaa>
 8009e6e:	2b08      	cmp	r3, #8
 8009e70:	db0f      	blt.n	8009e92 <USBH_ParseDevDesc+0xae>
 8009e72:	3b08      	subs	r3, #8
 8009e74:	4a32      	ldr	r2, [pc, #200]	@ (8009f40 <USBH_ParseDevDesc+0x15c>)
 8009e76:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bf14      	ite	ne
 8009e82:	2301      	movne	r3, #1
 8009e84:	2300      	moveq	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <USBH_ParseDevDesc+0xb6>
 8009e8c:	e001      	b.n	8009e92 <USBH_ParseDevDesc+0xae>
 8009e8e:	2b40      	cmp	r3, #64	@ 0x40
 8009e90:	d003      	beq.n	8009e9a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2208      	movs	r2, #8
 8009e96:	71da      	strb	r2, [r3, #7]
        break;
 8009e98:	e000      	b.n	8009e9c <USBH_ParseDevDesc+0xb8>
        break;
 8009e9a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009e9c:	e00e      	b.n	8009ebc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d107      	bne.n	8009eb8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	79db      	ldrb	r3, [r3, #7]
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d005      	beq.n	8009ebc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	71da      	strb	r2, [r3, #7]
 8009eb6:	e001      	b.n	8009ebc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009ebc:	88fb      	ldrh	r3, [r7, #6]
 8009ebe:	2b08      	cmp	r3, #8
 8009ec0:	d936      	bls.n	8009f30 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3309      	adds	r3, #9
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	330a      	adds	r3, #10
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	330b      	adds	r3, #11
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	330d      	adds	r3, #13
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	021b      	lsls	r3, r3, #8
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	7b9a      	ldrb	r2, [r3, #14]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7bda      	ldrb	r2, [r3, #15]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	7c1a      	ldrb	r2, [r3, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	7c5a      	ldrb	r2, [r3, #17]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	01000101 	.word	0x01000101

08009f44 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08c      	sub	sp, #48	@ 0x30
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009f58:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009f72:	2302      	movs	r3, #2
 8009f74:	e0da      	b.n	800a12c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d002      	beq.n	8009f88 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	2209      	movs	r2, #9
 8009f86:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	781a      	ldrb	r2, [r3, #0]
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	785a      	ldrb	r2, [r3, #1]
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	3303      	adds	r3, #3
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb2:	bf28      	it	cs
 8009fb4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	791a      	ldrb	r2, [r3, #4]
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	795a      	ldrb	r2, [r3, #5]
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	799a      	ldrb	r2, [r3, #6]
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	79da      	ldrb	r2, [r3, #7]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	7a1a      	ldrb	r2, [r3, #8]
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	2b09      	cmp	r3, #9
 8009fea:	f240 809d 	bls.w	800a128 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009fee:	2309      	movs	r3, #9
 8009ff0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ff6:	e081      	b.n	800a0fc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ff8:	f107 0316 	add.w	r3, r7, #22
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a000:	f000 f9e7 	bl	800a3d2 <USBH_GetNextDesc>
 800a004:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d176      	bne.n	800a0fc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b09      	cmp	r3, #9
 800a014:	d002      	beq.n	800a01c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	2209      	movs	r2, #9
 800a01a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a01c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a020:	221a      	movs	r2, #26
 800a022:	fb02 f303 	mul.w	r3, r2, r3
 800a026:	3308      	adds	r3, #8
 800a028:	6a3a      	ldr	r2, [r7, #32]
 800a02a:	4413      	add	r3, r2
 800a02c:	3302      	adds	r3, #2
 800a02e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a032:	69f8      	ldr	r0, [r7, #28]
 800a034:	f000 f87e 	bl	800a134 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a042:	e043      	b.n	800a0cc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a044:	f107 0316 	add.w	r3, r7, #22
 800a048:	4619      	mov	r1, r3
 800a04a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a04c:	f000 f9c1 	bl	800a3d2 <USBH_GetNextDesc>
 800a050:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b05      	cmp	r3, #5
 800a058:	d138      	bne.n	800a0cc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	795b      	ldrb	r3, [r3, #5]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d113      	bne.n	800a08a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a066:	2b02      	cmp	r3, #2
 800a068:	d003      	beq.n	800a072 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	799b      	ldrb	r3, [r3, #6]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d10b      	bne.n	800a08a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	79db      	ldrb	r3, [r3, #7]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <USBH_ParseCfgDesc+0x14e>
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b09      	cmp	r3, #9
 800a080:	d007      	beq.n	800a092 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	2209      	movs	r2, #9
 800a086:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a088:	e003      	b.n	800a092 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	2207      	movs	r2, #7
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	e000      	b.n	800a094 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a092:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a098:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a09c:	3201      	adds	r2, #1
 800a09e:	00d2      	lsls	r2, r2, #3
 800a0a0:	211a      	movs	r1, #26
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a0b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0b4:	69b9      	ldr	r1, [r7, #24]
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 f870 	bl	800a19c <USBH_ParseEPDesc>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a0c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d204      	bcs.n	800a0e2 <USBH_ParseCfgDesc+0x19e>
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	885a      	ldrh	r2, [r3, #2]
 800a0dc:	8afb      	ldrh	r3, [r7, #22]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d8b0      	bhi.n	800a044 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	791b      	ldrb	r3, [r3, #4]
 800a0e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d201      	bcs.n	800a0f2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e01c      	b.n	800a12c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a100:	2b01      	cmp	r3, #1
 800a102:	d805      	bhi.n	800a110 <USBH_ParseCfgDesc+0x1cc>
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	885a      	ldrh	r2, [r3, #2]
 800a108:	8afb      	ldrh	r3, [r7, #22]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	f63f af74 	bhi.w	8009ff8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	791b      	ldrb	r3, [r3, #4]
 800a114:	2b02      	cmp	r3, #2
 800a116:	bf28      	it	cs
 800a118:	2302      	movcs	r3, #2
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a120:	429a      	cmp	r2, r3
 800a122:	d201      	bcs.n	800a128 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a124:	2303      	movs	r3, #3
 800a126:	e001      	b.n	800a12c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3730      	adds	r7, #48	@ 0x30
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	785a      	ldrb	r2, [r3, #1]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	789a      	ldrb	r2, [r3, #2]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	78da      	ldrb	r2, [r3, #3]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	3304      	adds	r3, #4
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b02      	cmp	r3, #2
 800a166:	bf28      	it	cs
 800a168:	2302      	movcs	r3, #2
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	795a      	ldrb	r2, [r3, #5]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	799a      	ldrb	r2, [r3, #6]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	79da      	ldrb	r2, [r3, #7]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	7a1a      	ldrb	r2, [r3, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	721a      	strb	r2, [r3, #8]
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	785a      	ldrb	r2, [r3, #1]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	789a      	ldrb	r2, [r3, #2]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	78da      	ldrb	r2, [r3, #3]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3305      	adds	r3, #5
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	799a      	ldrb	r2, [r3, #6]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	889b      	ldrh	r3, [r3, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1fe:	d804      	bhi.n	800a20a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a208:	d901      	bls.n	800a20e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a20a:	2303      	movs	r3, #3
 800a20c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a214:	2b00      	cmp	r3, #0
 800a216:	d136      	bne.n	800a286 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	78db      	ldrb	r3, [r3, #3]
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d108      	bne.n	800a236 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	889b      	ldrh	r3, [r3, #4]
 800a228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a22c:	f240 8097 	bls.w	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a230:	2303      	movs	r3, #3
 800a232:	75fb      	strb	r3, [r7, #23]
 800a234:	e093      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	78db      	ldrb	r3, [r3, #3]
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d107      	bne.n	800a252 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	889b      	ldrh	r3, [r3, #4]
 800a246:	2b40      	cmp	r3, #64	@ 0x40
 800a248:	f240 8089 	bls.w	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a24c:	2303      	movs	r3, #3
 800a24e:	75fb      	strb	r3, [r7, #23]
 800a250:	e085      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	78db      	ldrb	r3, [r3, #3]
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d005      	beq.n	800a26a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	78db      	ldrb	r3, [r3, #3]
 800a262:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a266:	2b03      	cmp	r3, #3
 800a268:	d10a      	bne.n	800a280 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	799b      	ldrb	r3, [r3, #6]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <USBH_ParseEPDesc+0xde>
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	799b      	ldrb	r3, [r3, #6]
 800a276:	2b10      	cmp	r3, #16
 800a278:	d970      	bls.n	800a35c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a27a:	2303      	movs	r3, #3
 800a27c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a27e:	e06d      	b.n	800a35c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a280:	2303      	movs	r3, #3
 800a282:	75fb      	strb	r3, [r7, #23]
 800a284:	e06b      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d13c      	bne.n	800a30a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	78db      	ldrb	r3, [r3, #3]
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d005      	beq.n	800a2a8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	78db      	ldrb	r3, [r3, #3]
 800a2a0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	889b      	ldrh	r3, [r3, #4]
 800a2ac:	2b40      	cmp	r3, #64	@ 0x40
 800a2ae:	d956      	bls.n	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2b4:	e053      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	78db      	ldrb	r3, [r3, #3]
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10e      	bne.n	800a2e0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	799b      	ldrb	r3, [r3, #6]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d803      	bhi.n	800a2da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a2d6:	2b40      	cmp	r3, #64	@ 0x40
 800a2d8:	d941      	bls.n	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	75fb      	strb	r3, [r7, #23]
 800a2de:	e03e      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d10b      	bne.n	800a304 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	799b      	ldrb	r3, [r3, #6]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d004      	beq.n	800a2fe <USBH_ParseEPDesc+0x162>
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	889b      	ldrh	r3, [r3, #4]
 800a2f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2fc:	d32f      	bcc.n	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2fe:	2303      	movs	r3, #3
 800a300:	75fb      	strb	r3, [r7, #23]
 800a302:	e02c      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a304:	2303      	movs	r3, #3
 800a306:	75fb      	strb	r3, [r7, #23]
 800a308:	e029      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a310:	2b02      	cmp	r3, #2
 800a312:	d120      	bne.n	800a356 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	78db      	ldrb	r3, [r3, #3]
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	889b      	ldrh	r3, [r3, #4]
 800a324:	2b08      	cmp	r3, #8
 800a326:	d01a      	beq.n	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a328:	2303      	movs	r3, #3
 800a32a:	75fb      	strb	r3, [r7, #23]
 800a32c:	e017      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	78db      	ldrb	r3, [r3, #3]
 800a332:	f003 0303 	and.w	r3, r3, #3
 800a336:	2b03      	cmp	r3, #3
 800a338:	d10a      	bne.n	800a350 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	799b      	ldrb	r3, [r3, #6]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <USBH_ParseEPDesc+0x1ae>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	889b      	ldrh	r3, [r3, #4]
 800a346:	2b08      	cmp	r3, #8
 800a348:	d909      	bls.n	800a35e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a34a:	2303      	movs	r3, #3
 800a34c:	75fb      	strb	r3, [r7, #23]
 800a34e:	e006      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a350:	2303      	movs	r3, #3
 800a352:	75fb      	strb	r3, [r7, #23]
 800a354:	e003      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a356:	2303      	movs	r3, #3
 800a358:	75fb      	strb	r3, [r7, #23]
 800a35a:	e000      	b.n	800a35e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a35c:	bf00      	nop
  }

  return status;
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a360:	4618      	mov	r0, r3
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d120      	bne.n	800a3c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	1e9a      	subs	r2, r3, #2
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bf28      	it	cs
 800a390:	4613      	movcs	r3, r2
 800a392:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3302      	adds	r3, #2
 800a398:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a39a:	2300      	movs	r3, #0
 800a39c:	82fb      	strh	r3, [r7, #22]
 800a39e:	e00b      	b.n	800a3b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3a0:	8afb      	ldrh	r3, [r7, #22]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	781a      	ldrb	r2, [r3, #0]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3b2:	8afb      	ldrh	r3, [r7, #22]
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	82fb      	strh	r3, [r7, #22]
 800a3b8:	8afa      	ldrh	r2, [r7, #22]
 800a3ba:	8abb      	ldrh	r3, [r7, #20]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d3ef      	bcc.n	800a3a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	4613      	mov	r3, r2
 800a412:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a414:	2301      	movs	r3, #1
 800a416:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d002      	beq.n	800a426 <USBH_CtlReq+0x20>
 800a420:	2b02      	cmp	r3, #2
 800a422:	d00f      	beq.n	800a444 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a424:	e027      	b.n	800a476 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	88fa      	ldrh	r2, [r7, #6]
 800a430:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2202      	movs	r2, #2
 800a43c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a43e:	2301      	movs	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]
      break;
 800a442:	e018      	b.n	800a476 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f81b 	bl	800a480 <USBH_HandleControl>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <USBH_CtlReq+0x54>
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	2b03      	cmp	r3, #3
 800a458:	d106      	bne.n	800a468 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	761a      	strb	r2, [r3, #24]
      break;
 800a466:	e005      	b.n	800a474 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d102      	bne.n	800a474 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	709a      	strb	r2, [r3, #2]
      break;
 800a474:	bf00      	nop
  }
  return status;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7e1b      	ldrb	r3, [r3, #24]
 800a494:	3b01      	subs	r3, #1
 800a496:	2b0a      	cmp	r3, #10
 800a498:	f200 8156 	bhi.w	800a748 <USBH_HandleControl+0x2c8>
 800a49c:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <USBH_HandleControl+0x24>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	0800a4eb 	.word	0x0800a4eb
 800a4ac:	0800a555 	.word	0x0800a555
 800a4b0:	0800a57b 	.word	0x0800a57b
 800a4b4:	0800a5b3 	.word	0x0800a5b3
 800a4b8:	0800a5dd 	.word	0x0800a5dd
 800a4bc:	0800a62f 	.word	0x0800a62f
 800a4c0:	0800a651 	.word	0x0800a651
 800a4c4:	0800a68d 	.word	0x0800a68d
 800a4c8:	0800a6b3 	.word	0x0800a6b3
 800a4cc:	0800a6f1 	.word	0x0800a6f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0110 	add.w	r1, r3, #16
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	795b      	ldrb	r3, [r3, #5]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f943 	bl	800a768 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	761a      	strb	r2, [r3, #24]
      break;
 800a4e8:	e139      	b.n	800a75e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	795b      	ldrb	r3, [r3, #5]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fcc5 	bl	800ae80 <USBH_LL_GetURBState>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d11e      	bne.n	800a53e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7c1b      	ldrb	r3, [r3, #16]
 800a504:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a508:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	8adb      	ldrh	r3, [r3, #22]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a512:	7b7b      	ldrb	r3, [r7, #13]
 800a514:	2b80      	cmp	r3, #128	@ 0x80
 800a516:	d103      	bne.n	800a520 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2203      	movs	r2, #3
 800a51c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a51e:	e115      	b.n	800a74c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2205      	movs	r2, #5
 800a524:	761a      	strb	r2, [r3, #24]
      break;
 800a526:	e111      	b.n	800a74c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a528:	7b7b      	ldrb	r3, [r7, #13]
 800a52a:	2b80      	cmp	r3, #128	@ 0x80
 800a52c:	d103      	bne.n	800a536 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2209      	movs	r2, #9
 800a532:	761a      	strb	r2, [r3, #24]
      break;
 800a534:	e10a      	b.n	800a74c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2207      	movs	r2, #7
 800a53a:	761a      	strb	r2, [r3, #24]
      break;
 800a53c:	e106      	b.n	800a74c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b04      	cmp	r3, #4
 800a542:	d003      	beq.n	800a54c <USBH_HandleControl+0xcc>
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	2b02      	cmp	r3, #2
 800a548:	f040 8100 	bne.w	800a74c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	220b      	movs	r2, #11
 800a550:	761a      	strb	r2, [r3, #24]
      break;
 800a552:	e0fb      	b.n	800a74c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6899      	ldr	r1, [r3, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	899a      	ldrh	r2, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	791b      	ldrb	r3, [r3, #4]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f93a 	bl	800a7e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2204      	movs	r2, #4
 800a576:	761a      	strb	r2, [r3, #24]
      break;
 800a578:	e0f1      	b.n	800a75e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	791b      	ldrb	r3, [r3, #4]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fc7d 	bl	800ae80 <USBH_LL_GetURBState>
 800a586:	4603      	mov	r3, r0
 800a588:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d102      	bne.n	800a596 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2209      	movs	r2, #9
 800a594:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b05      	cmp	r3, #5
 800a59a:	d102      	bne.n	800a5a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a59c:	2303      	movs	r3, #3
 800a59e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5a0:	e0d6      	b.n	800a750 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	f040 80d3 	bne.w	800a750 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	220b      	movs	r2, #11
 800a5ae:	761a      	strb	r2, [r3, #24]
      break;
 800a5b0:	e0ce      	b.n	800a750 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6899      	ldr	r1, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	899a      	ldrh	r2, [r3, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	795b      	ldrb	r3, [r3, #5]
 800a5be:	2001      	movs	r0, #1
 800a5c0:	9000      	str	r0, [sp, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f8ea 	bl	800a79c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2206      	movs	r2, #6
 800a5d8:	761a      	strb	r2, [r3, #24]
      break;
 800a5da:	e0c0      	b.n	800a75e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	795b      	ldrb	r3, [r3, #5]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fc4c 	bl	800ae80 <USBH_LL_GetURBState>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d103      	bne.n	800a5fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2207      	movs	r2, #7
 800a5f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5f8:	e0ac      	b.n	800a754 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	2b05      	cmp	r3, #5
 800a5fe:	d105      	bne.n	800a60c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	220c      	movs	r2, #12
 800a604:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a606:	2303      	movs	r3, #3
 800a608:	73fb      	strb	r3, [r7, #15]
      break;
 800a60a:	e0a3      	b.n	800a754 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d103      	bne.n	800a61a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2205      	movs	r2, #5
 800a616:	761a      	strb	r2, [r3, #24]
      break;
 800a618:	e09c      	b.n	800a754 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	f040 8099 	bne.w	800a754 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	220b      	movs	r2, #11
 800a626:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a628:	2302      	movs	r3, #2
 800a62a:	73fb      	strb	r3, [r7, #15]
      break;
 800a62c:	e092      	b.n	800a754 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	791b      	ldrb	r3, [r3, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	2100      	movs	r1, #0
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f8d5 	bl	800a7e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a642:	b29a      	uxth	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2208      	movs	r2, #8
 800a64c:	761a      	strb	r2, [r3, #24]

      break;
 800a64e:	e086      	b.n	800a75e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	791b      	ldrb	r3, [r3, #4]
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc12 	bl	800ae80 <USBH_LL_GetURBState>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d105      	bne.n	800a672 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	220d      	movs	r2, #13
 800a66a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a670:	e072      	b.n	800a758 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	2b04      	cmp	r3, #4
 800a676:	d103      	bne.n	800a680 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	220b      	movs	r2, #11
 800a67c:	761a      	strb	r2, [r3, #24]
      break;
 800a67e:	e06b      	b.n	800a758 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	2b05      	cmp	r3, #5
 800a684:	d168      	bne.n	800a758 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a686:	2303      	movs	r3, #3
 800a688:	73fb      	strb	r3, [r7, #15]
      break;
 800a68a:	e065      	b.n	800a758 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	795b      	ldrb	r3, [r3, #5]
 800a690:	2201      	movs	r2, #1
 800a692:	9200      	str	r2, [sp, #0]
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f87f 	bl	800a79c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	761a      	strb	r2, [r3, #24]
      break;
 800a6b0:	e055      	b.n	800a75e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	795b      	ldrb	r3, [r3, #5]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fbe1 	bl	800ae80 <USBH_LL_GetURBState>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d105      	bne.n	800a6d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	220d      	movs	r2, #13
 800a6d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6d2:	e043      	b.n	800a75c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d103      	bne.n	800a6e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2209      	movs	r2, #9
 800a6de:	761a      	strb	r2, [r3, #24]
      break;
 800a6e0:	e03c      	b.n	800a75c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d139      	bne.n	800a75c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	220b      	movs	r2, #11
 800a6ec:	761a      	strb	r2, [r3, #24]
      break;
 800a6ee:	e035      	b.n	800a75c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7e5b      	ldrb	r3, [r3, #25]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	765a      	strb	r2, [r3, #25]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7e5b      	ldrb	r3, [r3, #25]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d806      	bhi.n	800a712 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a710:	e025      	b.n	800a75e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a718:	2106      	movs	r1, #6
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	795b      	ldrb	r3, [r3, #5]
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f90c 	bl	800a948 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	791b      	ldrb	r3, [r3, #4]
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f906 	bl	800a948 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a742:	2302      	movs	r3, #2
 800a744:	73fb      	strb	r3, [r7, #15]
      break;
 800a746:	e00a      	b.n	800a75e <USBH_HandleControl+0x2de>

    default:
      break;
 800a748:	bf00      	nop
 800a74a:	e008      	b.n	800a75e <USBH_HandleControl+0x2de>
      break;
 800a74c:	bf00      	nop
 800a74e:	e006      	b.n	800a75e <USBH_HandleControl+0x2de>
      break;
 800a750:	bf00      	nop
 800a752:	e004      	b.n	800a75e <USBH_HandleControl+0x2de>
      break;
 800a754:	bf00      	nop
 800a756:	e002      	b.n	800a75e <USBH_HandleControl+0x2de>
      break;
 800a758:	bf00      	nop
 800a75a:	e000      	b.n	800a75e <USBH_HandleControl+0x2de>
      break;
 800a75c:	bf00      	nop
  }

  return status;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af04      	add	r7, sp, #16
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4613      	mov	r3, r2
 800a774:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a776:	79f9      	ldrb	r1, [r7, #7]
 800a778:	2300      	movs	r3, #0
 800a77a:	9303      	str	r3, [sp, #12]
 800a77c:	2308      	movs	r3, #8
 800a77e:	9302      	str	r3, [sp, #8]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	2300      	movs	r3, #0
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	2300      	movs	r3, #0
 800a78a:	2200      	movs	r2, #0
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fb46 	bl	800ae1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af04      	add	r7, sp, #16
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	80fb      	strh	r3, [r7, #6]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7c0:	7979      	ldrb	r1, [r7, #5]
 800a7c2:	7e3b      	ldrb	r3, [r7, #24]
 800a7c4:	9303      	str	r3, [sp, #12]
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	9302      	str	r3, [sp, #8]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fb21 	bl	800ae1e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b088      	sub	sp, #32
 800a7ea:	af04      	add	r7, sp, #16
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	80fb      	strh	r3, [r7, #6]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7fc:	7979      	ldrb	r1, [r7, #5]
 800a7fe:	2300      	movs	r3, #0
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	88fb      	ldrh	r3, [r7, #6]
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	2301      	movs	r3, #1
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	2201      	movs	r2, #1
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fb03 	bl	800ae1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a818:	2300      	movs	r3, #0

}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b088      	sub	sp, #32
 800a826:	af04      	add	r7, sp, #16
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	4611      	mov	r1, r2
 800a82e:	461a      	mov	r2, r3
 800a830:	460b      	mov	r3, r1
 800a832:	80fb      	strh	r3, [r7, #6]
 800a834:	4613      	mov	r3, r2
 800a836:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a846:	7979      	ldrb	r1, [r7, #5]
 800a848:	7e3b      	ldrb	r3, [r7, #24]
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	88fb      	ldrh	r3, [r7, #6]
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	2301      	movs	r3, #1
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2302      	movs	r3, #2
 800a85a:	2200      	movs	r2, #0
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fade 	bl	800ae1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af04      	add	r7, sp, #16
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	460b      	mov	r3, r1
 800a87c:	80fb      	strh	r3, [r7, #6]
 800a87e:	4613      	mov	r3, r2
 800a880:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a882:	7979      	ldrb	r1, [r7, #5]
 800a884:	2300      	movs	r3, #0
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2301      	movs	r3, #1
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2302      	movs	r3, #2
 800a896:	2201      	movs	r2, #1
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 fac0 	bl	800ae1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af04      	add	r7, sp, #16
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	70fb      	strb	r3, [r7, #3]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70bb      	strb	r3, [r7, #2]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8c2:	7878      	ldrb	r0, [r7, #1]
 800a8c4:	78ba      	ldrb	r2, [r7, #2]
 800a8c6:	78f9      	ldrb	r1, [r7, #3]
 800a8c8:	8b3b      	ldrh	r3, [r7, #24]
 800a8ca:	9302      	str	r3, [sp, #8]
 800a8cc:	7d3b      	ldrb	r3, [r7, #20]
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	7c3b      	ldrb	r3, [r7, #16]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa53 	bl	800ad82 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fa72 	bl	800ade0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f836 	bl	800a984 <USBH_GetFreePipe>
 800a918:	4603      	mov	r3, r0
 800a91a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a91c:	89fb      	ldrh	r3, [r7, #14]
 800a91e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a922:	4293      	cmp	r3, r2
 800a924:	d00a      	beq.n	800a93c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a926:	78fa      	ldrb	r2, [r7, #3]
 800a928:	89fb      	ldrh	r3, [r7, #14]
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	33e0      	adds	r3, #224	@ 0xe0
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	440b      	add	r3, r1
 800a93a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	b2db      	uxtb	r3, r3
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	2b0f      	cmp	r3, #15
 800a958:	d80d      	bhi.n	800a976 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	33e0      	adds	r3, #224	@ 0xe0
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	33e0      	adds	r3, #224	@ 0xe0
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
 800a994:	e00f      	b.n	800a9b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	33e0      	adds	r3, #224	@ 0xe0
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	e007      	b.n	800a9c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	73fb      	strb	r3, [r7, #15]
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	2b0f      	cmp	r3, #15
 800a9ba:	d9ec      	bls.n	800a996 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	490e      	ldr	r1, [pc, #56]	@ (800aa0c <MX_USB_HOST_Init+0x40>)
 800a9d4:	480e      	ldr	r0, [pc, #56]	@ (800aa10 <MX_USB_HOST_Init+0x44>)
 800a9d6:	f7fe fb15 	bl	8009004 <USBH_Init>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a9e0:	f7f5 ffc6 	bl	8000970 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a9e4:	490b      	ldr	r1, [pc, #44]	@ (800aa14 <MX_USB_HOST_Init+0x48>)
 800a9e6:	480a      	ldr	r0, [pc, #40]	@ (800aa10 <MX_USB_HOST_Init+0x44>)
 800a9e8:	f7fe fbb9 	bl	800915e <USBH_RegisterClass>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a9f2:	f7f5 ffbd 	bl	8000970 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a9f6:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <MX_USB_HOST_Init+0x44>)
 800a9f8:	f7fe fc3d 	bl	8009276 <USBH_Start>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa02:	f7f5 ffb5 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa06:	bf00      	nop
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	20012fcc 	.word	0x20012fcc
 800aa14:	20000014 	.word	0x20000014

0800aa18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aa1c:	4802      	ldr	r0, [pc, #8]	@ (800aa28 <MX_USB_HOST_Process+0x10>)
 800aa1e:	f7fe fc3b 	bl	8009298 <USBH_Process>
}
 800aa22:	bf00      	nop
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20012fcc 	.word	0x20012fcc

0800aa2c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa38:	78fb      	ldrb	r3, [r7, #3]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d819      	bhi.n	800aa74 <USBH_UserProcess+0x48>
 800aa40:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <USBH_UserProcess+0x1c>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa75 	.word	0x0800aa75
 800aa4c:	0800aa65 	.word	0x0800aa65
 800aa50:	0800aa75 	.word	0x0800aa75
 800aa54:	0800aa6d 	.word	0x0800aa6d
 800aa58:	0800aa5d 	.word	0x0800aa5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa5c:	4b09      	ldr	r3, [pc, #36]	@ (800aa84 <USBH_UserProcess+0x58>)
 800aa5e:	2203      	movs	r2, #3
 800aa60:	701a      	strb	r2, [r3, #0]
  break;
 800aa62:	e008      	b.n	800aa76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa64:	4b07      	ldr	r3, [pc, #28]	@ (800aa84 <USBH_UserProcess+0x58>)
 800aa66:	2202      	movs	r2, #2
 800aa68:	701a      	strb	r2, [r3, #0]
  break;
 800aa6a:	e004      	b.n	800aa76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <USBH_UserProcess+0x58>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
  break;
 800aa72:	e000      	b.n	800aa76 <USBH_UserProcess+0x4a>

  default:
  break;
 800aa74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa76:	bf00      	nop
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	200133a4 	.word	0x200133a4

0800aa88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08a      	sub	sp, #40	@ 0x28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa90:	f107 0314 	add.w	r3, r7, #20
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	60da      	str	r2, [r3, #12]
 800aa9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aaa8:	d147      	bne.n	800ab3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	4b25      	ldr	r3, [pc, #148]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800aab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab2:	4a24      	ldr	r2, [pc, #144]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800aab4:	f043 0301 	orr.w	r3, r3, #1
 800aab8:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaba:	4b22      	ldr	r3, [pc, #136]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
 800aac4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aacc:	2300      	movs	r3, #0
 800aace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aad0:	2300      	movs	r3, #0
 800aad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	4619      	mov	r1, r3
 800aada:	481b      	ldr	r0, [pc, #108]	@ (800ab48 <HAL_HCD_MspInit+0xc0>)
 800aadc:	f7f6 fb04 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aae0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800aae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae6:	2302      	movs	r3, #2
 800aae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaf2:	230a      	movs	r3, #10
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaf6:	f107 0314 	add.w	r3, r7, #20
 800aafa:	4619      	mov	r1, r3
 800aafc:	4812      	ldr	r0, [pc, #72]	@ (800ab48 <HAL_HCD_MspInit+0xc0>)
 800aafe:	f7f6 faf3 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab02:	4b10      	ldr	r3, [pc, #64]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800ab04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab06:	4a0f      	ldr	r2, [pc, #60]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800ab08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab0c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	4b0c      	ldr	r3, [pc, #48]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800ab14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab16:	4a0b      	ldr	r2, [pc, #44]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800ab18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab1e:	4b09      	ldr	r3, [pc, #36]	@ (800ab44 <HAL_HCD_MspInit+0xbc>)
 800ab20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	2043      	movs	r0, #67	@ 0x43
 800ab30:	f7f6 fab0 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab34:	2043      	movs	r0, #67	@ 0x43
 800ab36:	f7f6 fac9 	bl	80010cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab3a:	bf00      	nop
 800ab3c:	3728      	adds	r7, #40	@ 0x28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	40023800 	.word	0x40023800
 800ab48:	40020000 	.word	0x40020000

0800ab4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe ff73 	bl	8009a46 <USBH_LL_IncTimer>
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe ffab 	bl	8009ad2 <USBH_LL_Connect>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe ffb4 	bl	8009b00 <USBH_LL_Disconnect>
}
 800ab98:	bf00      	nop
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
 800abac:	4613      	mov	r3, r2
 800abae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe ff65 	bl	8009a9a <USBH_LL_PortEnabled>
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe ff65 	bl	8009ab6 <USBH_LL_PortDisabled>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d12a      	bne.n	800ac5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac06:	4a18      	ldr	r2, [pc, #96]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a15      	ldr	r2, [pc, #84]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac16:	4b14      	ldr	r3, [pc, #80]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac1e:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac20:	2208      	movs	r2, #8
 800ac22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac24:	4b10      	ldr	r3, [pc, #64]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac30:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac32:	2202      	movs	r2, #2
 800ac34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac36:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac3c:	480a      	ldr	r0, [pc, #40]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac3e:	f7f6 fbf0 	bl	8001422 <HAL_HCD_Init>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac48:	f7f5 fe92 	bl	8000970 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac4c:	4806      	ldr	r0, [pc, #24]	@ (800ac68 <USBH_LL_Init+0x74>)
 800ac4e:	f7f7 f851 	bl	8001cf4 <HAL_HCD_GetCurrentFrame>
 800ac52:	4603      	mov	r3, r0
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7fe fee6 	bl	8009a28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200133a8 	.word	0x200133a8

0800ac6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f6 ffbe 	bl	8001c04 <HAL_HCD_Start>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f95e 	bl	800af50 <USBH_Get_USB_Status>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f6 ffc6 	bl	8001c4a <HAL_HCD_Stop>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f943 	bl	800af50 <USBH_Get_USB_Status>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acce:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acea:	4618      	mov	r0, r3
 800acec:	f7f7 f810 	bl	8001d10 <HAL_HCD_GetCurrentSpeed>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d00c      	beq.n	800ad10 <USBH_LL_GetSpeed+0x38>
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d80d      	bhi.n	800ad16 <USBH_LL_GetSpeed+0x3e>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <USBH_LL_GetSpeed+0x2c>
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d003      	beq.n	800ad0a <USBH_LL_GetSpeed+0x32>
 800ad02:	e008      	b.n	800ad16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]
    break;
 800ad08:	e008      	b.n	800ad1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad0e:	e005      	b.n	800ad1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad10:	2302      	movs	r3, #2
 800ad12:	73fb      	strb	r3, [r7, #15]
    break;
 800ad14:	e002      	b.n	800ad1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad16:	2301      	movs	r3, #1
 800ad18:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1a:	bf00      	nop
  }
  return  speed;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7f6 ffa1 	bl	8001c84 <HAL_HCD_ResetPort>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 f901 	bl	800af50 <USBH_Get_USB_Status>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	4611      	mov	r1, r2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f6 ffa9 	bl	8001cca <HAL_HCD_HC_GetXferCount>
 800ad78:	4603      	mov	r3, r0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad82:	b590      	push	{r4, r7, lr}
 800ad84:	b089      	sub	sp, #36	@ 0x24
 800ad86:	af04      	add	r7, sp, #16
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4603      	mov	r3, r0
 800ad92:	70fb      	strb	r3, [r7, #3]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70bb      	strb	r3, [r7, #2]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800adaa:	787c      	ldrb	r4, [r7, #1]
 800adac:	78ba      	ldrb	r2, [r7, #2]
 800adae:	78f9      	ldrb	r1, [r7, #3]
 800adb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adb2:	9302      	str	r3, [sp, #8]
 800adb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	4623      	mov	r3, r4
 800adc2:	f7f6 fb95 	bl	80014f0 <HAL_HCD_HC_Init>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f8bf 	bl	800af50 <USBH_Get_USB_Status>
 800add2:	4603      	mov	r3, r0
 800add4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add6:	7bbb      	ldrb	r3, [r7, #14]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	bd90      	pop	{r4, r7, pc}

0800ade0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800adfa:	78fa      	ldrb	r2, [r7, #3]
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f6 fc2e 	bl	8001660 <HAL_HCD_HC_Halt>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 f8a0 	bl	800af50 <USBH_Get_USB_Status>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae1e:	b590      	push	{r4, r7, lr}
 800ae20:	b089      	sub	sp, #36	@ 0x24
 800ae22:	af04      	add	r7, sp, #16
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	4608      	mov	r0, r1
 800ae28:	4611      	mov	r1, r2
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	70fb      	strb	r3, [r7, #3]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70bb      	strb	r3, [r7, #2]
 800ae34:	4613      	mov	r3, r2
 800ae36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ae46:	787c      	ldrb	r4, [r7, #1]
 800ae48:	78ba      	ldrb	r2, [r7, #2]
 800ae4a:	78f9      	ldrb	r1, [r7, #3]
 800ae4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	4623      	mov	r3, r4
 800ae62:	f7f6 fc21 	bl	80016a8 <HAL_HCD_HC_SubmitRequest>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 f86f 	bl	800af50 <USBH_Get_USB_Status>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd90      	pop	{r4, r7, pc}

0800ae80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae92:	78fa      	ldrb	r2, [r7, #3]
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7f6 ff02 	bl	8001ca0 <HAL_HCD_HC_GetURBState>
 800ae9c:	4603      	mov	r3, r0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d103      	bne.n	800aec4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aebc:	78fb      	ldrb	r3, [r7, #3]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f872 	bl	800afa8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aec4:	20c8      	movs	r0, #200	@ 0xc8
 800aec6:	f7f6 f809 	bl	8000edc <HAL_Delay>
  return USBH_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
 800aee0:	4613      	mov	r3, r2
 800aee2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aeec:	78fa      	ldrb	r2, [r7, #3]
 800aeee:	68f9      	ldr	r1, [r7, #12]
 800aef0:	4613      	mov	r3, r2
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	1a9b      	subs	r3, r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	3317      	adds	r3, #23
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	4613      	mov	r3, r2
 800af08:	011b      	lsls	r3, r3, #4
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	440b      	add	r3, r1
 800af10:	333c      	adds	r3, #60	@ 0x3c
 800af12:	78ba      	ldrb	r2, [r7, #2]
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e009      	b.n	800af2c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	4613      	mov	r3, r2
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	333d      	adds	r3, #61	@ 0x3d
 800af28:	78ba      	ldrb	r2, [r7, #2]
 800af2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7f5 ffca 	bl	8000edc <HAL_Delay>
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af5e:	79fb      	ldrb	r3, [r7, #7]
 800af60:	2b03      	cmp	r3, #3
 800af62:	d817      	bhi.n	800af94 <USBH_Get_USB_Status+0x44>
 800af64:	a201      	add	r2, pc, #4	@ (adr r2, 800af6c <USBH_Get_USB_Status+0x1c>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800af83 	.word	0x0800af83
 800af74:	0800af89 	.word	0x0800af89
 800af78:	0800af8f 	.word	0x0800af8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
    break;
 800af80:	e00b      	b.n	800af9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af82:	2302      	movs	r3, #2
 800af84:	73fb      	strb	r3, [r7, #15]
    break;
 800af86:	e008      	b.n	800af9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
    break;
 800af8c:	e005      	b.n	800af9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af8e:	2302      	movs	r3, #2
 800af90:	73fb      	strb	r3, [r7, #15]
    break;
 800af92:	e002      	b.n	800af9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af94:	2302      	movs	r3, #2
 800af96:	73fb      	strb	r3, [r7, #15]
    break;
 800af98:	bf00      	nop
  }
  return usb_status;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800afb2:	79fb      	ldrb	r3, [r7, #7]
 800afb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
 800afc0:	e001      	b.n	800afc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800afc2:	2301      	movs	r3, #1
 800afc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	461a      	mov	r2, r3
 800afca:	2101      	movs	r1, #1
 800afcc:	4803      	ldr	r0, [pc, #12]	@ (800afdc <MX_DriverVbusFS+0x34>)
 800afce:	f7f6 fa0f 	bl	80013f0 <HAL_GPIO_WritePin>
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40020800 	.word	0x40020800

0800afe0 <malloc>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	@ (800afec <malloc+0xc>)
 800afe2:	4601      	mov	r1, r0
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f000 b82d 	b.w	800b044 <_malloc_r>
 800afea:	bf00      	nop
 800afec:	20000034 	.word	0x20000034

0800aff0 <free>:
 800aff0:	4b02      	ldr	r3, [pc, #8]	@ (800affc <free+0xc>)
 800aff2:	4601      	mov	r1, r0
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	f000 b8fd 	b.w	800b1f4 <_free_r>
 800affa:	bf00      	nop
 800affc:	20000034 	.word	0x20000034

0800b000 <sbrk_aligned>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4e0f      	ldr	r6, [pc, #60]	@ (800b040 <sbrk_aligned+0x40>)
 800b004:	460c      	mov	r4, r1
 800b006:	6831      	ldr	r1, [r6, #0]
 800b008:	4605      	mov	r5, r0
 800b00a:	b911      	cbnz	r1, 800b012 <sbrk_aligned+0x12>
 800b00c:	f000 f8ae 	bl	800b16c <_sbrk_r>
 800b010:	6030      	str	r0, [r6, #0]
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f000 f8a9 	bl	800b16c <_sbrk_r>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	d103      	bne.n	800b026 <sbrk_aligned+0x26>
 800b01e:	f04f 34ff 	mov.w	r4, #4294967295
 800b022:	4620      	mov	r0, r4
 800b024:	bd70      	pop	{r4, r5, r6, pc}
 800b026:	1cc4      	adds	r4, r0, #3
 800b028:	f024 0403 	bic.w	r4, r4, #3
 800b02c:	42a0      	cmp	r0, r4
 800b02e:	d0f8      	beq.n	800b022 <sbrk_aligned+0x22>
 800b030:	1a21      	subs	r1, r4, r0
 800b032:	4628      	mov	r0, r5
 800b034:	f000 f89a 	bl	800b16c <_sbrk_r>
 800b038:	3001      	adds	r0, #1
 800b03a:	d1f2      	bne.n	800b022 <sbrk_aligned+0x22>
 800b03c:	e7ef      	b.n	800b01e <sbrk_aligned+0x1e>
 800b03e:	bf00      	nop
 800b040:	20013788 	.word	0x20013788

0800b044 <_malloc_r>:
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b048:	1ccd      	adds	r5, r1, #3
 800b04a:	f025 0503 	bic.w	r5, r5, #3
 800b04e:	3508      	adds	r5, #8
 800b050:	2d0c      	cmp	r5, #12
 800b052:	bf38      	it	cc
 800b054:	250c      	movcc	r5, #12
 800b056:	2d00      	cmp	r5, #0
 800b058:	4606      	mov	r6, r0
 800b05a:	db01      	blt.n	800b060 <_malloc_r+0x1c>
 800b05c:	42a9      	cmp	r1, r5
 800b05e:	d904      	bls.n	800b06a <_malloc_r+0x26>
 800b060:	230c      	movs	r3, #12
 800b062:	6033      	str	r3, [r6, #0]
 800b064:	2000      	movs	r0, #0
 800b066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b140 <_malloc_r+0xfc>
 800b06e:	f000 f869 	bl	800b144 <__malloc_lock>
 800b072:	f8d8 3000 	ldr.w	r3, [r8]
 800b076:	461c      	mov	r4, r3
 800b078:	bb44      	cbnz	r4, 800b0cc <_malloc_r+0x88>
 800b07a:	4629      	mov	r1, r5
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff ffbf 	bl	800b000 <sbrk_aligned>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	4604      	mov	r4, r0
 800b086:	d158      	bne.n	800b13a <_malloc_r+0xf6>
 800b088:	f8d8 4000 	ldr.w	r4, [r8]
 800b08c:	4627      	mov	r7, r4
 800b08e:	2f00      	cmp	r7, #0
 800b090:	d143      	bne.n	800b11a <_malloc_r+0xd6>
 800b092:	2c00      	cmp	r4, #0
 800b094:	d04b      	beq.n	800b12e <_malloc_r+0xea>
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	4639      	mov	r1, r7
 800b09a:	4630      	mov	r0, r6
 800b09c:	eb04 0903 	add.w	r9, r4, r3
 800b0a0:	f000 f864 	bl	800b16c <_sbrk_r>
 800b0a4:	4581      	cmp	r9, r0
 800b0a6:	d142      	bne.n	800b12e <_malloc_r+0xea>
 800b0a8:	6821      	ldr	r1, [r4, #0]
 800b0aa:	1a6d      	subs	r5, r5, r1
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f7ff ffa6 	bl	800b000 <sbrk_aligned>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d03a      	beq.n	800b12e <_malloc_r+0xea>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	442b      	add	r3, r5
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	bb62      	cbnz	r2, 800b120 <_malloc_r+0xdc>
 800b0c6:	f8c8 7000 	str.w	r7, [r8]
 800b0ca:	e00f      	b.n	800b0ec <_malloc_r+0xa8>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	1b52      	subs	r2, r2, r5
 800b0d0:	d420      	bmi.n	800b114 <_malloc_r+0xd0>
 800b0d2:	2a0b      	cmp	r2, #11
 800b0d4:	d917      	bls.n	800b106 <_malloc_r+0xc2>
 800b0d6:	1961      	adds	r1, r4, r5
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	6025      	str	r5, [r4, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	6059      	strne	r1, [r3, #4]
 800b0e0:	6863      	ldr	r3, [r4, #4]
 800b0e2:	bf08      	it	eq
 800b0e4:	f8c8 1000 	streq.w	r1, [r8]
 800b0e8:	5162      	str	r2, [r4, r5]
 800b0ea:	604b      	str	r3, [r1, #4]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f000 f82f 	bl	800b150 <__malloc_unlock>
 800b0f2:	f104 000b 	add.w	r0, r4, #11
 800b0f6:	1d23      	adds	r3, r4, #4
 800b0f8:	f020 0007 	bic.w	r0, r0, #7
 800b0fc:	1ac2      	subs	r2, r0, r3
 800b0fe:	bf1c      	itt	ne
 800b100:	1a1b      	subne	r3, r3, r0
 800b102:	50a3      	strne	r3, [r4, r2]
 800b104:	e7af      	b.n	800b066 <_malloc_r+0x22>
 800b106:	6862      	ldr	r2, [r4, #4]
 800b108:	42a3      	cmp	r3, r4
 800b10a:	bf0c      	ite	eq
 800b10c:	f8c8 2000 	streq.w	r2, [r8]
 800b110:	605a      	strne	r2, [r3, #4]
 800b112:	e7eb      	b.n	800b0ec <_malloc_r+0xa8>
 800b114:	4623      	mov	r3, r4
 800b116:	6864      	ldr	r4, [r4, #4]
 800b118:	e7ae      	b.n	800b078 <_malloc_r+0x34>
 800b11a:	463c      	mov	r4, r7
 800b11c:	687f      	ldr	r7, [r7, #4]
 800b11e:	e7b6      	b.n	800b08e <_malloc_r+0x4a>
 800b120:	461a      	mov	r2, r3
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	42a3      	cmp	r3, r4
 800b126:	d1fb      	bne.n	800b120 <_malloc_r+0xdc>
 800b128:	2300      	movs	r3, #0
 800b12a:	6053      	str	r3, [r2, #4]
 800b12c:	e7de      	b.n	800b0ec <_malloc_r+0xa8>
 800b12e:	230c      	movs	r3, #12
 800b130:	6033      	str	r3, [r6, #0]
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f80c 	bl	800b150 <__malloc_unlock>
 800b138:	e794      	b.n	800b064 <_malloc_r+0x20>
 800b13a:	6005      	str	r5, [r0, #0]
 800b13c:	e7d6      	b.n	800b0ec <_malloc_r+0xa8>
 800b13e:	bf00      	nop
 800b140:	2001378c 	.word	0x2001378c

0800b144 <__malloc_lock>:
 800b144:	4801      	ldr	r0, [pc, #4]	@ (800b14c <__malloc_lock+0x8>)
 800b146:	f000 b845 	b.w	800b1d4 <__retarget_lock_acquire_recursive>
 800b14a:	bf00      	nop
 800b14c:	200138cc 	.word	0x200138cc

0800b150 <__malloc_unlock>:
 800b150:	4801      	ldr	r0, [pc, #4]	@ (800b158 <__malloc_unlock+0x8>)
 800b152:	f000 b840 	b.w	800b1d6 <__retarget_lock_release_recursive>
 800b156:	bf00      	nop
 800b158:	200138cc 	.word	0x200138cc

0800b15c <memset>:
 800b15c:	4402      	add	r2, r0
 800b15e:	4603      	mov	r3, r0
 800b160:	4293      	cmp	r3, r2
 800b162:	d100      	bne.n	800b166 <memset+0xa>
 800b164:	4770      	bx	lr
 800b166:	f803 1b01 	strb.w	r1, [r3], #1
 800b16a:	e7f9      	b.n	800b160 <memset+0x4>

0800b16c <_sbrk_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	@ (800b188 <_sbrk_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f000 f886 	bl	800b288 <_sbrk>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_sbrk_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_sbrk_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	200138c8 	.word	0x200138c8

0800b18c <__libc_init_array>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	4d0d      	ldr	r5, [pc, #52]	@ (800b1c4 <__libc_init_array+0x38>)
 800b190:	4c0d      	ldr	r4, [pc, #52]	@ (800b1c8 <__libc_init_array+0x3c>)
 800b192:	1b64      	subs	r4, r4, r5
 800b194:	10a4      	asrs	r4, r4, #2
 800b196:	2600      	movs	r6, #0
 800b198:	42a6      	cmp	r6, r4
 800b19a:	d109      	bne.n	800b1b0 <__libc_init_array+0x24>
 800b19c:	4d0b      	ldr	r5, [pc, #44]	@ (800b1cc <__libc_init_array+0x40>)
 800b19e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1d0 <__libc_init_array+0x44>)
 800b1a0:	f000 f880 	bl	800b2a4 <_init>
 800b1a4:	1b64      	subs	r4, r4, r5
 800b1a6:	10a4      	asrs	r4, r4, #2
 800b1a8:	2600      	movs	r6, #0
 800b1aa:	42a6      	cmp	r6, r4
 800b1ac:	d105      	bne.n	800b1ba <__libc_init_array+0x2e>
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b4:	4798      	blx	r3
 800b1b6:	3601      	adds	r6, #1
 800b1b8:	e7ee      	b.n	800b198 <__libc_init_array+0xc>
 800b1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1be:	4798      	blx	r3
 800b1c0:	3601      	adds	r6, #1
 800b1c2:	e7f2      	b.n	800b1aa <__libc_init_array+0x1e>
 800b1c4:	0800b2f8 	.word	0x0800b2f8
 800b1c8:	0800b2f8 	.word	0x0800b2f8
 800b1cc:	0800b2f8 	.word	0x0800b2f8
 800b1d0:	0800b2fc 	.word	0x0800b2fc

0800b1d4 <__retarget_lock_acquire_recursive>:
 800b1d4:	4770      	bx	lr

0800b1d6 <__retarget_lock_release_recursive>:
 800b1d6:	4770      	bx	lr

0800b1d8 <memcpy>:
 800b1d8:	440a      	add	r2, r1
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1e0:	d100      	bne.n	800b1e4 <memcpy+0xc>
 800b1e2:	4770      	bx	lr
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ee:	4291      	cmp	r1, r2
 800b1f0:	d1f9      	bne.n	800b1e6 <memcpy+0xe>
 800b1f2:	bd10      	pop	{r4, pc}

0800b1f4 <_free_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d041      	beq.n	800b280 <_free_r+0x8c>
 800b1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b200:	1f0c      	subs	r4, r1, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	bfb8      	it	lt
 800b206:	18e4      	addlt	r4, r4, r3
 800b208:	f7ff ff9c 	bl	800b144 <__malloc_lock>
 800b20c:	4a1d      	ldr	r2, [pc, #116]	@ (800b284 <_free_r+0x90>)
 800b20e:	6813      	ldr	r3, [r2, #0]
 800b210:	b933      	cbnz	r3, 800b220 <_free_r+0x2c>
 800b212:	6063      	str	r3, [r4, #4]
 800b214:	6014      	str	r4, [r2, #0]
 800b216:	4628      	mov	r0, r5
 800b218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b21c:	f7ff bf98 	b.w	800b150 <__malloc_unlock>
 800b220:	42a3      	cmp	r3, r4
 800b222:	d908      	bls.n	800b236 <_free_r+0x42>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	1821      	adds	r1, r4, r0
 800b228:	428b      	cmp	r3, r1
 800b22a:	bf01      	itttt	eq
 800b22c:	6819      	ldreq	r1, [r3, #0]
 800b22e:	685b      	ldreq	r3, [r3, #4]
 800b230:	1809      	addeq	r1, r1, r0
 800b232:	6021      	streq	r1, [r4, #0]
 800b234:	e7ed      	b.n	800b212 <_free_r+0x1e>
 800b236:	461a      	mov	r2, r3
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	b10b      	cbz	r3, 800b240 <_free_r+0x4c>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d9fa      	bls.n	800b236 <_free_r+0x42>
 800b240:	6811      	ldr	r1, [r2, #0]
 800b242:	1850      	adds	r0, r2, r1
 800b244:	42a0      	cmp	r0, r4
 800b246:	d10b      	bne.n	800b260 <_free_r+0x6c>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	4401      	add	r1, r0
 800b24c:	1850      	adds	r0, r2, r1
 800b24e:	4283      	cmp	r3, r0
 800b250:	6011      	str	r1, [r2, #0]
 800b252:	d1e0      	bne.n	800b216 <_free_r+0x22>
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	6053      	str	r3, [r2, #4]
 800b25a:	4408      	add	r0, r1
 800b25c:	6010      	str	r0, [r2, #0]
 800b25e:	e7da      	b.n	800b216 <_free_r+0x22>
 800b260:	d902      	bls.n	800b268 <_free_r+0x74>
 800b262:	230c      	movs	r3, #12
 800b264:	602b      	str	r3, [r5, #0]
 800b266:	e7d6      	b.n	800b216 <_free_r+0x22>
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	1821      	adds	r1, r4, r0
 800b26c:	428b      	cmp	r3, r1
 800b26e:	bf04      	itt	eq
 800b270:	6819      	ldreq	r1, [r3, #0]
 800b272:	685b      	ldreq	r3, [r3, #4]
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	bf04      	itt	eq
 800b278:	1809      	addeq	r1, r1, r0
 800b27a:	6021      	streq	r1, [r4, #0]
 800b27c:	6054      	str	r4, [r2, #4]
 800b27e:	e7ca      	b.n	800b216 <_free_r+0x22>
 800b280:	bd38      	pop	{r3, r4, r5, pc}
 800b282:	bf00      	nop
 800b284:	2001378c 	.word	0x2001378c

0800b288 <_sbrk>:
 800b288:	4a04      	ldr	r2, [pc, #16]	@ (800b29c <_sbrk+0x14>)
 800b28a:	6811      	ldr	r1, [r2, #0]
 800b28c:	4603      	mov	r3, r0
 800b28e:	b909      	cbnz	r1, 800b294 <_sbrk+0xc>
 800b290:	4903      	ldr	r1, [pc, #12]	@ (800b2a0 <_sbrk+0x18>)
 800b292:	6011      	str	r1, [r2, #0]
 800b294:	6810      	ldr	r0, [r2, #0]
 800b296:	4403      	add	r3, r0
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	4770      	bx	lr
 800b29c:	200138d0 	.word	0x200138d0
 800b2a0:	200138d8 	.word	0x200138d8

0800b2a4 <_init>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	bf00      	nop
 800b2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2aa:	bc08      	pop	{r3}
 800b2ac:	469e      	mov	lr, r3
 800b2ae:	4770      	bx	lr

0800b2b0 <_fini>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	bf00      	nop
 800b2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b6:	bc08      	pop	{r3}
 800b2b8:	469e      	mov	lr, r3
 800b2ba:	4770      	bx	lr
